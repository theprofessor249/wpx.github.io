{
    "version": "https://jsonfeed.org/version/1",
    "title": "培新",
    "description": "",
    "home_page_url": "https://theprofessor249.github.io",
    "items": [
        {
            "id": "https://theprofessor249.github.io/2021/07/13/%E7%AC%94%E8%AE%B0%E7%B1%BB/linux%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/",
            "url": "https://theprofessor249.github.io/2021/07/13/%E7%AC%94%E8%AE%B0%E7%B1%BB/linux%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/",
            "title": "Linux 共享文件夹",
            "date_published": "2021-07-13T06:15:12.274Z",
            "content_html": "<p><strong>Linux 共享文件夹</strong></p>\n<p>1. 打开虚拟机，编辑虚拟机设置，选择选项中的共享文件夹；在右侧点击始终启用，选择好后点击添加按钮<br />\n，在弹口中，点击浏览，并在主机磁盘中建立一个文件夹，做为共享文件夹，选择启用该共享，点击完成。</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gse60gkm6vj318g0p0k6f.jpg\" alt=\"\" /></p>\n<p>2. 进入 ubuntu，安装 VMwave  Tool<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gse60nlk3ej30gr0b5td6.jpg\" alt=\"\" /></p>\n<p>3. 通过下列命令解压、执行，分别是下面的 tar 和 sudo 的两行</p>\n<p><strong>复制、压缩命令：</strong></p>\n<blockquote>\n<p>tar -czvf dir.tar.gz dir/          将 dir 目录打包成 dir.tar.gz</p>\n</blockquote>\n<blockquote>\n<p>tar -cjvf dir.tar.bz2 dir/         将 dir 目录打包成 dir.tar.bz2</p>\n</blockquote>\n<blockquote>\n<p>tar -zxvf dir.tar.gz                解压缩 dir.tar.gz</p>\n</blockquote>\n<blockquote>\n<p>tar -jxvf dir.tar.bz2               解压缩 dir.tar.bz2</p>\n</blockquote>\n<blockquote>\n<p>注意 “-” 前面有空格</p>\n</blockquote>\n<blockquote>\n<p>cp 命令</p>\n</blockquote>\n<blockquote>\n<p>语法： cp [选项] 源文件或目录 目标文件或目录</p>\n</blockquote>\n<ul>\n<li>a 该选项通常在拷贝目录时使用。它保留链接、文件属性，并递归地拷贝目录，其作用等于 dpR 选项的组合。</li>\n</ul>\n<blockquote>\n<ul>\n<li>d 拷贝时保留链接。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>f 删除已经存在的目标文件而不提示。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>i 和 f 选项相反，在覆盖目标文件之前将给出提示要求用户确认。回答 y 时目标文件将被覆盖，是交互式拷贝。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>p 此时 cp 除复制源文件的内容外，还将把其修改时间和访问权限也复制到新文件中。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>r 若给出的源文件是一目录文件，此时 cp 将递归复制该目录下所有的子目录和文件。此时目标文件必须为一个目录名。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>l 不作拷贝，只是链接文件。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>例如：将 /home/wally/test 中 test.c 的文件复制到 /local/arm 中，命令为：</p>\n</blockquote>\n<blockquote>\n<p>cd /wally/test</p>\n</blockquote>\n<blockquote>\n<p>ls</p>\n<p>sudo cp -i test.c  /local/arm</p>\n</blockquote>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gse60qpm84j30gp0b4qaw.jpg\" alt=\"\" /></p>\n<p>4. 一路按 Enter，最后得到</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gse60tkml1j30go0b5455.jpg\" alt=\"\" /></p>\n<p>5. 执行 mount 命令，之后 mnt/hgfs 里就可以看到前面设置的共享目录</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gse60whifpj30gq0b4qbl.jpg\" alt=\"\" /></p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/07/13/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86%20%20%20%20%20Linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%91%98/",
            "url": "https://theprofessor249.github.io/2021/07/13/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86%20%20%20%20%20Linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%91%98/",
            "title": "第五部分   Linux系统管理员",
            "date_published": "2021-07-13T06:15:12.270Z",
            "content_html": "<h1 id=\"启动关机的流程与加载程序\"><a class=\"anchor\" href=\"#启动关机的流程与加载程序\">#</a> 启动关机的流程与加载程序</h1>\n<h2 id=\"启动流程\"><a class=\"anchor\" href=\"#启动流程\">#</a> 启动流程</h2>\n<p><strong>启动过程需要加载核心，让核心来驱动整个硬件，启动过程如下：</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/9c0d8c3d51f6a189978aade18172391c\" alt=\"\" /></p>\n<h3 id=\"引导加载程序与核心载入\"><a class=\"anchor\" href=\"#引导加载程序与核心载入\">#</a> 引导加载程序与核心载入</h3>\n<p><strong>整个主机启动后，第一个读取的地方是 BIOS，BIOS 里记录了主机板的芯片集与相关的设置，如 CPU 与接口设备的通信频率、启动设备的搜索顺序、硬盘的大小与类型、系统时间、外部总线是否启动即插即用、各接口设备的 I/O 地址，以及与 CPU 通信的 IRQ 中断等信息；获取 BIOS 设置值后，系统会根据 BIOS 的数据，进行加电自检，然后初始化硬件检测，并设置 PnP 设备，确定可启动的设备后，开始读取启动设备的数据；启动流程读到硬盘的过程中，第一个要读取的就是该硬盘的主引导记录，系统可以由主要启动区安装的引导加载程序开始执行核心识别的工作。</strong></p>\n<p><strong>选择以 grub 程序启动，系统就会到该记录区去读取该操作系统的核心。良好的引导加载程序会具有如下两项功能：</strong></p>\n<ul>\n<li>\n<p>菜单功能</p>\n</li>\n<li>\n<p>指向功能</p>\n</li>\n</ul>\n<p><strong>通过引导加载程序的管理而开始读取核心文件后，Linux 就会将核心解压缩到主存储器中，并且利用核心的功能，开始测试与驱动各台外部设备，包括存储设备、CPU、网卡、声卡等。一般核心文件会放置 /boot 里，并且取名为 /boot/vmlinux</strong></p>\n<p><strong>在加载核心的过程中，系统只会载入根目录，而且是以只读方式载入；有时为了某些功能可以用文件方式来读取；有时系统启动时，会建立虚拟盘，这就需要使用 initrd 以及 linuxrc，利用引导加载程序的功能，可以在加载核心的时候，一起加载 initrd 的映像文件，系统会主动以 initrd 来建立虚拟盘，并且利用 linuxrc 程序来加载模块，linuxrc 主要特点：</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/8828554dba19d37c988b6450f5c03fc6\" alt=\"\" /></p>\n<h3 id=\"第一个程序init及设置文件etcinittab与runlevel\"><a class=\"anchor\" href=\"#第一个程序init及设置文件etcinittab与runlevel\">#</a> 第一个程序 init 及设置文件 /etc/inittab 与 runlevel</h3>\n<p><strong>第一个执行的程序就是 /sbin/init，它除了利用设置文件 /etc/inittab 来获取运行等级之外，还会通过运行等级的设置值启动不同的服务项目</strong></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/744e67e69b45925055d78718e451ceec\" alt=\"\" /></p>\n<p><strong>运算等级：就是通过设置运行等级，来规定系统用不同的服务来启动；根据有无网络与有无 XWindow，分为 6 个运行等级</strong></p>\n<ul>\n<li>/etc/inittab 的信息</li>\n</ul>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/8052a22e1a3fb3b9b08e29b010f7166b\" alt=\"\" /></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/c23b8a52a02e2c2086412253591040d5\" alt=\"\" /></p>\n<p><strong>结论</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/1eb89494bb05f7e9346b87bc479265cf\" alt=\"\" /></p>\n<h3 id=\"init处理系统初始化流程etcrcdrcsysinit\"><a class=\"anchor\" href=\"#init处理系统初始化流程etcrcdrcsysinit\">#</a> init 处理系统初始化流程（/etc/rc.d/rc.sysinit）</h3>\n<p><strong>主要用于设置系统环境</strong></p>\n<p><strong>/etc/rc.d/rc.sysinit 的主要工作：</strong></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/05b15ca9f58e2ebaa1e9ef5eae47cc95\" alt=\"\" /><br />\n<img data-src=\"https://img02.sogoucdn.com/app/a/100520146/cd85aa507effc2879697835c97c3f96f\" alt=\"\" /></p>\n<h3 id=\"启动系统服务与相关启动设置文件\"><a class=\"anchor\" href=\"#启动系统服务与相关启动设置文件\">#</a> 启动系统服务与相关启动设置文件</h3>\n<p><strong>加载核心让整个系统准备接受命令，然后再经过 /etc/rc.d/rc.sysinit 的系统模块与相关硬件信息的初始化。还需我们启动系统所需要的各项服务，主机才能提供相关的网络或主机功能。根据再 /etc/inittab 里提到的运行等级设置值，就可以决定启动的服务项目。</strong></p>\n<p><strong>各种不同的服务其实还是相互关联的</strong></p>\n<p><strong>S 或 K 后面接的数字就是执行的顺序：</strong></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/be2d2d160b60a5e26239faeb0d3b9bf1\" alt=\"\" /></p>\n<h3 id=\"用户自定义引导启动程序\"><a class=\"anchor\" href=\"#用户自定义引导启动程序\">#</a> 用户自定义引导启动程序</h3>\n<p><strong>任何想要再启动时就执行的工作，直接写入 /etc/rc.d/rc.local，那么该工作就会再启动的时候自动加载，而不等我们登录系统去启动；把自己制作的 shell 脚本的完整文件名写入 /etc/rc.d/rc.local，启动时就睡执行我的 shell 脚本</strong></p>\n<h3 id=\"根据etcinittab设置加载终端或x-window界面\"><a class=\"anchor\" href=\"#根据etcinittab设置加载终端或x-window界面\">#</a> 根据 /etc/inittab 设置加载终端或 X-Window 界面</h3>\n<p><strong>在完成了系统所有服务的启动后，接下来 Linux 就会启动终端或 X Window 来等待用户登录，实际参考内容是 /etc/inittab 内的</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/ecc28e9606cb4da74596689a9a09d84e\" alt=\"\" /></p>\n<h3 id=\"其他启动相关事项\"><a class=\"anchor\" href=\"#其他启动相关事项\">#</a> 其他启动相关事项</h3>\n<p>1. 关于模块：/etc/modprobe.conf</p>\n<p><strong>对核心提供的默认模块进行一些参数的设计</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/23e745b012127a32e82304b17587fdef\" alt=\"\" /></p>\n<p>2./etc/sysconfig/*</p>\n<p><strong>整个启动过程中，读取的服务相关设置文件都记录在 /etc/sysconfig 目录下</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/9588b4872993b0925e3af95f85892981\" alt=\"\" /></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/18635106d182a9e035cceb85ced7e11b\" alt=\"\" /></p>\n<h3 id=\"变换运行等级\"><a class=\"anchor\" href=\"#变换运行等级\">#</a> 变换运行等级</h3>\n<p><strong>运行等级的不同仅是 /etc/rc.d/rc [0-6].d 里启动的服务不同而已；根据启动是否自动进入不同运行等级的设置：</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/4e4c05bdf37c415695622638485f3d02\" alt=\"\" /></p>\n<p>如何将运行等级 5 切换至等级 3</p>\n<p><strong>当执行 init3 时，系统会：</strong></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/6be449d26e6b626f12c5d0acf5c31092\" alt=\"\" /></p>\n<p><strong>之后直接在 bash 中输入 runlevel 即可</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/cb849ae011ed659a42b646e0ecf96fe2\" alt=\"\" /></p>\n<h2 id=\"核心与核心模块\"><a class=\"anchor\" href=\"#核心与核心模块\">#</a> 核心与核心模块</h2>\n<p><strong>在整个启动过程中，能否成功地驱动主机的硬件设备，是核心的工作，而核心一般都是压缩文件，因此在使用核心之前，就要将它解压缩后，才加载到主存储器中</strong></p>\n<p><strong>由于硬件的不断更新，当前核心都具有可读取模块化驱动程序的功能，可以将模块化想成是一个外挂程序，该外挂程序可能由硬件开发厂商提供</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/ec7aefe8722f26ac4bb593fb0169f078\" alt=\"\" /><br />\n<img data-src=\"https://img01.sogoucdn.com/app/a/100520146/671e9824296085539083ccd7a5be187c\" alt=\"\" /></p>\n<h3 id=\"核心模块与依赖性\"><a class=\"anchor\" href=\"#核心模块与依赖性\">#</a> 核心模块与依赖性</h3>\n<p><strong>核心房子啊 /lib/modules/'uname -r'/kernel 中</strong></p>\n<p>1<strong>Linux 提供一些模块依赖性的解决方案，就是检查 /lib/moduless/'uname-r'/modules.dep 文件，它记录了在核心支持的模块的各项依赖性</strong></p>\n<ul>\n<li>使用 depmod 命令建立该文件</li>\n</ul>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/2beb12b271b31268b8b07e0a56561d8f\" alt=\"\" /></p>\n<h3 id=\"核心模块的观察lsmod-modinfo\"><a class=\"anchor\" href=\"#核心模块的观察lsmod-modinfo\">#</a> 核心模块的观察：lsmod、modinfo</h3>\n<p><strong>查看核心内的模块：</strong></p>\n<p><strong>即可查看核心模块，亦可检查模块文件</strong></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/6c2cdfd5686441ae774f6081ed5f5fed\" alt=\"\" /></p>\n<h3 id=\"核心模块的加载与删除insmod-modprobe-rmmod\"><a class=\"anchor\" href=\"#核心模块的加载与删除insmod-modprobe-rmmod\">#</a> 核心模块的加载与删除：insmod、modprobe、rmmod</h3>\n<p>1.insmod</p>\n<p><strong>手动加载模块；insmod 完全由用户自行加载一个完整文件名的模块，并不会主动地分析模块的依赖性</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/efff98efab91bedbe73e9c57b730eb68\" alt=\"\" /></p>\n<p>2.rmmod</p>\n<p><strong>删除模块</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/44de937618b8ed2d572db3228c59c159\" alt=\"\" /></p>\n<p>3.modprobe</p>\n<p><strong>modprobe 会主动搜索 modules.dep 的内容，先解决了模块的依赖性后，才决定需要加载的模块</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/75f83239722c9e4d77183173b36204d0\" alt=\"\" /></p>\n<h3 id=\"核心模块的额外参数设置etcmodprobeconf\"><a class=\"anchor\" href=\"#核心模块的额外参数设置etcmodprobeconf\">#</a> 核心模块的额外参数设置：/etc/modprobe.conf</h3>\n<p><strong>若想修改某些模块的额外参数设置，就在这个文件内设置，对于 I/O 与 IRQ 的设置</strong></p>\n<h2 id=\"引导加载程序grub\"><a class=\"anchor\" href=\"#引导加载程序grub\">#</a> 引导加载程序：Grub</h2>\n<h3 id=\"引导加载程序的功能与意义\"><a class=\"anchor\" href=\"#引导加载程序的功能与意义\">#</a> 引导加载程序的功能与意义</h3>\n<p><strong>在 BIOS 读完信息后，接下来到第一个启动设备的 MBR 去读取引导加载程序，这个引导加载程序可以具有菜单功能，而且还能辨识硬盘的文件系统，并且指向核心文件，以将它读入主存储器中</strong></p>\n<p><strong>MBR 是整个硬盘的第一个扇区，整个大小不可能超过 512KB，加载程序功能这么强，不仅仅占用少量的容量；是因为我们将引导加载程序分成两个阶段来执行：</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/8712a299d6a236b8fefcec9f41d7c9e2\" alt=\"\" /></p>\n<p><strong>我们可以将引导加载程序安装在超级块</strong></p>\n<p><strong>引导加载程序可以做到：</strong></p>\n<ul>\n<li>\n<p>引导加载程序可以直接指定并取用核心文件，加载到主存储器中</p>\n</li>\n<li>\n<p>也可以将加载程序的控制权移交给下一个加载程序</p>\n</li>\n</ul>\n<p><strong>引导加载程序除了可以直接指定核心文件来启动之外，也可以指定某个超级快中的引导加载程序</strong></p>\n<p><strong>Linxu 可以选择将引导加载程序安装在 MBR 或超级快中，但是，Windows 系统则几乎默认强制会同时安装在 MBR 与超级块中，所以，我们说要安装多重操作系统时，最好先安装 Windows 再安装 Linux，因为若先安装 Linux，则后安装 Windows 时，会强制将 MBR 的引导加载程序覆盖掉，这样将无法以 Windows 的引导加载程序进入 Linux</strong></p>\n<h3 id=\"grub的设置文件bootgrubmenulst与安装类型\"><a class=\"anchor\" href=\"#grub的设置文件bootgrubmenulst与安装类型\">#</a> grub 的设置文件 /boot/grub/menu.lst 与安装类型</h3>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/9c8fa3b22f4981a4cc040783e0fd79dc\" alt=\"\" /></p>\n<p>1. 与硬盘的关系</p>\n<p><strong>grub 主程序是安装在 MBR 中，并且动态地搜索设置文件的信息，它必须认识硬盘</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/1208e0d1f42758d3f986494369e228f4\" alt=\"\" /></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/e8321b599b2b0ae080363cb189f861b4\" alt=\"\" /></p>\n<p>2./boot/grup/menu.lst 设置文件</p>\n<p><strong>grub 的设置文件内容 /boot/grub/menu.lst</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/1f0e71d5810dd419e3b66d880ce6f438\" alt=\"\" /></p>\n<p>(1) 直接指定核心启动</p>\n<p><strong>指定核心启动，就需要用到 initrd 的 RAM  Disk 设置文件（通常放在 /boot 下面）；以 grub 的硬盘识别方式，找出完整的 kernel 与 initrd 文件名</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/ed6ee205b0765123b141eb7509ce5c27\" alt=\"\" /></p>\n<p>（2）利用链式加载程序（chain loader）的方式</p>\n<p><strong>所谓链式加载程序，仅是将控制权交给下一个引导加载程序而已，所以 grub 并不需要认识与找出核心文件，它只是将 boot 的控制权交给下一个超级快或者是 MBR 内的引导加载程序</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/9241b8f5d29db4dfef02935611d48569\" alt=\"\" /></p>\n<h3 id=\"测试与安装grub\"><a class=\"anchor\" href=\"#测试与安装grub\">#</a> 测试与安装 grub</h3>\n<p><strong>必须使用 grub-install 将一些必要的文件复制到 /boot/grub</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/d5e10dd26c2026ae78cf28307680a155\" alt=\"\" /></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/309d74ae44a1bceaca4bc57940d987c2\" alt=\"\" /></p>\n<p><strong>介绍几个有用的命令及安装步骤</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/2e681844b5db9d4edc9138013da01c05\" alt=\"\" /></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/fdc960dcffb0b6dfcd42e0bd4d6db478\" alt=\"\" /></p>\n<h3 id=\"启动前的额外功能修改\"><a class=\"anchor\" href=\"#启动前的额外功能修改\">#</a> 启动前的额外功能修改</h3>\n<p><strong>当 Linux 正在进行启动，我们按下任意键，就可以进行 grub 的在线编辑功能</strong></p>\n<ul>\n<li>若按如下按键</li>\n</ul>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/b1fd375c629eb395de3ac4e040214cfc\" alt=\"\" /></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/28589a73b503411f8ae881f4f8606ad1\" alt=\"\" /></p>\n<h3 id=\"核心功能的vga设置\"><a class=\"anchor\" href=\"#核心功能的vga设置\">#</a> 核心功能的 vga 设置</h3>\n<p><strong>vga：主要设置终端 tty1-tty6 的分辨率与颜色质量；   对应表如下：</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/869b479671a2024112feb2a895714adc\" alt=\"\" /></p>\n<h2 id=\"引导加载程序lilo\"><a class=\"anchor\" href=\"#引导加载程序lilo\">#</a> 引导加载程序：LILO</h2>\n<p><strong>LILO 是 Linux 最早的引导加载程序。主要使用 /etc/lilo.conf 设置文件，然后再以 lilo 主程序将该设置内容写入启动区中</strong></p>\n<h3 id=\"lilo的设置文件etcliloconf\"><a class=\"anchor\" href=\"#lilo的设置文件etcliloconf\">#</a> LILO 的设置文件 /etc/lilo.conf</h3>\n<p>设置文件 /etc/lilo.conf 同样分为两部分，分别是 LILO 整体环境设置部分，与每个启动项目核心文件名称规范部分</p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/37cf9a1bc57352e5108596eb4b3a4a65\" alt=\"\" /></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/bed7372f7f21a8f8b2867d5b7e358f57\" alt=\"\" /></p>\n<h3 id=\"测试与安装lilo引导加载程序\"><a class=\"anchor\" href=\"#测试与安装lilo引导加载程序\">#</a> 测试与安装 LILO 引导加载程序</h3>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/130c874283068f74126564c8559d7ee8\" alt=\"\" /></p>\n<p><strong>lilo 的安装</strong></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/c6aad9967b68c53da98c537d5f40d8f8\" alt=\"\" /></p>\n<h2 id=\"解决启动过程的问题\"><a class=\"anchor\" href=\"#解决启动过程的问题\">#</a> 解决启动过程的问题</h2>\n<h3 id=\"忘记root密码的解决方案\"><a class=\"anchor\" href=\"#忘记root密码的解决方案\">#</a> 忘记 root 密码的解决方案</h3>\n<p><strong>忘记 root 密码：只要能够进入并且载入（/），然后修改 /etc/shadow 内的 root 密码栏重新启动后，root 就不需要密码即可登录。过程如下：</strong></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/08225195c011dac805ab3e63912e99e8\" alt=\"\" /></p>\n<h3 id=\"利用chroot切换到另一个硬盘\"><a class=\"anchor\" href=\"#利用chroot切换到另一个硬盘\">#</a> 利用 chroot 切换到另一个硬盘</h3>\n<p><strong>chroot：可以暂时将根目录移到某个目录中，然后区处理某个问题，最后再离开该根目录而回到原来的系统中</strong></p>\n<p><strong>同样可以将 Linux 硬盘拔到另一台 Linux 主机上，然后用这个 chroot 来切换，以处理硬盘问题，做法如下：</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/2dee28ac8f890d2f6d4a93748993afa1\" alt=\"\" /></p>\n<h1 id=\"源码与tarball套件管理程序\"><a class=\"anchor\" href=\"#源码与tarball套件管理程序\">#</a> 源码与 Tarball 套件管理程序</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p><strong>如果想在 Linux 服务器上运行网页服务器，一定要安装网页服务器的套件；Linux 上的套件几乎都是经过 GPL 的授权，所以每个套件均提供源码，可以自行修改该程序代码</strong></p>\n<h3 id=\"什么是开放源码-编译器与可执行文件\"><a class=\"anchor\" href=\"#什么是开放源码-编译器与可执行文件\">#</a> 什么是开放源码、编译器与可执行文件</h3>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/24a7f7578809c50bf625fdd6863dee64\" alt=\"\" /></p>\n<h3 id=\"什么是函数库\"><a class=\"anchor\" href=\"#什么是函数库\">#</a> 什么是函数库</h3>\n<p><strong>Linux 系统通常已提供一个可以进行身份验证的模块，称为 PAM，这个 PAM 提供的功能可以让很多程序在执行的时候，除了可以验证用户登录的信息外，还可以将身份确定的数据记录在登陆文件；函数库分为动态函数库与静态函数库</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/0c8baf2319fab57e47537bd8d977a428\" alt=\"\" /></p>\n<p><strong>Linux 的核心提供很多的核心相关函数库与外部参数，这些核心相关信息大多数放在 /usr/include、/lib、/usr/lib 中</strong></p>\n<h3 id=\"什么是make与configure\"><a class=\"anchor\" href=\"#什么是make与configure\">#</a> 什么是 make 与 configure</h3>\n<p><strong>使用类似 gcc 的编译器进行编译的过程中，除了每个主程序与子程序需要写上编译过程的命令外，还需要写上最终的连接程序。当代码比较复杂时，可以使用 make 命令的相关功能来简化编译过程的命令</strong></p>\n<h3 id=\"什么是tarball的套件\"><a class=\"anchor\" href=\"#什么是tarball的套件\">#</a> 什么是 Tarball 的套件</h3>\n<p>** 由于纯文本文件是很浪费硬盘空间的一种文件格式，如果想去下载一个核心文件，应该将这些源码通过文件的打包与压缩，将文件的数量与容量减小，而 Tarball 就是将套件的所有源码文件先以 tar 打包，然后再压缩，最常见的就是 gzip 来压缩。因为使用了 tar 与 gzip 的功能，tarball 文件一般的扩展名就会写成 *.tar.gz 或简单写为 *.tgz,Tarball 套件解压缩后，里面的文件通常会有: **</p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/5f6bf24ee2f22e7623e3f2039c1f58da\" alt=\"\" /></p>\n<h3 id=\"安装与升级套件\"><a class=\"anchor\" href=\"#安装与升级套件\">#</a> 安装与升级套件</h3>\n<p><strong>为什么升级 Tarball 的套件</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/631f861b701351e5d1b7499656257625\" alt=\"\" /></p>\n<p><strong>Tarball 的基本安装流程</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/484eff772d2793001edbf769862a0f86\" alt=\"\" /></p>\n<h2 id=\"一个简单的范例\"><a class=\"anchor\" href=\"#一个简单的范例\">#</a> 一个简单的范例</h2>\n<p><strong>生成动态库</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/5ad5d00416c34f36cac4e1855a17ec93\" alt=\"\" /></p>\n<p><strong>生成静态库</strong></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/ce764c52fe9415effdce33f1588a0240\" alt=\"\" /></p>\n<p><strong>完整调试</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/d7036f36abb406f3389c6a3151ea4621\" alt=\"\" /></p>\n<h3 id=\"显示hello-world\"><a class=\"anchor\" href=\"#显示hello-world\">#</a> 显示 Hello  World</h3>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/cff71a3d8f955f431d57fe91565b66a6\" alt=\"\" /></p>\n<p><strong>hello.c 就是源码，gcc 就是编译器，a.out 就是编译成功的可执行二进制文件</strong></p>\n<h3 id=\"编译子程序\"><a class=\"anchor\" href=\"#编译子程序\">#</a> 编译子程序</h3>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/108ff62589cb16cc8022fcf26578f6c6\" alt=\"\" /></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/fa8559dc949fe8523c975193f12a0324\" alt=\"\" /></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/8a334354ab6aaf8bbb7ccc1bbbbbd64c\" alt=\"\" /></p>\n<h3 id=\"加入函数库\"><a class=\"anchor\" href=\"#加入函数库\">#</a> 加入函数库</h3>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/a73137d77f326a2a2b1517a74069095c\" alt=\"\" /></p>\n<p><strong>直接编译，会显示错误消息，表示没有 sin 的相关定义参考值，这是因为再 C 语言里的 sin 函数是写在 libm.so 函数库中，而我们并没有源码里加入相关的说明，所以需要在编译与连接的时候，将这个函数库连接进执行文件</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/4894f5a06f2534e9c7e48b5346ee877c\" alt=\"\" /></p>\n<p><strong>由于 Linux 默认是将函数库放在 /lib 与 /usr/lib 中，所以不写 - L/lib 和 - L/usr/lib 也没有关系。不过，如果使用的函数库并非放在这两个目录下，那么 - L/path 就很重要，否则找不到函数库</strong></p>\n<h3 id=\"使用gcc\"><a class=\"anchor\" href=\"#使用gcc\">#</a> 使用 gcc</h3>\n<p><strong>gcc 为 Linux 最标准的编译器，gcc 是由 GNU 维护；下面为比较常见的参数：</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/67c4660bafcf81c9791e2a53844cf017\" alt=\"\" /></p>\n<h2 id=\"make的简单用法\"><a class=\"anchor\" href=\"#make的简单用法\">#</a> make 的简单用法</h2>\n<p><strong>make 可以简化编译过程执行的命令</strong></p>\n<h3 id=\"为社么要用make\"><a class=\"anchor\" href=\"#为社么要用make\">#</a> 为社么要用 make</h3>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/a6b8a1162bd17f19d26bbed4366362b3\" alt=\"\" /></p>\n<p><strong>仅写出 main 需要的目标文件，结果 make 会主动去判断每个目标文件相关的源码文件，并直接编译，最后再直接进行连接</strong></p>\n<p><strong>make 的好处：</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/b1f15eb05d0a4a10ed02e4321baf2fee\" alt=\"\" /></p>\n<h3 id=\"make的基本语法与变量\"><a class=\"anchor\" href=\"#make的基本语法与变量\">#</a> make 的基本语法与变量</h3>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/dbc38ca29dbb311c9423e61a336b73c6\" alt=\"\" /></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/7caddb4442ee504ae582aaa990b15c43\" alt=\"\" /></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/d27906e2d66ca47b77d98a1edb2e6be1\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/5b2f56123c9bdacae7764512dbcd5472\" alt=\"\" /></p>\n<h2 id=\"tarball的管理与建议\"><a class=\"anchor\" href=\"#tarball的管理与建议\">#</a> Tarball 的管理与建议</h2>\n<p><strong>知道了源码的相关信息之后，还需要了解如何使用具有源码的 Tarball 来建立属于自己的套件；Tarball 源码程序应该可以再大部分环境安装成功</strong></p>\n<h3 id=\"使用源码管理套件所需要的基础套件\"><a class=\"anchor\" href=\"#使用源码管理套件所需要的基础套件\">#</a> 使用源码管理套件所需要的基础套件</h3>\n<p><strong>创建一个二进制执行文件需要很多的文件，包括下面的基础套件：</strong></p>\n<ul>\n<li>\n<p>gcc 或 cc 等 C 语言编译器</p>\n</li>\n<li>\n<p>make 及 autoconfig 等套件</p>\n</li>\n<li>\n<p>需要核心提供的函数库文件以及相关的包含文件</p>\n</li>\n</ul>\n<p><strong>很多套件再开发时都直接取用系统核心提供的函数库与包含文件，这样才可以与操作系统兼容，尤其是驱动程序方面的套件，常常需要核心提供的相关信息</strong></p>\n<h3 id=\"tarball安装的基本步骤\"><a class=\"anchor\" href=\"#tarball安装的基本步骤\">#</a> Tarball 安装的基本步骤</h3>\n<p><strong>安装的基本操作步骤如下：</strong></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/37bbd6a848f1f5cc07bc5164ab1143a8\" alt=\"\" /><br />\n<img data-src=\"!%5B%5D(https://img04.sogoucdn.com/app/a/100520146/ccdb14a2538f6d3eb687ae1dd8a0c7f0)\" alt=\"\" /></p>\n<p><strong>上面只要有一个步骤无法成功，那么后续的步骤就完全没有办法进行</strong></p>\n<h3 id=\"tarball套件安装的注意事项如何删除-升级\"><a class=\"anchor\" href=\"#tarball套件安装的注意事项如何删除-升级\">#</a> Tarball 套件安装的注意事项（如何删除、升级）</h3>\n<p><strong>etc、lib、man、bin 等目录中，分别表示 “设置文件、函数库、执行文件、在线帮助文件”</strong></p>\n<p><img data-src=\"!%5B%5D(https://img02.sogoucdn.com/app/a/100520146/d52d04278b35893a9cee0c96a97910da)\" alt=\"\" /></p>\n<p><strong>单一套件的文件都在同一个目录之下，要删除该套件就简单多了。只要将该目录删除，即可视为该套件已被删除。</strong></p>\n<h3 id=\"简单的范例使用ntp\"><a class=\"anchor\" href=\"#简单的范例使用ntp\">#</a> 简单的范例：使用 ntp</h3>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/ecfe44c20135788e89aaef11ed7c69dc\" alt=\"\" /><br />\n<img data-src=\"https://img03.sogoucdn.com/app/a/100520146/e2f5c8fbbc40df511f6e1f4beeffacc9\" alt=\"\" /></p>\n<h3 id=\"使用patch更新源码\"><a class=\"anchor\" href=\"#使用patch更新源码\">#</a> 使用 patch 更新源码</h3>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/69a578ff16cd88f411128b70692c9fbd\" alt=\"\" /></p>\n<h2 id=\"函数库管理\"><a class=\"anchor\" href=\"#函数库管理\">#</a> 函数库管理</h2>\n<p><strong>很多套件之间都会互相采用彼此提供的函数库来运行特殊功能，函数库根据是否被编译到程序内部而分为动态与静态函数库</strong></p>\n<h3 id=\"动态与静态函数库\"><a class=\"anchor\" href=\"#动态与静态函数库\">#</a> 动态与静态函数库</h3>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/878480086d788786346d7b89cd2a2060\" alt=\"\" /></p>\n<p><strong>在 linux 版本中，比较倾向于使用动态函数库；如果使用太多的静态函数库，那么升级一个函数库时，都会对整个系统造成很大的冲击。如果其他相关的执行文件也要同时重新编译，动态函数库就有用得多，只要升级动态函数库，其他套件根本无须变动</strong></p>\n<p><strong>绝大多数的函数库都放在：</strong></p>\n<ul>\n<li>\n<p>/usr/lib</p>\n</li>\n<li>\n<p>/lib</p>\n</li>\n</ul>\n<h3 id=\"ldconfig与etcldsoconf\"><a class=\"anchor\" href=\"#ldconfig与etcldsoconf\">#</a> ldconfig 与 /etc/ld.so.conf</h3>\n<p><strong>将常用的动态函数库加载到内存中（高速缓存，cache），当软件套件要采用动态函数库时，就不需要重新从硬盘里读出，这样可以提高动态函数库的读取速度。这时候需要 idconfig 与 /etc/ld.so.conf 的帮助</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/5330f235be104a2d92053c1336144ee7\" alt=\"\" /></p>\n<h3 id=\"ldd\"><a class=\"anchor\" href=\"#ldd\">#</a> ldd</h3>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/9453bd441350f6ebf474af7875227b99\" alt=\"\" /></p>\n<h2 id=\"检测软件正确性md5sum\"><a class=\"anchor\" href=\"#检测软件正确性md5sum\">#</a> 检测软件正确性：md5sum</h2>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/1ee537fec32c9337453f328c7d468bc9\" alt=\"\" /><br />\n<img data-src=\"https://img03.sogoucdn.com/app/a/100520146/46f1ddb5e0e37f64d3c735a3d6a34be9\" alt=\"\" /></p>\n<p><strong>这几个文件容易被修改，因外很多木马程序在执行的时候，还是会执行 PID，为了不被 root 追查出来，所以会修改这些价差任务分配的文件。如果可以替这些文件建立指纹数据库（就是使用 md5sum 检查一次，将该文件指纹记录下来，然后以 shell 脚本的方式由程序自行来检查指纹表是否不同），那么文件系统就会比较安全</strong></p>\n<h2 id=\"重点回顾\"><a class=\"anchor\" href=\"#重点回顾\">#</a> 重点回顾</h2>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/93719747a52ced4bee42cff62103fd70\" alt=\"\" /></p>\n<h1 id=\"rpm与srpm套件管理程序\"><a class=\"anchor\" href=\"#rpm与srpm套件管理程序\">#</a> RPM 与 SRPM 套件管理程序</h1>\n<h2 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h2>\n<h3 id=\"什么是rpm与srpm\"><a class=\"anchor\" href=\"#什么是rpm与srpm\">#</a> 什么是 RPM 与 SRPM</h3>\n<p><strong>RPM 是以一种数据库记录的方式将所需的套件安装到 Linux 主机的一套管理程序。它最大的特点就是将要安装的套件先编译并打包，通过包装好的套件中默认的数据库记录，记录这个套件在安装的时候需要的依赖属性模块</strong></p>\n<h3 id=\"什么是i386-i586-i686-noarch\"><a class=\"anchor\" href=\"#什么是i386-i586-i686-noarch\">#</a> 什么是 i386、i586、i686、noarch</h3>\n<p><strong>RPM 与 SRPM 的格式分别为：</strong></p>\n<p>******.rpm     &lt;==RPM 的格式，已经经过编译包装完成的 rpm 文件</p>\n<p>******.src.rpm  &lt;==SRPM 的格式、包含未编译的源码信息</p>\n<p><strong>套件版本信息：</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsfcmqwexzj30m70ksq9m.jpg\" alt=\"\" /></p>\n<h3 id=\"rpm的优点\"><a class=\"anchor\" href=\"#rpm的优点\">#</a> RPM 的优点</h3>\n<p>RPM 的优点：</p>\n<ul>\n<li>\n<p>RPM 文件本身为已经编译过的二进制文件，可以让客户端的用户免除重新编译的麻烦</p>\n</li>\n<li>\n<p>RPM 文件在安装之前，RPM 会先检查系统的硬盘容量、操作系统版本等，避免文件安装错误</p>\n</li>\n<li>\n<p>RPM 文件本身提供套件版本信息、相关套件名称、套件用途说明、套件所含文件等信息，便于了解套件</p>\n</li>\n<li>\n<p>RPM 使用数据库记录 RPM 文件的相关参数，便于升级、删除、查询与验证</p>\n</li>\n</ul>\n<h3 id=\"解决rpm属性依赖问题\"><a class=\"anchor\" href=\"#解决rpm属性依赖问题\">#</a> 解决 RPM 属性依赖问题</h3>\n<p><strong>由于 RPM 类型的文件里含有属性相关的消息，如果我们通过分析这些消息，再让程序自行去寻找未安装的前驱套件，并事先安装，这样就解决了属性相关的问题。这就是当前 urpmi/apt/yum 等服务的由来。这些服务都是通过分析 RPM 文件的依赖信息，然后自行取得相关的套件并完成安装</strong></p>\n<h2 id=\"rpm套件管理程序\"><a class=\"anchor\" href=\"#rpm套件管理程序\">#</a> RPM 套件管理程序</h2>\n<h3 id=\"rpm的默认安装路径\"><a class=\"anchor\" href=\"#rpm的默认安装路径\">#</a> RPM 的默认安装路径</h3>\n<p><strong>RPM 类型的文件在安装的时候，会先去读取文件中记载的配置参数内容，然后将该数据用来比较 Linux 系统的环境。例如要安装 SSH，需先安装 OpenSSL，如果没有安装 OpenSSl 的话，SSH 就不能安装。这些都是 RPM 环境的要求，如果环境相符就给予安装，如果不符会显示出不符合的内容。等到安装完毕之后，rpm 就会将套件的信息写入 /var/lib/rpm 目录，以后在进行查询或预计要升级的时候，相关信息就会由 /var/lib/rpm 目录的内容数据来提供</strong></p>\n<p><strong>由于 RPM 有数据库来记录套件相关的信息，所以 RPM 类型的套件所拥有的文件都放在系统默认放置的目录下，如下：</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsfcn0qv3oj30l106i752.jpg\" alt=\"\" /></p>\n<h3 id=\"rpm安装\"><a class=\"anchor\" href=\"#rpm安装\">#</a> RPM 安装</h3>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsfcng57yrj30ls0dlwh5.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsfcnp3ot7j30km0j5q8g.jpg\" alt=\"\" /></p>\n<h3 id=\"rpm升级与更新\"><a class=\"anchor\" href=\"#rpm升级与更新\">#</a> RPM 升级与更新</h3>\n<p><strong>两种升级方式：</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsfcnp3ot7j30km0j5q8g.jpg\" alt=\"\" /></p>\n<h3 id=\"rpm查询\"><a class=\"anchor\" href=\"#rpm查询\">#</a> RPM 查询</h3>\n<p><strong>RPM 查询的地方是在 /var/lib/rpm 目录下的数据库文件，另外 RPM 也可以查询文件内的信息</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsfcoefb83j30jp0jwaf5.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsfcohg28hj30k4051q3v.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsfconz4sqj30ka0jwn25.jpg\" alt=\"\" /></p>\n<h3 id=\"rpm验证与数字签名\"><a class=\"anchor\" href=\"#rpm验证与数字签名\">#</a> RPM 验证与数字签名</h3>\n<p><strong>验证功能主要是向系统管理员提供一种有用的管理机制。其方式是使用 /var/lib/rpm 下面的数据库内容，来比较当前 Linux 系统环境的所有套件文件。当有数据丢失，或因为误删了某个套件的文件，或不小心修改了某个套件的文件内容，就用这种简单方法来验证原来的文件系统，以了解这到底是修改了那些文件数据</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsfcp1vlorj30l00bpgo2.jpg\" alt=\"\" /></p>\n<h3 id=\"rpm卸载与重建数据库\"><a class=\"anchor\" href=\"#rpm卸载与重建数据库\">#</a> RPM 卸载与重建数据库</h3>\n<p><strong>卸载就是将套件解除安装，卸载过程一定要自上而下。以 rp-pppoe 为例，这个套件主要根据 ppp 套件来安装，要卸载 ppp 的时候，就必须要先卸载 rp-pppoe，否则就会发生结构问题</strong></p>\n<p><strong>由于我们一直修改一些文件内容，导致系统数据库有点乱，这时候可以使用 - rebuilddb 来重建 rpm 的数据库</strong></p>\n<p><strong>两种方法如下：</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsfcpaouisj30kb01yt8t.jpg\" alt=\"\" /></p>\n<h1 id=\"认识与分析登录文件\"><a class=\"anchor\" href=\"#认识与分析登录文件\">#</a> 认识与分析登录文件</h1>\n<h2 id=\"什么是登录文件\"><a class=\"anchor\" href=\"#什么是登录文件\">#</a> 什么是登录文件</h2>\n<p><strong>详细而准确地记录或备份系统的登录文件，就是记录系统活动记录的文件。Linux 主机在后台有相当多的守护程序在进行，这些程序总会有一些显示信息，这些信息就记录在登录文件中</strong></p>\n<p><strong>登录文件的重要功能：</strong></p>\n<ul>\n<li>\n<p>解决系统故障</p>\n</li>\n<li>\n<p>解决网络服务问题</p>\n</li>\n<li>\n<p>记录登录信息</p>\n</li>\n</ul>\n<p><strong>常见的登录文件：</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsfg2g9agxj30ka06s40w.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsfg2nvrfzj30ko02fgmb.jpg\" alt=\"\" /></p>\n<h2 id=\"登录文件的记录syslogd\"><a class=\"anchor\" href=\"#登录文件的记录syslogd\">#</a> 登录文件的记录：syslogd</h2>\n<p><strong>Linux 开机启动，检查 syslogd 是否启动命令：</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsfg2uecjaj30kk04xdgr.jpg\" alt=\"\" /></p>\n<h3 id=\"登录文件内容的一般格式\"><a class=\"anchor\" href=\"#登录文件内容的一般格式\">#</a> 登录文件内容的一般格式</h3>\n<p><strong>sysylog 记录下来的数据主要有：</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsfg31pzf7j30k102fdg8.jpg\" alt=\"\" /></p>\n<p><strong>查看 /var/log/secure 内容</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsfg3ammonj30lw0d00vr.jpg\" alt=\"\" /></p>\n<h3 id=\"登录文件的配置文件etcsyslogconf\"><a class=\"anchor\" href=\"#登录文件的配置文件etcsyslogconf\">#</a> 登录文件的配置文件：/etc/syslog.conf</h3>\n<p><strong>syslogd 可以负责记录主机产生的所有信息，而这些信息本身是有严重等级之分的</strong></p>\n<p>/etc/syslog.conf 的语法如下：</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsfg3konp8j30kb0bowgy.jpg\" alt=\"\" /></p>\n<p><strong>为了让不同的信息放到不同文件中，以便分门别类地进行登录文件的管理，将各种类别的服务登录文件记录在不同的文件里，就是 /etc/syslog.conf 所要做的工作</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsfg44y8rvj30ma0ewdmb.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsfg4kzx9ej30lw06idhi.jpg\" alt=\"\" /></p>\n<p><strong>设置 syslogd 的案例：</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gsfg4rrpjmj30im07djtd.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsfg52iycij30il0b8wha.jpg\" alt=\"\" /></p>\n<p><strong>/etc/syslog.conf 文件的默认内容</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsfg5e281rj30k70imjvp.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsfg5k0edbj30k701w74a.jpg\" alt=\"\" /></p>\n<p><strong>将所有信息都额外写入到 /var/log/admin.log</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsfg5u1a46j30ku0ccjsm.jpg\" alt=\"\" /></p>\n<h3 id=\"登录文件的安全性设置\"><a class=\"anchor\" href=\"#登录文件的安全性设置\">#</a> 登录文件的安全性设置</h3>\n<p><strong>1. 我们通过隐藏的属性来设置登录文件，使之只可以增加数据，但不能被删除，或许可以达到保护的作用；2. 设置基本的隐藏属性，就是在 Linux 文件属性提过的 lsattr 与 chattr。如果将一个文件以 chattr 设置 i 属性，那么，该文件连 root 都不能删掉，而且也不能新增数据，真安全，但是，如此一来登陆文件的功能也就消失了，因为没有办法写入；如果我们使用 a 属性，登录文件如果设置了这个属性，那么它将只能增加，而不能删除，这项非常符合登录文件的需求。</strong></p>\n<p><strong>设置与删除 --- 文件从此就只能增加，而不能删除，只有 root 能执行删除 - a 命令</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsfg61yueij30ki02c74e.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsfg7aqtiyj30km01cdfp.jpg\" alt=\"\" /></p>\n<h3 id=\"登录文件主机的简单设置\"><a class=\"anchor\" href=\"#登录文件主机的简单设置\">#</a> 登录文件主机的简单设置</h3>\n<p><strong>如何实现让一台主机成为登录文件主机，用它记录所有 10 台 Linux 主机的信息</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gsfg7nzducj30lg0c80vf.jpg\" alt=\"\" /></p>\n<p><strong>通过这个操作，Linux 主机可以接受来自其他主机的登录信息</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gsfg7i4q09j30ld04r0u0.jpg\" alt=\"\" /></p>\n<h1 id=\"linux备份策略\"><a class=\"anchor\" href=\"#linux备份策略\">#</a> Linux 备份策略</h1>\n<h2 id=\"谁需要备份数据\"><a class=\"anchor\" href=\"#谁需要备份数据\">#</a> 谁需要备份数据</h2>\n<p><strong>备份时应考虑的因素有：</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsgguuztrnj30kj04kdhb.jpg\" alt=\"\" /></p>\n<h2 id=\"备份哪些linux数据\"><a class=\"anchor\" href=\"#备份哪些linux数据\">#</a> 备份哪些 Linux 数据</h2>\n<ul>\n<li>主机系统需要备份的文件</li>\n</ul>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsggvephg6j30j1042q38.jpg\" alt=\"\" /></p>\n<ul>\n<li>网络服务的数据库方面</li>\n</ul>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsggvn8ei7j30j303s74z.jpg\" alt=\"\" /></p>\n<ul>\n<li>推荐备份的目录</li>\n</ul>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsggvuu71dj30j403q3yp.jpg\" alt=\"\" /></p>\n<ul>\n<li>不需要备份的目录</li>\n</ul>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsggw38w76j30j203lmxo.jpg\" alt=\"\" /></p>\n<h2 id=\"选择备份设备\"><a class=\"anchor\" href=\"#选择备份设备\">#</a> 选择备份设备</h2>\n<p><strong>由于主机被盗，所有的数据将会丢失，会造成严重的后果，远程备份系统就显得尤为重要，远程备份，就是将系统数据备份到其他地方，通常使用 Tap、Zip、CD-RW、CD-RW 以及备份用抽取式硬盘与携带式硬盘等。注意事项如下：</strong></p>\n<ul>\n<li>\n<p>速度要求：在 Linux 主机上备份也很消耗系统资源，需要将系统数据复制到其他设备</p>\n</li>\n<li>\n<p>存储容量：抽取式硬盘需要将系统冷启动，而系统内的硬盘不安全，携带式硬盘不容易保存，所以大容量的 Tape 颇具优势，携带方便，存放容易</p>\n</li>\n<li>\n<p>经费与数据可靠性</p>\n</li>\n</ul>\n<p><strong>常见的设备号：</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gsggwdcnzsj30jx03r0tg.jpg\" alt=\"\" /></p>\n<h2 id=\"备份的种类\"><a class=\"anchor\" href=\"#备份的种类\">#</a> 备份的种类</h2>\n<ul>\n<li>\n<p>完全备份：就是将根目录 / 里的所有数据都备份下来；刚刚完成的系统应当先做备份。可以对系统进行最干净的还原。有时候系统被入侵，但 root 并不知道，这时候拿最近的备份数据来还原是没用的，因为连同被怪客修改过的文件也被我们备份下来了。所以，将最原始系统的数据备份下来很重要</p>\n</li>\n<li>\n<p>部分备份：部分备份只备份最重要的数据。系统出问题时，只要重新安装即可，只要妥善备份中重点数据，还原系统就可以很快。只需备份账号、服务设置、原来系统的数据库等就可以</p>\n</li>\n</ul>\n<h2 id=\"选择备份工具\"><a class=\"anchor\" href=\"#选择备份工具\">#</a> 选择备份工具</h2>\n<p>1. 完整备份的工具</p>\n<p><strong>一般用 cpio 进行完整备份是很好的选择，注意的是配合 find 才可以正常操作。另外，使用 cpio 时需要配合另一个完全用来备份的硬盘或磁带机</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsgh1ihh7sj30k4071ab8.jpg\" alt=\"\" /></p>\n<p>2. 部分备份的基础工具</p>\n<p><strong>想将每天的数据都保存为不同的文件，通过日期分辨文件的新旧，可以这样做：</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsggwqbsekj30jj035mxq.jpg\" alt=\"\" /></p>\n<p><strong>这样就能将 mysql 的数据库压缩备份至 mysql.2005-10-25.tgz 文件中，并且日期会每天都不一样</strong></p>\n<h2 id=\"备份策略实例\"><a class=\"anchor\" href=\"#备份策略实例\">#</a> 备份策略实例</h2>\n<p><strong>编写两个简单的脚本，分别存储自己的数据，其备份策略是：</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gsgh2rhml2j30jf040gmp.jpg\" alt=\"\" /></p>\n<h3 id=\"日常备份行为\"><a class=\"anchor\" href=\"#日常备份行为\">#</a> 日常备份行为</h3>\n<p><strong>（1）先将所有数据都放到 /disk2/backup 中；（2）进行压缩打包，并且传送到内部的 192.168.1.199 主机上</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsggx2rzmyj30ju0gpado.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gsggxiviidj30k60i2tbq.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsgh3zp1kqj30l70czjtj.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsgh4hrpisj30kd0gxdij.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gsgh6cfx1qj30l10dbq54.jpg\" alt=\"\" /></p>\n<h3 id=\"每日备份数据脚本\"><a class=\"anchor\" href=\"#每日备份数据脚本\">#</a> 每日备份数据脚本</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsgjhl7snfj30k40jc0wb.jpg\" alt=\"\" /></p>\n<p><strong>每天 MYSQL 数据库就可以自动记录在 /disk2/backup/daily 中，而且文件名会自动改变。随后就是使用 /etc/crontab 开始让系统自己运行。相关设置如下：</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsgjhnzqi4j30kd03bjrt.jpg\" alt=\"\" /></p>\n<p><strong>系统会自动在每天的 2：30 进行 MySQL 备份，而在每个星期日的 3：30 进行重要文件的备份，还要将 /disk2 中的数据复制出来</strong></p>\n<h3 id=\"远程备份系统\"><a class=\"anchor\" href=\"#远程备份系统\">#</a> 远程备份系统</h3>\n<p><strong>远程备份最简单的 FTP 就可以远程备份</strong></p>\n<p><strong>下面为简单的 FTP 脚本可以实现自动文件上传：</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gsgjhs7qdxj30jm0l2wi7.jpg\" alt=\"\" /></p>\n<p><strong>不想用 FTP 而想使用其他方式的话，或许可以用 man    rsync 命令来实现</strong></p>\n<h2 id=\"还原系统的考虑因素\"><a class=\"anchor\" href=\"#还原系统的考虑因素\">#</a> 还原系统的考虑因素</h2>\n<h3 id=\"还原系统的考虑因素-2\"><a class=\"anchor\" href=\"#还原系统的考虑因素-2\">#</a> 还原系统的考虑因素</h3>\n<p>备份与还原的考虑因素：</p>\n<ul>\n<li>\n<p>主机需要在很短的时间内立刻还原上线</p>\n</li>\n<li>\n<p>主机希望能够在查询到问题的原因后才正式上线</p>\n</li>\n<li>\n<p>关于存储架构的考虑</p>\n</li>\n</ul>\n<h2 id=\"更新显卡驱动程序的范例nvidia驱动程序\"><a class=\"anchor\" href=\"#更新显卡驱动程序的范例nvidia驱动程序\">#</a> 更新显卡驱动程序的范例：NVidia 驱动程序</h2>\n<p>1. 下载驱动程序</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsgk60u87ej30ka00ya9x.jpg\" alt=\"\" /></p>\n<p><strong>在该网站中，还会有很多信息，里面会介绍如何正确地安装软件，并提供了排错解决方案</strong></p>\n<p>2. 安装模块</p>\n<p>安装过程直接执行该下载文件即可。下载的文件名称应该是：NVIDIA-Linux-x86-pkgl.run。这是一个含有源码的 shell 脚本，既然是 shell 脚本，直接安装即可。</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsgk62yuamj30k802waaq.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsgk64rm26j30la074dhp.jpg\" alt=\"\" /></p>\n<p>3. 修改主要设置文件内容</p>\n<p>接下来就是让 X 服务器去直接读取刚才安装的模块，所以，修改一下 xorg.conf</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gsgk66pc0ej30l30cygmx.jpg\" alt=\"\" /></p>\n<h1 id=\"linux硬件检测与维护\"><a class=\"anchor\" href=\"#linux硬件检测与维护\">#</a> Linux 硬件检测与维护</h1>\n<h2 id=\"准备硬件\"><a class=\"anchor\" href=\"#准备硬件\">#</a> 准备硬件</h2>\n<p><strong>目的在于更深入了解 Linux 主机的硬件，汇总硬件信息，并进行一些检测与控制，所以我们要先准备号 Linux 主机的硬件，了解其硬件配置</strong></p>\n<h3 id=\"硬件信息的收集lspci-iostat\"><a class=\"anchor\" href=\"#硬件信息的收集lspci-iostat\">#</a> 硬件信息的收集：lspci、iostat...</h3>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gsglsxyj97j30k803agmg.jpg\" alt=\"\" /></p>\n<p>1.lspci</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsglt0zxqej30lv0g6ju6.jpg\" alt=\"\" /></p>\n<p>2.iostat</p>\n<p><strong>检测硬盘从启动到现在已经存取了多少数据</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsglt3d0vnj30jn0k9n1k.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsglt54ew4j30jj01yaaj.jpg\" alt=\"\" /></p>\n<p><strong>通过 lspci 与 iostat，可以简单了解当前系统的状态，以及当前的主机硬件数据</strong></p>\n<h3 id=\"驱动usb设备\"><a class=\"anchor\" href=\"#驱动usb设备\">#</a> 驱动 USB 设备</h3>\n<p>1.USB 的芯片版本</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsglt700upj30kp035wfj.jpg\" alt=\"\" /></p>\n<p><strong>如果使用 lsmod 时发现 HCI 之类的模块，就表示 Linux 主机已经加载 USB 的驱动程序。如果 USB 设备比较多，那么可能还需要加载 USB HID 模块才行</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsglt97irtj30l70bpabt.jpg\" alt=\"\" /></p>\n<p>2. 启动 USB 打印机</p>\n<p><strong>先加载 USB 模块，建立 USB 打印机的设备代号，需要使用 mkmod 命令，以及 USB 打印机设备的主次，建立方法为：</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsgltbnh7rj30kd04kdgk.jpg\" alt=\"\" /></p>\n<p><strong>其实除了早期的版本，较新版本已经帮我们建立好 /dev/usb/lp0 等文件设备</strong></p>\n<h3 id=\"使用lm_sensors取得温度-电压等信息\"><a class=\"anchor\" href=\"#使用lm_sensors取得温度-电压等信息\">#</a> 使用 lm_sensors 取得温度、电压等信息</h3>\n<p><strong>超频就是增加系统原有的运算频率，让 CPU、PCI、AGI 前端总线速度提升到非正规的频率，已取得较高的计算机性能；个大主要的主机板与芯片集，主机内都会有温度、压力的检测器，我们可以在主机板操作手册或在 BIOS 内的 Monitor 项中找到相关的温度、压力数据。在 Windows 系统中，广商推出相关的软件来检测，在 Linux 中是 lm_sensors 套件。</strong></p>\n<p><strong>lm_sensors 提供不错的主机板芯片集检测程序，就是 sensors-detect 命令。检测到主机板芯片集后，将该信息写入设置文件中，就可以使用 sensors 命令直接读取但其那 CPU、机壳、电源、风扇等信息</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gshet9tcw3j30l10n3q7q.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gshetiwkiej30lt0b8wfx.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gshettvedcj30jh0mk43y.jpg\" alt=\"\" /></p>\n<p><strong>VIA694D 是适合双 CPU 的主机板，但 lm_sensors 假定仅有单 CPU 的显示状况，所以，显示的结果与实际数据有差异。此时或许就需要进行调整，调整步骤如下：</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gshextdfrhj30ke0nlq7h.jpg\" alt=\"\" /></p>\n<h2 id=\"pc4的系统操作setup功能\"><a class=\"anchor\" href=\"#pc4的系统操作setup功能\">#</a> PC4 的系统操作：setup 功能</h2>\n<p><strong>整个启动流程看 /etc/inittab 的规定项目，每个服务启动的脚本放在 /etc/init.d/scriptname 里，但启动设置文件则可能会包含在 /etc/sysconfig 内。lm_sensors 模块就放在 /etc/sysconfig/lm_sensors 中</strong></p>\n<p><strong>Red Hat 系统提供了工具，套件名称为 setuptool，直接执行 setup 就能处理整个执行过程。直接使用命令或 vi 可以实现 setup 所提供的功能。以 root 身份执行 setup 后，会出现如下所示界面</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gshez5lz8yj30kd0ip48a.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gshezk19fgj30kf0ggdmn.jpg\" alt=\"\" /></p>\n<h2 id=\"特殊文件系统lvm\"><a class=\"anchor\" href=\"#特殊文件系统lvm\">#</a> 特殊文件系统：LVM</h2>\n<p><strong>LVM 可以将多个物理分区整合在一起，让这些分区看起来就像是一个磁盘一样，还可以新增其他物理分区到 LVM 管理的磁盘中</strong></p>\n<h3 id=\"什么是lvmpv-pe-vg-lv\"><a class=\"anchor\" href=\"#什么是lvmpv-pe-vg-lv\">#</a> 什么是 LVM：PV、PE、VG、、LV</h3>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gshezxfyqyj30li0ipadd.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gshf05gq50j30l105idj3.jpg\" alt=\"\" /></p>\n<h3 id=\"制作lvm磁盘的流程\"><a class=\"anchor\" href=\"#制作lvm磁盘的流程\">#</a> 制作 LVM 磁盘的流程</h3>\n<p><strong>环境是 PC4，有一个 30G 的硬盘放在 /etc/hdb 中，这个硬盘已经分割成为三个分区。分别为 /dev/hdb1、/dev/hdb2、/dev/hdb3, 大约各有 10G 左右</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gshf0um51mj30m00egk0b.jpg\" alt=\"\" /></p>\n<p>1. 建立 PV 与 PV 的查询</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gshf1fado6j30k30kpdsd.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gshf1rzdlaj30k60agq8j.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gshf2648haj30ku04ogo5.jpg\" alt=\"\" /></p>\n<p>2. 开始建立 VG</p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/31bfd0897fe34b7d01e5b3c71824cd1a\" alt=\"\" />)</p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/af6f53074f4b6dd33f393b02e86626d8\" alt=\"\" /></p>\n<p>3、建立 LV</p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/0ab8fd6c6a0d5722b2751092f4efa741\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/ba0d980bc70d6358a61758779ccea074\" alt=\"\" /></p>\n<p>4. 分区的格式化与载入</p>\n<p><img data-src=\"!%5B%5D(https://img03.sogoucdn.com/app/a/100520146/08ba11808865530de1162e0e6578b684)\" alt=\"\" /></p>\n<h3 id=\"加大原有的lvm磁盘resize2fs\"><a class=\"anchor\" href=\"#加大原有的lvm磁盘resize2fs\">#</a> 加大原有的 LVM 磁盘：resize2fs</h3>\n<p><strong>将一个崭新的 /dev/hdb3 的物理分区加入到 vbirdvg 中，步骤如下：</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/2df33936988a54882e74cd14c26eb129\" alt=\"\" /><br />\n<img data-src=\"https://img03.sogoucdn.com/app/a/100520146/3c61fe1f0ae43ed46a1e686e6d4fef77\" alt=\"\" /></p>\n<p><strong>LV 增加，但 /dev/vbirdvg/vbirdlv 却没有加大；这是因为最初规划时 ext3 主要信息已经写入超级快，同时 inode 与块数量又是固定的，所以这个容量大小当然不会有变化。我们可以使用 ext2、ext3 的工具程序来处理。</strong></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/d32664952a68d0e9b7395f53b284d7ca\" alt=\"\" /></p>\n<h3 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h3>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/779fd7ce1bac9103e11a053a8cf18700\" alt=\"\" />1</p>\n<p><strong>删除 LVM</strong></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/ea8d1dfad91b357384a041b79ab8663b\" alt=\"\" /></p>\n<h2 id=\"额外的存储设备iscsi协议的磁盘阵列\"><a class=\"anchor\" href=\"#额外的存储设备iscsi协议的磁盘阵列\">#</a> 额外的存储设备 iSCSI 协议的磁盘阵列</h2>\n<p><strong>SAN（Storage Area Networks，存储区网络）与 NAS（Network Attached Storage，网络连接存储），NAS 主要使用一台主机专门存储数据，以现有的 TCP/IP 协议来提供类似文件服务器的用途，可以直接放在网络上，供用户访问数据。SAN 则类似一台存储设备，通过光纤信道供某几台主机进行数据访问。它们的储存硬盘通常是以磁盘阵列 RAID 作为基础</strong></p>\n<h3 id=\"什么是磁盘阵列\"><a class=\"anchor\" href=\"#什么是磁盘阵列\">#</a> 什么是磁盘阵列</h3>\n<p><strong>磁盘阵列全名是 Redundant Arrays of Inexpensive Disks, 简写为 RAID，是通过软件或硬件技术，将多个较小的磁盘整合成为较大的磁盘设备，而这个磁盘功能不止存储，还有数据保护的功能</strong></p>\n<p><strong>RAID 常见的等级如下：</strong></p>\n<ul>\n<li>\n<p>Linear Mode（线性模式）：两个以上的磁盘整合成一个物理存储设备；将一个一个填满后，才将数据继续写到写一个磁盘上；由于数据是一个一个写入到不同的硬盘中没并不会增加整个擦皮纳的读取性能；由于数据具有连续新，因此，若不小心有任何一个磁盘损坏时，您的数据就无可免回了；</p>\n</li>\n<li>\n<p>RAID-0（交错模式）：主要时利用容量相同的磁盘来实现，性能会比较好；交错表示文件数据时同步放到不同的磁盘上；</p>\n</li>\n<li>\n<p>RAID-1（镜像模式）：这也是相同磁盘容量；这种模式这要是让同一份数据，完整地保存在两个磁盘上；这种模式最大的优点就是能进行备份，任何一个磁盘损坏，所有数据还都保存完好</p>\n</li>\n<li>\n<p>RAID-5：整合多个磁盘（通常需要 3 个以上），然后每个磁盘驱动器上都会记录少许其他磁盘驱动器的信息</p>\n</li>\n</ul>\n<h1 id=\"linux核心编译与管理\"><a class=\"anchor\" href=\"#linux核心编译与管理\">#</a> Linux 核心编译与管理</h1>\n<p>1. 核心</p>\n<p><strong>核心是整个操作系统的最底层，负责全部硬件的驱动，并提供各种核心工具及，包括防火墙机制、是否支持 LVM 或 Quota 等文件系统。因此，在启动过程中，除了 MBR 之外，第一个读取系统内存中的就是核心文件。</strong></p>\n<p><strong>不论您如何卖力地设置该网络套件，核心不支持，也是没法工作的</strong></p>\n<p><strong>核心读入主存储器的时机：</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gshr1sk49hj30kq04cdgl.jpg\" alt=\"\" /></p>\n<p>2. 核心模块</p>\n<p><strong>核心模块包含了硬件检测与驱动模块；Linux 将一些不常用的类似驱动程序的东西独立出核心，编译成模块，然后，核心可以在运行过程中加载这个模块，让核心支持它，这样可在不需更改核心的前提之下，只要编译出适当的驱动模块，并加载它，Linux 就可以使用这个硬件。</strong><br />\n模块放在 /lib/modules/'uname  -r'/</p>\n<p>3. 核心编译</p>\n<p><strong>核心其实是一个文件，文件是通过源码编译而成的。因为核心是直接读入到主存储器中，所以要将它编译成系统可识别的数据；所以我们必须取得核心的源码，然后利用源码与编译方式来编译核心</strong></p>\n<p>4. 驱动程序与核心的问题</p>\n<p><strong>Linux 的核心相当灵活，它支持模块化的，只要新硬件推出搭配核心的驱动模块（驱动程序），我们就可将该模块挂载到核心上，核心就可以支持该硬件</strong></p>\n<h3 id=\"更新核心的原因\"><a class=\"anchor\" href=\"#更新核心的原因\">#</a> 更新核心的原因</h3>\n<ul>\n<li>\n<p>新功能的需求</p>\n</li>\n<li>\n<p>原核心太过庞大</p>\n</li>\n<li>\n<p>与硬件搭配的稳定性</p>\n</li>\n<li>\n<p>由于特殊的环境需求，就需要自行设计核心</p>\n</li>\n</ul>\n<h3 id=\"核心的版本与下载最新核心的位置\"><a class=\"anchor\" href=\"#核心的版本与下载最新核心的位置\">#</a> 核心的版本与下载最新核心的位置</h3>\n<p>1. 核心的版本</p>\n<p><strong>由于不同的核心版本之间使用的函数库并不相同，所以必须知道自己的 Linxu 核心版本之后，才能采用最新支持的核心版本来编译新的核心</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gshr2g2764j30kg025wei.jpg\" alt=\"\" /></p>\n<p>核心版本分为：</p>\n<p>【主版本】.【次版本】.【发布版本（release）】-【修改版本】</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gshr2t0srlj30kc032q3o.jpg\" alt=\"\" /></p>\n<p>核心下载地址：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5rZXJuZWwub3Jn\">http://www.kernel.org</span></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gshr394t4hj30iq06ogmp.jpg\" alt=\"\" /></p>\n<p>2. 核心的下载地点</p>\n<p><strong>Linux 的核心当前是由其发明者 Linus Torvalds 所属团队负责维护的，其网站在下面的网址上，在该网站可以找到最新的核心信息。</strong></p>\n<h2 id=\"核心源码的获取与升级\"><a class=\"anchor\" href=\"#核心源码的获取与升级\">#</a> 核心源码的获取与升级</h2>\n<h3 id=\"获取原版本提供的核心源码\"><a class=\"anchor\" href=\"#获取原版本提供的核心源码\">#</a> 获取原版本提供的核心源码</h3>\n<p><strong>如果已安装工具程序的话，那么就可以利用 rpm 找到名为 kernel-devel 的套件，那就是核心源码</strong></p>\n<h3 id=\"获取最新的核心\"><a class=\"anchor\" href=\"#获取最新的核心\">#</a> 获取最新的核心</h3>\n<p><strong>使用源码来重新编译核心比较方便，但使得硬件所需要的新驱动程序无法通过原来的核心源码编译，所以如果要更新驱动程序，就是用最新的核心</strong></p>\n<h3 id=\"保留原设置利用补丁升级核心源码\"><a class=\"anchor\" href=\"#保留原设置利用补丁升级核心源码\">#</a> 保留原设置：利用补丁升级核心源码</h3>\n<p><strong>如果自行以最新的核心版本来编译过核心，那么系统就应该存在几个版本的核心源码，以及上次自行编译的参数设置值；核心发布，除了发布完整的核心压缩文件之外，也会发布该版本与前一版本的差异性补丁文件，每个核心的补丁仅针对前一版的核心，想要由 2.6.10 升级到 2.6.14，就要下载 2.6.11、2.6.12、2.6.13 及 2.6.14 的补丁文件，然后依次进行打补丁，才能升级到 2.6.14；打完补丁之后，可以直接检查原设置值，如果没有问题，就可以直接编译，而不需要重新选择核心的参数值</strong></p>\n<h3 id=\"核心目录下的子目录信息\"><a class=\"anchor\" href=\"#核心目录下的子目录信息\">#</a> 核心目录下的子目录信息</h3>\n<p>核心的源码默认放在 /usr/src/kernels/2.6.11-1.1269_FC4-i686 目录下：有几个目录</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gshr3hshavj30kh04e74s.jpg\" alt=\"\" /></p>\n<p><strong>可以解压缩最新的核心文件之后，会有个 Documentation 目录，可以进去查看各个相关的说明</strong></p>\n<h2 id=\"设置核心的编译设置makefile\"><a class=\"anchor\" href=\"#设置核心的编译设置makefile\">#</a> 设置核心的编译设置（Makefile）</h2>\n<p><strong>核心提供很多工具来让我们简单地设置参数</strong></p>\n<h3 id=\"编辑核心的生成文件\"><a class=\"anchor\" href=\"#编辑核心的生成文件\">#</a> 编辑核心的生成文件</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gshr3wdx1ej30jd06d3z8.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gshr4d8cd6j30l303tjsh.jpg\" alt=\"\" /></p>\n<p><strong>如何去建立生成文件，我们可以通过核心提供的功能，即用 make menuconfig 来实现</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gshr4q0xrmj30kh035gm9.jpg\" alt=\"\" /></p>\n<p><strong>利用 make  menuconfig 来做类似图形界面的菜单模式，可以随时进行参数的选择，方便又好用。只要在 /usr/src/linux-2.6.14.2 目录下，输入 make  menuconfig 就可以出现图形菜单模式</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gshr53qre7j30ml0lh0vd.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gshr5dum74j30la054js5.jpg\" alt=\"\" /></p>\n<h3 id=\"设置核心内容与模式\"><a class=\"anchor\" href=\"#设置核心内容与模式\">#</a> 设置核心内容与模式</h3>\n<p>1.Code Maturity Level Options（核心的代码开发维护）</p>\n<p><strong>用于确定核心是否要支持一些尚未测试的完整功能</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gshr5q0eftj30jz01sglm.jpg\" alt=\"\" /></p>\n<p>2.General Setup （常规设置）</p>\n<p><strong>这个项目是关于核心的一般设置，包括核心的附加版本信息</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gshr6bj96lj30ku0j0zm9.jpg\" alt=\"\" /></p>\n<p><strong>这个主要针对核心与程序之间的相关性，基本上保留默认值即可</strong></p>\n<p>3.Loadable Module Support（可加载模块支持）</p>\n<p><strong>它涉及是否支持模块加载</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gshr916u6yj30kw02caa5.jpg\" alt=\"\" /></p>\n<p>4.Processor Type and Features（处理器类型和特征）</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gshr9qvn7kj30l5092my3.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gshraaofh4j30kr0f8q4n.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gshratl504j30kr0fwgns.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gshrbf98hlj30kz0a7wfz.jpg\" alt=\"\" /></p>\n<p>5.Power Management Options（ACPI、APM）（电源管理选项）</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gshrbukw31j30l20oddjf.jpg\" alt=\"\" /></p>\n<p>6.Bus Options(PCI、PCMCIA、EISA、MCA、ISA)</p>\n<p><strong>这个项目与总线有关。分为最常见的 PCI 以及笔记本电脑常见的 PCMCIA 插卡</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gshrk3xarfj30ks0irjtu.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gshrc72monj30kh0i476g.jpg\" alt=\"\" /></p>\n<p><strong>PCI 插槽是最重要的，因为所有的适配卡都是插在 PCI 插槽上</strong></p>\n<p>7.Executable File Formats（可执行文件格式）</p>\n<p><strong>是给 Linux 核心运行执行文件使用的数据，除了第一项必须要编译成核心功能之外，其他两项可以编译成模块</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gshrcow9a4j30kd022gln.jpg\" alt=\"\" /></p>\n<p>8.Networking</p>\n<p><strong>包含了与防火墙相关的项目，即防火墙 iptables</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gshrdhsdv7j30jv043mxf.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gshrdrmz2zj30iv0msq5n.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gshre0jie5j30j709eab0.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gshrebp7bzj30jh0lntb1.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gshreof68lj30m40ajt9n.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gshrezkgbij30lt0kb40u.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gshrfbmqvjj30kl067mxt.jpg\" alt=\"\" /></p>\n<p>9.Device Drivers（设备驱动程序）</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gshrfmkan0j30lc0l1act.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gshrghgkccj30lf09hq3x.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gshrms9eu7j30ms0iddic.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gshrn5f1n2j30lw0dugnb.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsimxw71ooj30m20fgtag.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsimy8l0m6j30lz0h0wgk.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsimyi5zivj30m60jujti.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsimypfg3vj30lh0cmmyn.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gsimyyw9idj30lo0e10u7.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsimzbpo1fj30ko0hhwgn.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsimzosqi8j30km0jydi4.jpg\" alt=\"\" /></p>\n<p>10.File  Systems（文件系统）</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsir8i3n7ij30kb05fgm1.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsir8t20fvj30jy0bf3zo.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsir910iupj30k60jpgo3.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsir9882y9j30m10h6go0.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gsir9e4veaj30jt05bjrp.jpg\" alt=\"\" /></p>\n<p><strong>因为涉及核心是否能支持某些文件系统，以及某些操作系统支持的分区表项目</strong></p>\n<p>11.Security Options（安全选项）</p>\n<p><strong>这是一部与安全性有关，保留默认值即可</strong></p>\n<p>12.Cryptographic Options（加密选项）</p>\n<p><strong>这一部分是加密参数的设置。通过我们采用的账号密码登录，使用的就是 MD5 加密机制，要让核心支持，将所有项目都做成模块即可。不过 MD5 与 SHA1 必须要直接由核心支持</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsir9t250mj30mn0eb75t.jpg\" alt=\"\" /></p>\n<p>13. 采用旧数据与存储设置</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsirbbaqipj30kl01ut8o.jpg\" alt=\"\" /></p>\n<p><strong>这两项分别存储刚才做好的所有项目的设置数据</strong></p>\n<h2 id=\"核心的编译与安装\"><a class=\"anchor\" href=\"#核心的编译与安装\">#</a> 核心的编译与安装</h2>\n<h3 id=\"编译的流程\"><a class=\"anchor\" href=\"#编译的流程\">#</a> 编译的流程</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsivkt1snmj30ki05ygm4.jpg\" alt=\"\" /></p>\n<p><strong>只需要 3 个操作，核心与模块就都创建出来了。数据放在 /usr/src/linux-2.6.14.2 目录下。并没有放在系统的相关路径中；注意执行了 make bzlmage 后，最后结果如下：</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsivl8hun5j30k904aq39.jpg\" alt=\"\" /></p>\n<h3 id=\"模块安装注意事项\"><a class=\"anchor\" href=\"#模块安装注意事项\">#</a> 模块安装注意事项</h3>\n<p><strong>如果同一个版本的核心被编译两次以上的话，那么请将 /lib/modules 里面的该版核心先移开</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsivm4cjafj30lx06fwfd.jpg\" alt=\"\" /></p>\n<h3 id=\"安装旧版与新版的核心成多重启动系统\"><a class=\"anchor\" href=\"#安装旧版与新版的核心成多重启动系统\">#</a> 安装旧版与新版的核心成多重启动系统</h3>\n<p><strong>我们知道核心文件放在 /usr/src/linux-2.6.14.2/arch/i3486/boot/bzlmage 中，也知道一台主机是可以做成多重启动系统的。在编译好核心之后，将同时保留旧版的核心，并且在主机上新增新版的核心</strong></p>\n<p><strong>核心编译成功后，并不保证我们刚刚选择的核心项目完全适于当前这台主机系统，可能有某些地方我们忘记选择，将会导致新核心无法顺利驱动整个主机系统，此时，如果保留旧的核心，若新核心测试不通过，用旧核心来启动即可</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsivmvbl0gj30lx0dujt7.jpg\" alt=\"\" /></p>\n<h2 id=\"额外单一模块编译\"><a class=\"anchor\" href=\"#额外单一模块编译\">#</a> 额外（单一）模块编译</h2>\n<p><strong>核心所支持的功能中，有直接编译到核心内部的，也有使用外挂模式的，外挂模块可以简单地想成是驱动程序。这些核心模块根据不同的版本，分别放到 /lib/modules/'uname -r'/ 目录中，各硬件的驱动程序则放到 /lib/modules/'uname -r'/kernel/drivers/ 中，这些模块与设备代号的对应，就必须写入 /etc/modprobe.conf 文件中。</strong></p>\n<p><strong>由于核心原来就提供了很多核心工具给硬件开发商使用，而硬件开发商也需要针对核心所提供的功能来设计驱动程序模块，因此如果要自行使用硬件开发商所提供的模块进行编译，就需要使用核心所提供的原始文件中的头文件，来获取驱动模块所需要的一些函数库或文件头的定义</strong></p>\n<p><strong>早期的核心源码要求要放到 /usr/src/linux、目录下，由于如果 Linux 系统中有多个核心，而且使用的源码并不相同，问题就大了。所以，就以 /lib/modules/'uname -r'/build 和 /lib/modules/'uname -r'/source 这两个连接文件来指向正确的核心源码放置目录，核心模块目录如下：</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gsivnl9v9cj30ke07kabd.jpg\" alt=\"\" /></p>\n<h3 id=\"单一模块编译\"><a class=\"anchor\" href=\"#单一模块编译\">#</a> 单一模块编译</h3>\n<p>两种情况：</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gsivocyfiwj30kn02j3yz.jpg\" alt=\"\" /></p>\n<p><strong>去获取源码，重新编译成为系统可以加载的模块，都需要 make、gcc 以及核心所提供的 include 头文件与函数库</strong></p>\n<p>1. 硬件开发商提供的额外模块</p>\n<p><strong>可以使用各种方法下载文件，假设把它放到 /root，直接解压缩。读一读 INSTALL/README，然后查找生成文件，就能编译了，整体流程如下：</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gsivon9e5zj30kz0fumzj.jpg\" alt=\"\" /></p>\n<p><strong>这样就可以轻松编译模块，并且将它直接放到核心模块目录中，同时通过 depmod 对模块建立关联，就能利用 modprobe 来直接采用了。若自行编译模块时，若核心有更新，则必须要重新编译该模块一次，重复上面的步骤</strong></p>\n<p>2. 利用旧有的核心源码进行编译</p>\n<p>在当前的核心源码所在目录执行 make menuconfig，然后将 NTFS 的选项这支撑模块，之后执行：</p>\n<p>make fs /ntfs/</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gsivouyajjj30lm02wgmb.jpg\" alt=\"\" /></p>\n<h3 id=\"核心模块管理lsmod-modinfo-modprobe-insmod-rmmod\"><a class=\"anchor\" href=\"#核心模块管理lsmod-modinfo-modprobe-insmod-rmmod\">#</a> 核心模块管理：lsmod、modinfo、modprobe、insmod、rmmod...</h3>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/07/07/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86%20%20%20%20%20Linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/",
            "url": "https://theprofessor249.github.io/2021/07/07/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86%20%20%20%20%20Linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/",
            "title": "第四部分   Linux用户管理",
            "date_published": "2021-07-07T01:11:40.679Z",
            "content_html": "<h1 id=\"linux账户与身份管理\"><a class=\"anchor\" href=\"#linux账户与身份管理\">#</a> Linux 账户与身份管理</h1>\n<h2 id=\"linux的账号与用户组\"><a class=\"anchor\" href=\"#linux的账号与用户组\">#</a> Linux 的账号与用户组</h2>\n<h3 id=\"用户识别uid与gid\"><a class=\"anchor\" href=\"#用户识别uid与gid\">#</a> 用户识别：UID 与 GID</h3>\n<p><strong>每个文件都具有拥有者与拥有用户组的属性。每个登录的用户至少会取得两个 ID，一个是用户（User ID，简称 UID），一个是用户组 ID（Group ID，简称 GID）</strong></p>\n<ul>\n<li>如何登录 Linux 取得 UID/GID</li>\n</ul>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs87aqxap0j30ko031myd.jpg\" alt=\"\" /></p>\n<h3 id=\"用户账号etcpasswd-etcshadow\"><a class=\"anchor\" href=\"#用户账号etcpasswd-etcshadow\">#</a> 用户账号：/etc/passwd、/etc/shadow</h3>\n<p>1./etc/passwd</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gs87b3eoq7j30kw0i1q90.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs87bdbyr7j30kk0d9tci.jpg\" alt=\"\" /></p>\n<p>2./etc/shadow</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs87bsygsyj30l60ld7f6.jpg\" alt=\"\" /></p>\n<h3 id=\"关于用户组有效与初始用户组-groupsnewgrp\"><a class=\"anchor\" href=\"#关于用户组有效与初始用户组-groupsnewgrp\">#</a> 关于用户组：有效与初始用户组、groups/newgrp</h3>\n<p>1./etc/group: 用于记录 GID 与用户组名称的</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs87c38oclj30l20c7dhk.jpg\" alt=\"\" /></p>\n<p>2. 有效用户组与初始用户组</p>\n<p><strong>GID 就是初始用户组；当用户登录系统，立刻就拥有这个用户组的相关权限</strong><br />\n<strong>在 /etc/passwd 中，GID 就是初始用户组</strong><br />\n<strong>直接输入 groups 就可以，在输出消息中，可以知道我同时属于 dmtsai 及 users 两个用户组，而第一个输出的用户组为有效用户组，可通过 newgrp 改变有效用户组</strong></p>\n<p>先查看一下 /etc/group 文件：</p>\n<p>[root@localhost /]# cat /etc/group<br />\nroot❌0:root<br />\nbin❌1:root,bin,daemon</p>\n<p>这个文件的每一行代表一个用户组，以冒号分隔各个字段。共有 4 个字段，分别是：</p>\n<p><strong>用户组名称</strong><br />\n ** 用户组密码：** 通常不需要设置，这个设置通常是给 “用户组管理员” 是用的。<br />\n<strong>GID：用户组 ID</strong><br />\n 此用户组支持的账号名称：一个账号可以加入多个用户组，如果某个用户想要加入某个用户组，只需将该用户的用户名添加进这个字段中。<br />\n<strong>初始用户组</strong><br />\n在 /etc/passwd 中用户对应的那一行的第 4 个字段（GID），就是初始用户组。当用户登录系统，立刻就拥有这个初始用户组的相关权限。</p>\n<p>[root@localhost /]# cat /etc/passwd<br />\nroot❌0:0:root:/root:/bin/bash<br />\nbin❌1:1:bin:/bin:/sbin/nologin</p>\n<hr />\n<p>有效用户组<br />\n有效用户组表示用户此时此刻所在的用户组是什么。在切换有效用户组之前，有效用户组就是初始用户组。</p>\n<p>想要知道用户自己当前的有效用户组和支持的用户组 (在 /etc/group 文件中第四字段包含此用户的用户组)，使用 groups 即可。</p>\n<p>[root@localhost /]# groups<br />\nroot bin daemon sys adm disk wheel</p>\n<p><strong>在这个输出的信息中，第一个输出的用户组就是当前的有效用户组了</strong></p>\n<p>如果我以 touch 去创建一个新文件，那么这个文件的所有者为 root, 而且用户组是 root（有效用户组）。</p>\n<p><strong>切换有效用户组：newgrp</strong></p>\n<p>使用 newgrp 命令可以切换有效用户组，注意只能切换当前账号支持的用户组。</p>\n<p>假设当前用户支持 “test” 和 “foo” 这两个用户组。那么 newgrp test 和 newgrp foo 是有效的。其他的都是无效的。</p>\n<p>这个转换的背后原理是创建一个新的 shell，如果要恢复到前一个用户组需要用 exit 或 Ctrl+D 来注销当前的 shell 。</p>\n<p>3./etc/gshadow</p>\n<p><strong>如果没有明白 /etc/gshadow 的设置，newgrp 是无法操作的</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs87d5u0k1j30lm05cjsw.jpg\" alt=\"\" /></p>\n<h2 id=\"账户管理\"><a class=\"anchor\" href=\"#账户管理\">#</a> 账户管理</h2>\n<h3 id=\"新增与删除用户useradd-相关设置文件-passwd-usermod-userdel\"><a class=\"anchor\" href=\"#新增与删除用户useradd-相关设置文件-passwd-usermod-userdel\">#</a> 新增与删除用户：useradd、相关设置文件、passwd、usermod、userdel</h3>\n<p>1.useradd(-u、-r)</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gs88n3fy98j30k304wwfo.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs88nis4lzj30km0lvteu.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs88nomiqoj30ka02r0sr.jpg\" alt=\"\" /></p>\n<p>2. 相关设置文件</p>\n<p><strong>使用 useradd 去新增用户时，一些在 /etc/passwd 中的值会去参考 /etc/default/useradd</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gs88nw81a5j30jh03ydgh.jpg\" alt=\"\" /></p>\n<p>3. 关于用户组的建立机制</p>\n<p>用户组有两种建立机制：</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs88ppt2tej30kf02njsa.jpg\" alt=\"\" /></p>\n<p>4. 关于用户家目录的参考：/etc/skel/*</p>\n<p><strong>利用 useradd  vbird1 时，它在 /home/vbird 这个用户家目录内的各项数据，都是由 /etc/skel 所复制过去的。所以，将来如果想要新增用户，该用户大的环境变量～/.bashrc 设置好的话，可以到 /etc/skel/.bashrc 去编辑，也可以建立 /etc/skel/public_html 目录，新增用户后，在它的家目录下就会有 pubilc_html 目录了</strong></p>\n<p>5. 关于用户 UID/GID 的设置</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs88shiv37j30k807p76l.jpg\" alt=\"\" /></p>\n<p>6. 关于家目录默认是否建立</p>\n<p><strong>注意 CREATE_HOME 的设置值也很重要。在 FC4 的环境下，使用 useradd   useraccount 时，默认会主动建立家目录，除非使用 - M 参数。不论哪个版本，最好还是加上 - m 参数来强制建立家目录</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs88tm87pyj30ld03k755.jpg\" alt=\"\" /></p>\n<p>7.passwd</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs88tvrsopj30jx0cc41e.jpg\" alt=\"\" /></p>\n<p>8.usermod</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gs88u9ov1bj30kl0knwks.jpg\" alt=\"\" /></p>\n<p><strong>usermod 是系统管理员 root 用来管理账号身份的相关数据的，不过这个 usermod 程序的功能其实也被很多其他命令所取代，如 chfn 与 chsh 等</strong></p>\n<p>9.userdel</p>\n<p><strong>作用是删除用户</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs88uk7m3pj30k50cmgmg.jpg\" alt=\"\" /></p>\n<h3 id=\"用户功能chfn-chsh\"><a class=\"anchor\" href=\"#用户功能chfn-chsh\">#</a> 用户功能：chfn、chsh</h3>\n<p>1.chsh</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gs8ggwi3ezj30k50bxmzq.jpg\" alt=\"\" /></p>\n<p>2.chfn</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs8gh8yy0oj30l20hvadk.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs8ghiceozj30ky04ujs9.jpg\" alt=\"\" /></p>\n<p>3.finger</p>\n<p><strong>用 chfn 修改用户的相关信息，这些信息就可以利用 finger 来查看</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gs8ghr4gmxj30k207s0u3.jpg\" alt=\"\" /></p>\n<p><strong>finger 可以用来查询其他主机的账号</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzQuaWQ=\">4.id</span></p>\n<p><strong>id 命令可以查询某人或自己的相关 UID/GID 信息</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs8gi7180nj30k5058dgk.jpg\" alt=\"\" /></p>\n<h3 id=\"新增与删除用户组\"><a class=\"anchor\" href=\"#新增与删除用户组\">#</a> 新增与删除用户组</h3>\n<p><strong>用户组内容与下面两个文件有关</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gs8gif3mbkj30k1017dfo.jpg\" alt=\"\" /></p>\n<p><strong>用户组的内容其实很简单，只是对上面两个文件进行新增，修改与删除而已，如果再加上有效用户组的概念，那么对 newgrp 与 gpasswd 则不可不知</strong></p>\n<p>1.groupadd</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs8gio267wj30jv0aa0um.jpg\" alt=\"\" /></p>\n<p>2.groupmod</p>\n<p><strong>只是在进行 group 相关参数的修改</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs8gixzli5j30kh06qwfh.jpg\" alt=\"\" /></p>\n<p>3.groupdel</p>\n<p><strong>删除用户组</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs8gj6e5qdj30k704zaal.jpg\" alt=\"\" /></p>\n<p>4.gpasswd</p>\n<p><strong>除了设置用户组之外，还可以针对系统上有的用户组设置密码，该用户组就能让某些人登录成为有效用户组</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gs8gjnxf4mj30k007ujtu.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs8gk2k27rj30k20btact.jpg\" alt=\"\" /></p>\n<p>5.newgrp</p>\n<p><strong>newgrp 会额外以另一个 login 来让用户登录到另一个 shell 中，并且将有效用户组改为 newgrp 后面接的那个用户组，若没有接用户组，则默认用户组为初始用户组</strong></p>\n<h3 id=\"密码管理passwd\"><a class=\"anchor\" href=\"#密码管理passwd\">#</a> 密码管理：passwd</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs8gkau0kyj30ks0d0q5k.jpg\" alt=\"\" /></p>\n<h2 id=\"切换用户身份\"><a class=\"anchor\" href=\"#切换用户身份\">#</a> 切换用户身份</h2>\n<ul>\n<li>\n<p>操作的习惯：为了安全，建议操作 Linux 时，尽量以一般身份用户来操作，等到需要设置系统环境时，才变换身份成为 root 来进行系统管理，相对比较安全</p>\n</li>\n<li>\n<p>用较低权限启动系统服务：烤炉到系统的安全性，必须要以某些系统账号来执行程序</p>\n</li>\n<li>\n<p>软件本身的限制：以前没有 ssh 的时候，我们都是使用 telnet 登录系统的，偏偏系统默认是不打开 root 以 telnet 登录；系统最特殊的账号就是 UID 为 0 的用户，它具有至高无上的权力，而且时系统管理员必须要具备的身份</p>\n</li>\n<li>\n<p>用 su 直接将身份变成 root，但这个命令需要面膜</p>\n</li>\n<li>\n<p>如果不想将 root 的密码外传，可以使用 sudo</p>\n</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEuc3U=\">1.su</span></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs8gknxm6pj30k10j6gpy.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gs8gm3qbqcj30jz035dg5.jpg\" alt=\"\" /></p>\n<p><strong>su 的特别使用方式</strong></p>\n<blockquote>\n<p>如果只是想要使用 root 身份操作系统，并不想要改变原来的环境参数，可以使用 su 直接切换的身份成为 root</p>\n</blockquote>\n<blockquote>\n<p>建议如果要切换成某个身份，使用 su 或者是 su - l  username，否则容易造成环境变量的差异</p>\n</blockquote>\n<blockquote>\n<p>如果仅想执行一次 root 的命令，可以参考 - c 这种 su 的使用方式</p>\n</blockquote>\n<blockquote>\n<p>当 root 使用 su 切换身份时，并不需要输入密码</p>\n</blockquote>\n<h3 id=\"sudo\"><a class=\"anchor\" href=\"#sudo\">#</a> sudo</h3>\n<p><strong>sudo 是如何工作的</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gs8gmw63flj30k303r0tw.jpg\" alt=\"\" /></p>\n<p><strong>sudo 的执行权限与 /etc/sudoers 文件有关。在默认的情况下，只有 root 才能使用 sudo，编辑 /etc/sudoers 时则需要 visudo 命令</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs8gng79cpj30jx05aq3q.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs8gs65yz4j30k40blgnz.jpg\" alt=\"\" /></p>\n<p><strong>一定要使用 visudo 去编辑 /etc/sudoers (visudo 必须使用 root 的身份来执行)</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gs8gtvwm6mj30je0bqwgo.jpg\" alt=\"\" /></p>\n<p><strong>使用 visudo 之后，就会出现一个画面，它就是以 vi 来打开 /etc/sudoers 的，当我们存储离开时，visudo 会去检查 /etc/sudoers 内部的语法，以避免用户输入错误的信息。在上面只加入一行，就是让用户成为可以随意使用 sudo 的身份</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs8gua9gzij30jr010aa0.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gs8gy0t78oj30id0htte1.jpg\" alt=\"\" /></p>\n<h2 id=\"用户的特殊shell与pam模块\"><a class=\"anchor\" href=\"#用户的特殊shell与pam模块\">#</a> 用户的特殊 Shell 与 PAM 模块</h2>\n<h3 id=\"特殊的shell-sbinnologin\"><a class=\"anchor\" href=\"#特殊的shell-sbinnologin\">#</a> 特殊的 shell、/sbin/nologin</h3>\n<p><strong>这个 shell 通常时给系统账号使用的，因为 /sbin/nologin 事实上无法让账号实际登录，如果利用 usermod 将 dmtsai 用户的 shell 改为 /sbin/nologin 之后，再次以 dmtsai 登录系统，屏幕就会出现不允许这个账号登录，不过可以进行其他工作，例如打印工作、www 服务。他们都可以进行系统程序的工作，但就是无法登录主机</strong></p>\n<p><strong>所以可以考虑单纯使用邮件的账号以 /sbin/nologin 作为 shell，当主机尝试想登录系统时，可以拒绝该账号</strong></p>\n<h3 id=\"pam模块etcnologin-etcsecuretty\"><a class=\"anchor\" href=\"#pam模块etcnologin-etcsecuretty\">#</a> PAM 模块：/etc/nologin、/etc/securetty</h3>\n<p><strong>PAM 模块除了可以在用户登录时进行身份验证之外，还可以辅助一些应用程序的验证</strong></p>\n<p><strong>PAM 怎么运行的，以 /usr/bin/passwd 来说明</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs8gygt6g2j30k70apjtc.jpg\" alt=\"\" /></p>\n<p><strong>重要信息：</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs8gyob15pj30le031ab5.jpg\" alt=\"\" /></p>\n<p>1.PAM 的设置文件设置范例</p>\n<p><strong>PAM 模块的作用就是让程序调用，当程序调用时，PAM 就会利用相对应的设置文件来进行一些验证</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gs8gz5fv4jj30l30hc0yt.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs8gzhrls8j30lp0c640v.jpg\" alt=\"\" /></p>\n<p>*<em> 当前 FC4 提供的 PAM 模块够多了，这些模块实际上都放在 /lib/security/ 目录中，FC4 相关的 PAM 说明文件则放在 /usr/share/doc/pam-*/<em> 里，可以根据每个不同的模块去讨论它的用途</em></em><br />\n<img data-src=\"!%5B%5D(https://tva4.sinaimg.cn/large/008jSNE7ly8gs8gzxzmbuj30kg03gmxh.jpg)\" alt=\"\" /></p>\n<p>2./etc/securetty</p>\n<p><strong>主要功能就是预防不安全的登录环境。而且主要是针对 root 用户的身份。这个模块在被启动时，会去读取 /etc/securetty 文件，我们可以将被认定是安全的终端环境写入这个文件，则 root 仅可以在那几个终端环境下登录</strong></p>\n<p>3./etc/nologin</p>\n<p><strong>用于控制用户登录；这个模块只针对一般身份用户进行控制，对 root 没有效果；必须与 /etc/nologin 结合使用</strong><br />\n<strong>当 /etc/nologin 文件存在时，任何一个一般身份账号在尝试登录时，仅会获得 /etc/nologin 内容的信息，而无法登录主机</strong></p>\n<p>4./etc/security/*</p>\n<p>*<em> 更多的 PAM 模块设置信息可以参考 /etc/security/<em> 中的文件设置，尤其是针对用户使用 Linux 系统资源的 limits.conf 以及时间的 time.conf</em></em></p>\n<h2 id=\"linux系统的用户对话与邮件的使用\"><a class=\"anchor\" href=\"#linux系统的用户对话与邮件的使用\">#</a> Linux 系统的用户对话与邮件的使用</h2>\n<h3 id=\"查询用户w-who-last-lastlog\"><a class=\"anchor\" href=\"#查询用户w-who-last-lastlog\">#</a> 查询用户：w、who、last、lastlog</h3>\n<h3 id=\"用户对话talk-mesg-wall\"><a class=\"anchor\" href=\"#用户对话talk-mesg-wall\">#</a> 用户对话：talk、mesg、wall</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs8h1u31iij30nl0kvjvl.jpg\" alt=\"\" /></p>\n<h3 id=\"用户邮件信箱mail\"><a class=\"anchor\" href=\"#用户邮件信箱mail\">#</a> 用户邮件信箱：mail</h3>\n<p><strong>寄信：</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs8h27dl8cj30kd04bmxx.jpg\" alt=\"\" /></p>\n<p><strong>收信</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs8h2w1twbj30ly0hoaeh.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gs8h3hk51jj30kp09v77f.jpg\" alt=\"\" /></p>\n<h2 id=\"手动增加用户\"><a class=\"anchor\" href=\"#手动增加用户\">#</a> 手动增加用户</h2>\n<h3 id=\"一些检查工具\"><a class=\"anchor\" href=\"#一些检查工具\">#</a> 一些检查工具</h3>\n<p>1.pwck</p>\n<p><strong>pwck 命令能检查 /etc/passwd 账号设置文件内的信息，以及实际的家目录是否存在等信息，还可以比较 /etc/passwd、/etc/shadow 的信息是否一致；如果 /etc/passwd 内的数据字段错误，会提示用户修改</strong></p>\n<p>2.pwconv</p>\n<p><strong>主要目的是：将 /etc/passwd 内账号与密码移到 /etc/shadow 中。</strong></p>\n<p>3.pwunconv</p>\n<p><strong>与 pwconv 相比，pwunconv 是将 /etc/shadow 内的密码栏数据写回 /etc/passwd 中，并且删除 /etc/shadow 文件</strong></p>\n<p>4.chpasswd</p>\n<p><strong>可以用于读入未加密前的密码，并且经过加密后，将加密后的密码写入 /etc/shadow 中</strong></p>\n<h3 id=\"特殊账号如纯数字账号的建立\"><a class=\"anchor\" href=\"#特殊账号如纯数字账号的建立\">#</a> 特殊账号，如纯数字账号的建立</h3>\n<p><strong>手动建立账号：</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gs8hjr6guwj30kg09d77q.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gs8hjxw4uhj30k40ce0vb.jpg\" alt=\"\" /></p>\n<h3 id=\"不开放终端登录的账号exmail-account\"><a class=\"anchor\" href=\"#不开放终端登录的账号exmail-account\">#</a> 不开放终端登录的账号（ex&gt;mail  account）</h3>\n<p><strong>建立一个不需要登录系统的账号</strong><br />\n<img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs8ht7vaqsj30k1018glt.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs8htav6n4j30lo0a2q5g.jpg\" alt=\"\" /></p>\n<h1 id=\"linux磁盘配额\"><a class=\"anchor\" href=\"#linux磁盘配额\">#</a> Linux 磁盘配额</h1>\n<h2 id=\"什么是磁盘配额\"><a class=\"anchor\" href=\"#什么是磁盘配额\">#</a> 什么是磁盘配额</h2>\n<p><strong>由于少数几个用户占用大量硬盘空间，势必影响其他用户的使用，因此管理员应该给用户适当开放硬盘的权限，妥善分配系统资源</strong></p>\n<p>1. 磁盘配额的一般用途</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs9a98dmm0j30i702b0tc.jpg\" alt=\"\" /></p>\n<p>2. 磁盘配额的使用限制</p>\n<ul>\n<li>\n<p>针对整个分区的限制</p>\n</li>\n<li>\n<p>核心必须支持磁盘配额</p>\n</li>\n<li>\n<p>磁盘配额的记录文件</p>\n</li>\n<li>\n<p>只对一般身份用户有效</p>\n</li>\n</ul>\n<p>3. 磁盘配额程序对硬盘配额的限制</p>\n<ul>\n<li>\n<p>最低限制：容量可以超过最低限制，但必须在宽限时间之内将磁盘容量降低到最低限制的容量限制范围之内</p>\n</li>\n<li>\n<p>最高限制：绝对不能超过的容量，通常最高限制会比最低限制高</p>\n</li>\n<li>\n<p>宽限时间：当用户使用的空间超过最低限制，却还没有到达最高限制时，在这个宽限时间内，就必须请用户将使用的磁盘容量降低到最低限制之下</p>\n</li>\n</ul>\n<h2 id=\"基本磁盘配额命令\"><a class=\"anchor\" href=\"#基本磁盘配额命令\">#</a> 基本磁盘配额命令</h2>\n<p>1./etc/mtab</p>\n<p><strong>当我们要使用磁盘配额的功能时，文件系统必须要支持磁盘配额的标志，可通过编辑 /etc/fstab 后，再重新载入文件系统的方法，来让系统的文件系统支持磁盘配额</strong></p>\n<p>2.quota：用于显示</p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/35ae178a4391b8b41f1d011163069d4a\" alt=\"\" /></p>\n<p>3.quotacheck</p>\n<p><strong>主要是扫描某个磁盘的配额空间，针对分区进行扫描，由于该磁盘持续运行，可能扫描过程中文件会增减，造成磁盘配额扫描错误，因此，当使用 quotacheck 时，该磁盘将自动被设置成为只读扇区；扫描完毕之后，扫描所得的磁盘空间结果会写入该区最顶端</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/235047593b4661e92bb3786e00ce0bc8\" alt=\"\" /></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/3c1d03264334f22bf988ad3d3635a4fb\" alt=\"\" /></p>\n<p>4.edquota</p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/731b33f73a3611dc3ae6f4eaad45056d\" alt=\"\" /></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/5b7bac5e6dbb200c7710a9fe2fa702e4\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/1a82595fc6304e143f93d9128232406c\" alt=\"\" /></p>\n<p>5.quotaon</p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/77d720239327679f75405b0dc62f921c\" alt=\"\" /></p>\n<p>6.quotaoff</p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/edae6a0db49e8e297e323cfa0e39b648\" alt=\"\" /></p>\n<h2 id=\"磁盘配额实例\"><a class=\"anchor\" href=\"#磁盘配额实例\">#</a> 磁盘配额实例</h2>\n<p><strong>一般用途：</strong></p>\n<ul>\n<li>\n<p>限制用户组所能使用的最大磁盘配额（使用户组限制）</p>\n</li>\n<li>\n<p>限制某一用户的最大磁盘配额（使用用户限制）</p>\n</li>\n<li>\n<p>已连接方式，使邮件可以作为限制的配额（更改 /var/spool/mail 路径）</p>\n</li>\n</ul>\n<p><strong>磁盘从开始准备文件系统的支持，到整个设置结束的主要步骤如下：</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/c3539a299da8b7058198159b337bd53e\" alt=\"\" /></p>\n<p><strong>实际训练：</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/0985597cdde751f6aad2896be8966d09\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/90fe2ee5846c4fbbcdaa8719690fe1e7\" alt=\"\" /></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/3547bc9ff3a695be9e3a02ef68deba14\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/ff9e21aa7d2b55822d0e181df202cf5d\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/d4880b9490f7106cfaa4e2848158ccd5\" alt=\"\" /></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/d46460915965de8de4ab803751f41ee2\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/dba2be455f1594ec340235196dfd269f\" alt=\"\" /></p>\n<h2 id=\"不更改现有系统的磁盘配额实力\"><a class=\"anchor\" href=\"#不更改现有系统的磁盘配额实力\">#</a> 不更改现有系统的磁盘配额实力</h2>\n<p><strong>设置对外打开的邮件主机，最好对邮件空间进行限制</strong></p>\n<p><strong>例子：我的分区仅有 /、/disk1、/disk2, 所有用户都在 /home 里，邮件在 /var/spool/mail</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/512d89a553751d82e81da047af9142f8\" alt=\"\" /></p>\n<h1 id=\"例行性命令的建立\"><a class=\"anchor\" href=\"#例行性命令的建立\">#</a> 例行性命令的建立</h1>\n<h2 id=\"什么是例行性命令\"><a class=\"anchor\" href=\"#什么是例行性命令\">#</a> 什么是例行性命令</h2>\n<h3 id=\"linux工作任务分配的种类at-cron\"><a class=\"anchor\" href=\"#linux工作任务分配的种类at-cron\">#</a> Linux 工作任务分配的种类：at、cron</h3>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/970616cd635c848fda3d6fe2d8d12a42\" alt=\"\" /></p>\n<h3 id=\"系统常见的例行性命令\"><a class=\"anchor\" href=\"#系统常见的例行性命令\">#</a> 系统常见的例行性命令</h3>\n<p><strong>默认工作如下：</strong></p>\n<ul>\n<li>\n<p>登录文件的数据轮换</p>\n</li>\n<li>\n<p>rpm 数据库的建立</p>\n</li>\n<li>\n<p>建立 locate 的数据库</p>\n</li>\n<li>\n<p>程序分析</p>\n</li>\n<li>\n<p>检查登录文件</p>\n</li>\n<li>\n<p>指纹数据库的比较</p>\n</li>\n</ul>\n<h2 id=\"仅进行一次的工作任务分配\"><a class=\"anchor\" href=\"#仅进行一次的工作任务分配\">#</a> 仅进行一次的工作任务分配</h2>\n<p><strong>要分配工作任务时，Linux 系统上有负责任务分配的服务，就是 atd，只是很多新的 Linux 版本似乎默认不打开它，我们必须手动启动它，启动如下：</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/7d73e4a853b9f7d7a920cda8a47d836d\" alt=\"\" /></p>\n<p>1.at 的工作</p>\n<p><strong>并不是所有人都可以进行 at 工作任务分配。由于怪客程序可能定时或不定时地在系统中工作，所以可以利用 /etc/at.allow 与 /etc/at.deny 这两个文件来限制 at 的使用：</strong><br />\n<img data-src=\"https://img01.sogoucdn.com/app/a/100520146/3903d5824428e33a0c93da5905339fd0\" alt=\"\" /></p>\n<p>2. 开始使用 at</p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/efc74c50c2c65e3ddb26ea0d5e28c689\" alt=\"\" /></p>\n<p><strong>当我们使用 at 时，at 会给用户一个 bash shell 让用户执行工作命令，不容易出现问题</strong></p>\n<p><strong>at 的优点就是能进行后台执行</strong></p>\n<p><strong>at 命令执行错误，解决方法：</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/77a189a7da07b25936a100e2d5c7f6e1\" alt=\"\" /></p>\n<h2 id=\"循环执行的例行性命令\"><a class=\"anchor\" href=\"#循环执行的例行性命令\">#</a> 循环执行的例行性命令</h2>\n<p><strong>循环执行的例行性命令，是由 cron 系统服务来控制的</strong></p>\n<h3 id=\"用户的设置crontab\"><a class=\"anchor\" href=\"#用户的设置crontab\">#</a> 用户的设置：crontab</h3>\n<p><strong>我们可以限制使用 crontab 的用户账户，使用的限制数据有:</strong></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/bbcd3a0bbb001ac388c9e362356544b4\" alt=\"\" /></p>\n<p><strong>/etc/cron.allow 比 /etc/cron.deny 更优秀，在判断上，这两个文件只选择一个来限制而已，建议只要保留一个即可，以免影响自己在设置上的判断</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/a557200d3cc53d9a6fa098e096424629\" alt=\"\" /></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/7202923fb8cd3a20a6201f5205534161\" alt=\"\" /></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/04c427e51cecf015c363d8fdaa18e20d\" alt=\"\" /></p>\n<h3 id=\"系统的设置etccrontab\"><a class=\"anchor\" href=\"#系统的设置etccrontab\">#</a> 系统的设置：/etc/crontab</h3>\n<p><strong>crontab  -e 中的 crontab 其实是 /usr/bin/crontab 执行文件，但是 /etc/crontab 是一个纯文本文件，您可以用 root 的身份编辑这个文件</strong></p>\n<p><strong>cron 服务的最低检测限制是分钟，所以 cron 会每分钟去读取一次 /etc/crontab 与 /var/spool/cron 中的数据内容，因此，只要编辑完 /etc/crontab 文件，并且将它储存之后，cron 的设置就自动执行了</strong></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/2b06fde0fb8db1099663431ef2608565\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/5c9be31b031284a17fc9448ea0cd55fe\" alt=\"\" /></p>\n<h2 id=\"一些使用特性\"><a class=\"anchor\" href=\"#一些使用特性\">#</a> 一些使用特性</h2>\n<ul>\n<li>资源分配不均的问题</li>\n</ul>\n<p><strong>当大量使用 1crontab 的时候，总是会有问题发生的，最严重的问题就是系统资源分配不均</strong></p>\n<ul>\n<li>\n<p>取消不要的输出项目</p>\n</li>\n<li>\n<p>安全检验</p>\n</li>\n</ul>\n<p><strong>大部分时间都是以例行命令的放肆植入木马，所以可以通过检查 /var/log/cron 的内容来查看是否执行了非您设置的 cron</strong></p>\n<h1 id=\"程序与资源管理\"><a class=\"anchor\" href=\"#程序与资源管理\">#</a> 程序与资源管理</h1>\n<p><strong>在 Linux 系统中，触发任何一个事件，系统都会将它定义成为一个进程，并且给这个进程一个 ID，称为 PID，同时根据启动这个进程的用户与相关属性关系，给这个 PID 一组有效的权限设置</strong></p>\n<h3 id=\"进程与程序\"><a class=\"anchor\" href=\"#进程与程序\">#</a> 进程与程序</h3>\n<p><strong>当我们要让系统工作的时候，就需要启动一个二进制文件，该二进制文件就是程序</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/2c523329963c658f3c8f85e0ee2b0fb1\" alt=\"\" /></p>\n<blockquote>\n<p>当登入并执行 bash 时，系统已经给我们一个 PID，这个 PID 就是根据登陆者的 UID/GID 而得到的</p>\n</blockquote>\n<p>1. 子程序与父程序</p>\n<p><strong>当我们登录系统后，会获取一个 bash 的 shell，然后我们用这个 bash 提供的接口去执行另一个命令，例如 /usr/bin/passwd 或 touch 等，那些另外执行的命令也会被出发成为 PID，PID 就是子程序，而在 bash 环境下就称为父进程</strong></p>\n<p><strong>环境变量在不同程序之间的调用，因为我们执行了不同的 bash，执行两次，就会获得两个 PID，要让这两个 PID 之间具有一些关联，bash 就使用了环境变量</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/a02efce225edc3012a1dbf4575121059\" alt=\"\" /></p>\n<p><strong>子程序与父程序之间的关系很复杂，最复杂的地方在于程序互相之间的调用，以及两者权限的关联性</strong></p>\n<p>2. 系统或网络服务，常驻内存程序</p>\n<p><strong>系统每分钟都会扫描 /etc/crontab 以及相关的设置文件，来进行工作任务分配，所以 crond 程序启动后，他就一直持续不断地运行，属于常驻内存程序</strong></p>\n<h3 id=\"linux的多用户-多任务环境\"><a class=\"anchor\" href=\"#linux的多用户-多任务环境\">#</a> Linux 的多用户、多任务环境</h3>\n<ul>\n<li>多人环境</li>\n</ul>\n<p><strong>Linux 允许不同的人使用，而且每个人都有特殊的权限，只有 root 有至高无上的权力</strong></p>\n<ul>\n<li>多任务行为</li>\n</ul>\n<p><strong>多项工作都是由一个 CPU 来处理，也是将多个命令触发为系统进程 PID，而这些程序若同时被触发，一个 CPU 就要同时负责许多工作，这就是指多任务</strong></p>\n<ul>\n<li>多重登录环境的 7 个基本终端窗口</li>\n</ul>\n<p><strong>在 Linux 中，默认提供了 6 个命令行界面登录窗口，以及一个图形界面，可以使用 alt+F1...F7 键来切换不同的终端界面，而且每个终端界面的登陆这还可以是不同的人。再某个程序死掉的时候，这非常有用</strong></p>\n<ul>\n<li>特殊的程序管理行为</li>\n</ul>\n<p><strong>Linux 几乎不会死机，因为它可以在任何时候，删掉将被困住的程序，然后重新执行该程序而不用重新开机</strong></p>\n<ul>\n<li>bash 环境下的作业管理（job  control）</li>\n</ul>\n<p><strong>我们登录 bash 之后，就是获取一个名为 bash 的 PID，在这个环境下所执行的其他命令，就是子程序</strong></p>\n<ul>\n<li>多用户、多任务的系统资源分配问题</li>\n</ul>\n<p><strong>多用户、多任务确实有很多好处，但因为用户越来越多，将导致管理上的问题。当用户达到一定的人数后，通常您的机器便需要升级了，因为 CPU 的运算与 RAM 的大小可鞥你会不足以应付日常的工作。</strong></p>\n<h2 id=\"作业管理-ctrl-z-jobs-fg-bg-kill\"><a class=\"anchor\" href=\"#作业管理-ctrl-z-jobs-fg-bg-kill\">#</a> 作业管理：&amp;、ctrl -z、jobs、fg、bg、kill</h2>\n<p><strong>作业管理是在 bash 环境下使用的；就是当我们登录系统获取 bash shell 之后，在单一终端界面下，同时管理多个作业；就如我们登录 bash 后，想同时复制文件、进行数据搜索、进行编译，还可以编写 vi 程序</strong></p>\n<p>1. 直接将命令放到后台执行的 &amp;</p>\n<p><strong>后台与前台：</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/91f9e4b459c7d7b9a45ccbb661a50673\" alt=\"\" /></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/eb356a75a2b15960b4eb6c01b25d6829\" alt=\"\" /></p>\n<p>2. 将当前作业放到后台暂停：Ctrl-z</p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/11ce5f1279e46dc9783d750d65278d87\" alt=\"\" /></p>\n<p>3. 观察当前后台作业状态：jobs</p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/b421889fc72b847aa30b1a20ea09ec14\" alt=\"\" /></p>\n<p>4. 将后台作业拿到前台处理：fg</p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/e78fd2a67867d459b8394ca73a08c54d\" alt=\"\" /></p>\n<p>5. 让作业在后台进行：bg</p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/cc9903484300f958dd770b43acf138ba\" alt=\"\" /></p>\n<p>6. 管理后台作业：kill</p>\n<p><strong>这个信号通常用在强制一个不正常的作业的情况</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/65fc8cc3ec84c64bb79ac42de7a263ea\" alt=\"\" /></p>\n<h2 id=\"进程管理\"><a class=\"anchor\" href=\"#进程管理\">#</a> 进程管理</h2>\n<p><strong>进程管理的重要性：</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/0e29224b4c991dae9878cee0c139153b\" alt=\"\" /></p>\n<h3 id=\"进程的观察\"><a class=\"anchor\" href=\"#进程的观察\">#</a> 进程的观察</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEucHM=\">1.ps</span></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/843b2eac4df94ba2aefc44199de295c9\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/d8158630d84f02e6a992291c8dcb45f0\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/1ad41691a4f24a71d427dba9830844a7\" alt=\"\" /></p>\n<p><strong>范例二显示项目表示的意义：</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/9f0f6cbd740c245c57596b3d5697e0b0\" alt=\"\" /></p>\n<p>2.top</p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/ffcc3058eb47c40ac60e7ddd5abeb5a8\" alt=\"\" /><br />\n<img data-src=\"https://img01.sogoucdn.com/app/a/100520146/1eb6b645b9b15b8b1c093f699768ba12\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/ca19b079fa41e2025f7010db6d0dae73\" alt=\"\" /></p>\n<p><strong>top 进程可以持续检测整个系统的进程工作状态</strong></p>\n<p><strong>进程使用的资源情况</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/56eef4a065c27204c4a93471d35ef8df\" alt=\"\" /></p>\n<p>3.pastree</p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/3e4349061c7637f394f6463fbb159831\" alt=\"\" /></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/b11e3507071461999343d06e14bb93c2\" alt=\"\" /></p>\n<p><strong>直接输入 pstree 可以查到进程的关联性，最好直接加上 - A 使用；如果子进程死掉或者总是删不掉子进程，用 pstree 查找父进程</strong></p>\n<h3 id=\"进程的删除\"><a class=\"anchor\" href=\"#进程的删除\">#</a> 进程的删除</h3>\n<p><strong>主要信号代号与名臣的对应集内容</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/6367962d64562b31fab6e68fcb54ccec\" alt=\"\" /></p>\n<p><strong>kill 可以帮我们将信号传送给某个作业或者是某个 PID，kill 后面直接加数字与加上 % 的情况是不同的</strong></p>\n<p>例：</p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/c8f4f353f7ee8506e92b06176965126d\" alt=\"\" /></p>\n<p><strong>用 killall，可直接把 SIGHUP 信号给 syslog 进程</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/6a15b3997ee3193fc3f3002d5c7657b5\" alt=\"\" /></p>\n<h3 id=\"系统资源的观察\"><a class=\"anchor\" href=\"#系统资源的观察\">#</a> 系统资源的观察</h3>\n<p>1.free</p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/d17d448937837a1f979fc41daa982c37\" alt=\"\" /></p>\n<p><strong>Men 行显示物理内存量，Swap 是虚拟内存量，total 是总量，used 是已用的量，free 是剩余可用的量，后面的 shared/buffers/cached 是在已用的量中，用来进行缓冲及缓存</strong></p>\n<p>2.uname</p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/f056c11c8b4202cd68c9c15ceaab0e9c\" alt=\"\" /></p>\n<p><strong>uname 可以列出当前系统的核心版本，主要硬件平台以及 CPU 类型等信息；例如范一，Linux 主机使用的核心名称为 linux, 而主机名称为 linux site，核心的版本为 2.6.12~1.1398_FC4，该核心版本建立的日期为 2005/7/15，适用的硬件平台为 i386 以上等级的硬件平台</strong></p>\n<p>3.uptime</p>\n<p><strong>用于显示当前系统已开机时间</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/3f2a572985ffab198631f2226cdfdcd2\" alt=\"\" /></p>\n<p>4.netstat</p>\n<p><strong>常用在网络的监控方面，netstat 的输出分为两部分，上面是网络接口相关的联机，下方则是与 unix 进程有关的项目</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/a8ef73c8237bb87586c839fc488419de\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/aa9154ee1d08cf23b8a445f96deff1df\" alt=\"\" /></p>\n<p>5.dmesg</p>\n<p>** 查看 CPU 的形式、硬盘、光盘型号及硬盘分区表；如果消息太多，可加入管道命令 | more 来使画面暂停 **</p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/e0f7c2f9aa97e915bedd4348438ced9e\" alt=\"\" /></p>\n<p>6.sar</p>\n<p><strong>用于检测主机的资源状态，然后绘制为图表</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/9504fd6a2bd141c98be575a21872189b\" alt=\"\" /></p>\n<h2 id=\"进程的执行顺序\"><a class=\"anchor\" href=\"#进程的执行顺序\">#</a> 进程的执行顺序</h2>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/fd535725adcfab15276e67118b7c0547\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/9014501717e9ba94a40f50fe1bc51fe3\" alt=\"\" /></p>\n<p><strong>nice 使用于调整进程的执行优先级；renice 用于调整 nice 的值</strong></p>\n<h2 id=\"特殊文件与进程\"><a class=\"anchor\" href=\"#特殊文件与进程\">#</a> 特殊文件与进程</h2>\n<h3 id=\"suidsgidsbit的概念\"><a class=\"anchor\" href=\"#suidsgidsbit的概念\">#</a> SUID/SGID/SBIT 的概念</h3>\n<p>关于 SUID 的执行：</p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/a0621cadb2378f5c229693d4b9eb7b20\" alt=\"\" /></p>\n<p><strong>当用户触发的 SUID 的进程中，有效用户会变成 SUID 命令的进程拥有者</strong></p>\n<h3 id=\"proc的意义\"><a class=\"anchor\" href=\"#proc的意义\">#</a> /proc/* 的意义</h3>\n<p>*<em> 内存中的数据都写入到 /proc/<em> 目录</em></em></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/0abd5a28738feddef87d73e51a52ae26\" alt=\"\" /></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/a616b0ad761569a144da1d70aeec6c70\" alt=\"\" /></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/29e6ce1ac7e423ede6df2d715ed82099\" alt=\"\" /></p>\n<h3 id=\"查询已打开的文件或已执行进程打开的文件\"><a class=\"anchor\" href=\"#查询已打开的文件或已执行进程打开的文件\">#</a> 查询已打开的文件或已执行进程打开的文件</h3>\n<p>1.fuser</p>\n<p><strong>查询当前那个进程在使用这台设备；是由文件或设备去找出使用该文件或设备的进程</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/573121660b6fad1d2a7d5193fd7f647b\" alt=\"\" /></p>\n<p>2.Isof</p>\n<p><strong>查询某个进程打开或使用的文件与设备</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/7fe085ffad08f9416af3f7cfd59c44f5\" alt=\"\" /></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/f0bfcc63a2e96162f1fc422f4d33c86a\" alt=\"\" /></p>\n<p>3.pidof</p>\n<p><strong>通过 pidof 命令，并且配合 ps  aux 与正则表达式，就可以很轻松地找到想要的进程信息</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/660abbb18c8a0963dd69d77d48ebe19e\" alt=\"\" /></p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/07/07/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%20%20%20%E5%AD%A6%E4%B9%A0Shell%E5%92%8CShell%E8%84%9A%E6%9C%AC/",
            "url": "https://theprofessor249.github.io/2021/07/07/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%20%20%20%E5%AD%A6%E4%B9%A0Shell%E5%92%8CShell%E8%84%9A%E6%9C%AC/",
            "title": "第三部分   学习Shell和Shell脚本",
            "date_published": "2021-07-07T01:11:40.671Z",
            "content_html": "<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n<h1 id=\"vi文字处理器\"><a class=\"anchor\" href=\"#vi文字处理器\">#</a> vi 文字处理器</h1>\n<h2 id=\"vi与vim\"><a class=\"anchor\" href=\"#vi与vim\">#</a> Vi 与 vim</h2>\n<p><strong>使用文字模式来处理 Linux 的系统设置问题，不仅可以容易地了解到 Linux 系统中，使用文字编辑器来编辑 Linux 参数设置文件。</strong></p>\n<p><strong>vi 是老式的文字处理器，功能很齐全。对于程序开发人员很好用，vim 是一个程序开发工具而不是文字处理软件。因为 vim 里加入了很多附加的功能，如支持规范表达法的搜索架构、多文件编辑、块复制。</strong></p>\n<h2 id=\"vi的使用\"><a class=\"anchor\" href=\"#vi的使用\">#</a> vi 的使用</h2>\n<p><strong>一般模式、编辑模式、命令行命令模式</strong></p>\n<ul>\n<li>\n<p>一般模式：<strong>可以使用 “上下左右” 键来移动光标，可以使用删除字符或删除整行，可以使用复制、粘贴来处理文件数据</strong></p>\n</li>\n<li>\n<p>编辑模式：按下上述字母后，画面的左下方会出现 “INSERT” 或 “REPLACE” 的字样，才<strong>可以输入任何字到文件中，如果要回到一般模式时，则必须要按下 Esc 键才可退出编辑模式</strong></p>\n</li>\n<li>\n<p>命令行命令模式：<strong>输入 “：或 / 或？</strong>” 就可以将光标移到最下面的那一行，在这个模式中，您<strong>可以搜索数据，而且读取、存盘、大量删除字符、离开 vi、显示行号等操作</strong></p>\n</li>\n</ul>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gs63kjplg0j30d9082abj.jpg\" alt=\"\" /></p>\n<h3 id=\"简单执行范例\"><a class=\"anchor\" href=\"#简单执行范例\">#</a> 简单执行范例</h3>\n<p>1. 使用 vi 进入一般模式</p>\n<p>vi test.txt</p>\n<p>2. 按下 i 进入编辑模式，开始编辑文字</p>\n<p><strong>I、o、a</strong>, 可以发现在左下角会出现 --INSERT--，意味着可以输入任意字符，键盘上除了 Esc 这个按键之外，其他按键都可以视作为一般的输入按钮</p>\n<p>3. 按下【Esc】键回到一般模式</p>\n<p>4. 在一般模式中按下:wq 存储后离开 vi</p>\n<h3 id=\"命令行内容说明\"><a class=\"anchor\" href=\"#命令行内容说明\">#</a> 命令行内容说明</h3>\n<ul>\n<li>一般模式<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gs63qcme7nj30kq04o75v.jpg\" alt=\"\" /><br />\n<img data-src=\"https://img02.sogoucdn.com/app/a/100520146/be70dd4f37983a9dc34d3d34186d2314\" alt=\"\" /><br />\n<img data-src=\"https://img01.sogoucdn.com/app/a/100520146/f3b6902891dee70dad0f3127be15f735\" alt=\"\" /><br />\n<img data-src=\"https://img04.sogoucdn.com/app/a/100520146/aff76fed52058823c4445c3e58d5f9d9\" alt=\"\" /><br />\n<img data-src=\"https://img01.sogoucdn.com/app/a/100520146/28656f3faf2df35255dd72ffea848c6a\" alt=\"\" /><br />\n<img data-src=\"https://img04.sogoucdn.com/app/a/100520146/3b4fad79b6c38b5181dc903205d883c6\" alt=\"\" /></li>\n</ul>\n<blockquote>\n<p>ctrl  +  f：屏幕向下移动一页，相当于 Page  Down 按键</p>\n</blockquote>\n<blockquote>\n<p>Ctrl  +  b：屏幕向上移动一页，相当于 Page  Up 按键</p>\n</blockquote>\n<blockquote>\n<p>0         ：移动到这一行的最前面字符处</p>\n</blockquote>\n<blockquote>\n<p>$         ：移动到这一行的最后面字符处</p>\n</blockquote>\n<blockquote>\n<p>G         ：移动到这个文件的最后一行</p>\n</blockquote>\n<blockquote>\n<p>gg        ：移动到文件的第一行</p>\n</blockquote>\n<blockquote>\n<p>n《Enter》  ：n 为数字，光标向下移动 n 行</p>\n</blockquote>\n<blockquote>\n<p>/word     ：从光标向下寻找一个名为 word 的字符串</p>\n</blockquote>\n<blockquote>\n<p>n1、n2s/word1/word2/g：n1 与 n2 为数字，在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串替换为 word2</p>\n</blockquote>\n<blockquote>\n<p>x、X       ：x 为向后删除一个字符，X 为向前删除一个字符</p>\n</blockquote>\n<blockquote>\n<p>dd        ：删除光标所在的那一整行</p>\n</blockquote>\n<blockquote>\n<p>ndd       ：n 为数字，从光标位置开始，删除向下 n 行</p>\n</blockquote>\n<blockquote>\n<p>yy        ：复制光标所在的那一行</p>\n</blockquote>\n<blockquote>\n<p>nyy       ：复制光标所在的向下 n 行</p>\n</blockquote>\n<blockquote>\n<p>p、P       ：p 为将已复制的数据粘贴到光标的下一行，P 为贴在光标上一行</p>\n</blockquote>\n<blockquote>\n<p>u         ：复原前一个操作</p>\n</blockquote>\n<blockquote>\n<p>ctrl  +  r：重做上一个操作</p>\n</blockquote>\n<ul>\n<li>编辑模式</li>\n</ul>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/783775d1f9f4593adca0d834c74b697e\" alt=\"\" /></p>\n<blockquote>\n<p>i、I       ：i 为从当前光标所在处插入，I 为在当前所在行的第一个非空格符处开始插入</p>\n</blockquote>\n<blockquote>\n<p>a、A       ：a 为从当前光标所在的下一个字符处开始插入，A 为从光标所在行的最后一个字符处开始插入</p>\n</blockquote>\n<blockquote>\n<p>r、R       ：r 会替换光标所在的哪一个字符；R 会一直替换光标所在的文字，直到按下 Esc 键为止</p>\n</blockquote>\n<ul>\n<li>命令行命令模式</li>\n</ul>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/fc4f797df47360c697e0bf9fd4a1b1b0\" alt=\"\" /></p>\n<blockquote>\n<p>：w       ：将编辑的数据写入硬盘文件中</p>\n</blockquote>\n<blockquote>\n<p>：q       ：离开 vi</p>\n</blockquote>\n<blockquote>\n<p>：wq      ：存储后离开</p>\n</blockquote>\n<h3 id=\"案例练习\"><a class=\"anchor\" href=\"#案例练习\">#</a> 案例练习</h3>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gs854jjffij30mo0kqq8g.jpg\" alt=\"\" /></p>\n<h3 id=\"文件的恢复与暂存盘\"><a class=\"anchor\" href=\"#文件的恢复与暂存盘\">#</a> 文件的恢复与暂存盘</h3>\n<p><strong>当我们编辑一个文件时，假设名称为 /tmp/passwd，那么在这个 /tmp 中就会有一个临时文件，文件名为 /tmp/.passwd.swp, 这是一个隐藏文件，我们所进行的一些修改，都会暂时存在该文件中，如果在文件修改过程中，系统死机，那么下次再重新 vi /tmp/passwd 时，系统就会告诉你，是否需要恢复成修改过程中的模样？如果按下 R，就可以将数据恢复到修改过程的样子，而不是源文件</strong>、<br />\n<strong>再 /tmp 中执行 ls  -al 时，发现有两个文件，文件名分别为 passwd 与.passwd.swp。</strong><br />\n<strong>（1）可能有人在编辑这个文件；（2）之前你在编辑这个文件时，因为某些未知因素导致 vi 程序中断，则该临时文件就会存在。如果是状态（2），则此时可以将该 /.passwd.swp 文件删除，或者直接 vi /tmp/passwd, 在 vi 询问是否恢复时，选择恢复，然后存储更新 /tmp/passwd，之后再将这个 /tmp/.passwd.swp 文件删除即可。如果不删除的话，那么每次编辑这个文件时，都会告诉你该文件有问题</strong></p>\n<h2 id=\"vim的附加功能\"><a class=\"anchor\" href=\"#vim的附加功能\">#</a> vim 的附加功能</h2>\n<p><strong>vim 具有颜色显示功能，并且还支持许多程序语法，当使用 vim 编辑程序时，vim 可帮你直接进行 “程序调试 debug”</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs8553ebrdj30my0c4dii.jpg\" alt=\"\" /></p>\n<h3 id=\"快选择\"><a class=\"anchor\" href=\"#快选择\">#</a> 快选择</h3>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gs855ftam8j30lu0c441d.jpg\" alt=\"\" /></p>\n<h3 id=\"多文件编辑\"><a class=\"anchor\" href=\"#多文件编辑\">#</a> 多文件编辑</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs856k5vqgj30kt0kh41f.jpg\" alt=\"\" /></p>\n<h3 id=\"多窗口功能\"><a class=\"anchor\" href=\"#多窗口功能\">#</a> 多窗口功能</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs857wr1tmj30kt07n75w.jpg\" alt=\"\" /></p>\n<h3 id=\"vim环境设置\"><a class=\"anchor\" href=\"#vim环境设置\">#</a> vim 环境设置</h3>\n<p><strong>如果以 vim 软件来搜索一个文件内部的某个字符串时，这个字符串会被反白，而下次再次以 vim 编辑这个文件时，该搜索的字符串还是存在。当编辑其他文件时，如果其他文件中也存在这个字符串，也会主动反白显示。另外，当重复编辑同一个文件时，第二次进入该文件，光标竟然就在上次离开的哪一行上</strong><br />\n<strong>因为 vim 会主动将曾经做过的行为记录下来，以便下次可以轻松工作。那个记录动作的文件就是：~/.viminfo。每个人的家目录都应该有这个文件。这个文件是自动产生的，不必自行建立。在 vim 里所做过的操作，可以在这个文件内部查询到</strong><br />\n<strong> vim 的环境设置：在一般模式时输入：set  all 来查看</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs858ka7avj30ig0kbn38.jpg\" alt=\"\" /></p>\n<h2 id=\"使用vi进行编辑的练习\"><a class=\"anchor\" href=\"#使用vi进行编辑的练习\">#</a> 使用 vi 进行编辑的练习</h2>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs858ka7avj30ig0kbn38.jpg\" alt=\"\" /></p>\n<h2 id=\"dos与linux换行符\"><a class=\"anchor\" href=\"#dos与linux换行符\">#</a> DOS 与 Linux 换行符</h2>\n<p><strong>在 DOS 使用的换行符为 ^M<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo separator=\"true\">,</mo><mtext>我们称为</mtext><mi>C</mi><mi>R</mi><mtext>与</mtext><mi>L</mi><mi>F</mi><mtext>两个符号。而在</mtext><mi>L</mi><mi>i</mi><mi>n</mi><mi>u</mi><mi>x</mi><mtext>中，则仅有</mtext><mi>L</mi><mi>F</mi><mtext>（</mtext></mrow><annotation encoding=\"application/x-tex\">,我们称为CR与LF两个符号。而在Linux中，则仅有LF（</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">我</span><span class=\"mord cjk_fallback\">们</span><span class=\"mord cjk_fallback\">称</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord cjk_fallback\">与</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord cjk_fallback\">两</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">符</span><span class=\"mord cjk_fallback\">号</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">而</span><span class=\"mord cjk_fallback\">在</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">x</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">则</span><span class=\"mord cjk_fallback\">仅</span><span class=\"mord cjk_fallback\">有</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord cjk_fallback\">（</span></span></span></span>）这个换行符。</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs858vh4mej30k20bfdir.jpg\" alt=\"\" /></p>\n<h2 id=\"本章与lpi的关系\"><a class=\"anchor\" href=\"#本章与lpi的关系\">#</a> 本章与 LPI 的关系</h2>\n<p><strong>注意事项：</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gs85astrx7j30kb05b3yz.jpg\" alt=\"\" /></p>\n<h1 id=\"认识bash-shell\"><a class=\"anchor\" href=\"#认识bash-shell\">#</a> 认识 Bash  Shell</h1>\n<h2 id=\"bash-shell\"><a class=\"anchor\" href=\"#bash-shell\">#</a> Bash Shell</h2>\n<h3 id=\"什么是shell\"><a class=\"anchor\" href=\"#什么是shell\">#</a> 什么是 Shell</h3>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gs85b3r880j30k802djrw.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gs85bbduhoj30e90hzq4u.jpg\" alt=\"\" /></p>\n<p><strong>通常，替我们工作的是硬件，而控制硬件的是核心。用户是利用 Shell 控制一些内核提供的工具，来控制硬件替我们正确工作。由于我们听不懂人类语言，而人类也没办法直接记住内核的语言，所以两者的沟通就要通过 Shell 来支持</strong></p>\n<h3 id=\"系统的shell与etcshells功能\"><a class=\"anchor\" href=\"#系统的shell与etcshells功能\">#</a> 系统的 shell 与 /etc/shells 功能</h3>\n<ul>\n<li>目前至少有下面几个可用的 shells:</li>\n</ul>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/c8e59f2ad4d82c3fc3ccaca3395c9fca\" alt=\"\" /></p>\n<h3 id=\"bash-shell-的功能\"><a class=\"anchor\" href=\"#bash-shell-的功能\">#</a> Bash Shell 的功能</h3>\n<ul>\n<li>命令记忆能力</li>\n</ul>\n<blockquote>\n<p>只要在命令行按上下键，就可以找到前一个输入的命令</p>\n</blockquote>\n<ul>\n<li>命令与文件补全功能</li>\n</ul>\n<blockquote>\n<p>【tab】接在一串命令的第一个字的后面，则为命令补全</p>\n</blockquote>\n<blockquote>\n<p>【tab】接在一串命令的第二个字以后时，则为文件补齐</p>\n</blockquote>\n<ul>\n<li>命令别名设置功能</li>\n</ul>\n<blockquote>\n<p>在命令行输入 alias，就可以知道当前的命令名有哪些了。也可以直接执行命令来设置别名：alias  lm = 'ls  -al'</p>\n</blockquote>\n<ul>\n<li>作业控制、前台、后台控制</li>\n</ul>\n<blockquote>\n<p>可以单一登录的环境中，达到多任务的目的</p>\n</blockquote>\n<ul>\n<li>Shell scripts 的强大功能</li>\n</ul>\n<blockquote>\n<p>可以将日常连续命令写成一个文件，该文件可以通过对话交互方式来进行主机的检测。也可以通过 shell 提供的环境变量及相关命令来进行设计</p>\n</blockquote>\n<ul>\n<li>通配符</li>\n</ul>\n<blockquote>\n<p>除了完整的字符串之外，bash 还支持许多通配符来帮助用户查询与执行命令</p>\n</blockquote>\n<h3 id=\"bash-shell的内置命令type\"><a class=\"anchor\" href=\"#bash-shell的内置命令type\">#</a> Bash Shell 的内置命令：type</h3>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/9d402ed527c82c219e3ee22578415338\" alt=\"\" /></p>\n<h3 id=\"执行命令\"><a class=\"anchor\" href=\"#执行命令\">#</a> 执行命令</h3>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/b3de6c937e8dab2326f8676e8a902891\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/6b0bf2ff9813838ae209fde29d74add2\" alt=\"\" /></p>\n<h2 id=\"shell的变量功能\"><a class=\"anchor\" href=\"#shell的变量功能\">#</a> Shell 的变量功能</h2>\n<p><strong>变量：变量就是以一组文字或字符，来替换一些设置或者是一串保留的数据</strong></p>\n<p><strong>ls 命令应该要用 /bin/ls 来执行，那为什么在任意路径下都可以执行 ls，而不需要指定路径？这是因为系统已经默认了一些搜索路径 PATH，所以当您执行一些命令的时候，系统就会根据据该 PATH 的设置来搜索命令，这个 PATH 就是一个变量，可以使用 echo 命令显示变量</strong></p>\n<h3 id=\"变量的获取与设置echo-变量设置规则-unset\"><a class=\"anchor\" href=\"#变量的获取与设置echo-变量设置规则-unset\">#</a> 变量的获取与设置：echo、变量设置规则、unset</h3>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/99594b1c8554311115c19148eab7ab68\" alt=\"\" /></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/f1f8473ad693c89ecef7295de38fbf48\" alt=\"\" /></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/fd5796399d45c7ab93f2ca0932b027df\" alt=\"\" /></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/64449865936cf910a33222a0cf7d509a\" alt=\"\" /></p>\n<blockquote>\n<p>在执行命令的过程中，引号（'）代表的含义是什么？</p>\n</blockquote>\n<blockquote>\n<p>在一串命令中，' 之内的命令将先执行，而其执行出来的结果将作为外部输入信息.</p>\n</blockquote>\n<h3 id=\"变量的用途\"><a class=\"anchor\" href=\"#变量的用途\">#</a> 变量的用途</h3>\n<p><strong>PATH 变量是我们在执行命令时所需要具备的命令搜索目录数据，没有它，就要使用绝对路径来执行命令</strong></p>\n<blockquote>\n<p>案例一：在 UNIX 中，要进行一些数值模式的仿真工作。由于数据量太大，为了怕日后忘记这个目录的内容与主要意义，所以文件名都取得很长，在执行模式的过程中，常切换目录，非常麻烦。所以我就设置几行目录名称成为一个 4 个字符的变量，只要输入 “cd  $VAR1” 命令，马上就移动到该路径下</p>\n</blockquote>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/eca28b7266b5e7f3d8a45c1938c8a0fd\" alt=\"\" /></p>\n<h3 id=\"环境变量的功能\"><a class=\"anchor\" href=\"#环境变量的功能\">#</a> 环境变量的功能</h3>\n<p>1. 环境变量的说明：env （查看变量）</p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/8fbb5f2ca68531ddfad0ec1be9fc30be\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/b9ff66241ab3f77b08d4b63217148b56\" alt=\"\" /></p>\n<p>2. 其他所有的变量说明：set</p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/afbbc605cdb561f02ab27dd4012b84ae\" alt=\"\" /></p>\n<p><strong>上面比较重要的变量</strong></p>\n<ul>\n<li>PSI：（提示符的设置）</li>\n</ul>\n<p><strong>下面列出了 FC4 的环境下，默认的 bash 的 PS1 变量内的特殊符号所代表的含义：</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/84c9f832edc099b7da47ea61dba27f49\" alt=\"\" /></p>\n<ul>\n<li>$：（关于 shell 的 PID）</li>\n</ul>\n<p>当前这个 shell 的进程号。即为 PID</p>\n<ul>\n<li>？：（上一个执行命令的回传码）</li>\n</ul>\n<p>上一个执行的命令所回传的值；当我们执行某些命令时，这些命令都会回传一个执行后的代码。如果成功地执行该命令，则会回传一个 0 值，如果执行过程发生错误，就会回传错误代码，通常以非 0 值来替换</p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/eef78cabfa9476eabc218158887c77af\" alt=\"\" /></p>\n<ul>\n<li>OSTYPE、HOSTTYPE、MACHYTYPE：（主机硬件与核心的等级）</li>\n</ul>\n<p>他们与程序的安装有关。在安装软件的时候，需要通过编译器将源码编译为二进制文件。但是，我们可以针对硬件设置进行编译的优化，就可以用到这些参数。例如当前主要的版本都是针对 i386 即最低等级的机器进行优化，这样才能安装在较高级的机器上，如果以 686 机型来优化，那么，就无法向下兼容。</p>\n<ul>\n<li>自定义变量转成环境变量：export</li>\n</ul>\n<p>export  变量：在引用他人的文件或其他程序时，如果忘记设置 export 的话，那么不同文件中的相同变量值，将需要一再重复设置。所以，只要在头一个文件使用 export，那么后续的文件引用时，将会把该变量内容读进来。如果仅下达 export 而没有变量，此时将会把所有的环境变量显示出来。</p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/be1e8d76162cb1b546a3f28251f61dd9\" alt=\"\" /></p>\n<h3 id=\"语系文件的变量\"><a class=\"anchor\" href=\"#语系文件的变量\">#</a> 语系文件的变量</h3>\n<p><strong>当我们使用 man command 的方式去查询某个数据的帮助文件时，该帮助文件的内容可能会因为我们使用的语系，而产生一些乱码。另外，利用 ls 查询文件的时间时，也可能会有乱码出现在时间部分。</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/74c2dbd13d61322e77dff93d85eecd11\" alt=\"\" /></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/80a0bae6ebcd312b433b71badd2ad6cb\" alt=\"\" /></p>\n<h3 id=\"变量的有效范围\"><a class=\"anchor\" href=\"#变量的有效范围\">#</a> 变量的有效范围</h3>\n<p><strong>如果在运行程序的时候，存在父程序与子程序的不同程序关系时，则变量可否被引用是与 export 有关的，被 export 后的变量，可以称它为环境变量。环境变量可以被子程序所引用，但是，其他的自定义变量内容就不会存在于子程序中。我们自行设置的变量，只在当前 shell 环境中存在，在子程序中将不会存在此变量，除非使用 export 将自定义变量变成环境变量。</strong></p>\n<p><strong>环境变量可以让子程序继续引用的原因：</strong></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/b7c1f43bbd37d8753e399f29c1738fe9\" alt=\"\" /></p>\n<h3 id=\"变量键盘读取-数组与声明read-array-declare\"><a class=\"anchor\" href=\"#变量键盘读取-数组与声明read-array-declare\">#</a> 变量键盘读取、数组与声明：read、array、declare</h3>\n<p>1.read：要读取来自键盘输入的变量</p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/d64b4fa434dd81c73e81a87c1e9d49a1\" alt=\"\" /></p>\n<p>2.declare/typeset: 声明变量的属性</p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/f583bc4a0059685df86912a014cf405a\" alt=\"\" /></p>\n<p>3.array：使用数组来声明一些变量</p>\n<p>数组的设置方式：var [index] = content</p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/9b13c22737f96c5b296872f440936b83\" alt=\"\" /></p>\n<h3 id=\"与文件系统及程序的限制关系ulimit\"><a class=\"anchor\" href=\"#与文件系统及程序的限制关系ulimit\">#</a> 与文件系统及程序的限制关系：ulimit</h3>\n<p><strong>为了防止系统不死机，我们的 Bash 是可以限制用户的某些系统资源的，包括可以打开的文件数量、可以使用的 CPU 实践、可以使用的内存总量</strong></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/bae0d67f9dcc5668ee7b429c937ce6d2\" alt=\"\" /></p>\n<h3 id=\"附加的变量设置功能\"><a class=\"anchor\" href=\"#附加的变量设置功能\">#</a> 附加的变量设置功能</h3>\n<p HOME=\"\">获取两种变量的方法：1.echo  $HOME;   2.echo  $</p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/4c9a3447021b1e9286d4763e572271a6\" alt=\"\" /></p>\n<h2 id=\"命令别名与历史命令\"><a class=\"anchor\" href=\"#命令别名与历史命令\">#</a> 命令别名与历史命令</h2>\n<h3 id=\"命令别名设置alias-unalias\"><a class=\"anchor\" href=\"#命令别名设置alias-unalias\">#</a> 命令别名设置：alias、unalias</h3>\n<p><strong>执行命令：</strong> alias  ls='ls -l | more'</p>\n<p><strong>查询当前命令别名：</strong> alias</p>\n<h3 id=\"历史命令history\"><a class=\"anchor\" href=\"#历史命令history\">#</a> 历史命令：history</h3>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/7059f9120b1d8e3fd6bcd668c4cb022e\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/e5fb092dc2441c9bc8b6591243831e00\" alt=\"\" /></p>\n<p>相关的功能：</p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/10de0eb917aaab86c3f3ec49fb91c9b6\" alt=\"\" /></p>\n<h2 id=\"bash-shell使用环境\"><a class=\"anchor\" href=\"#bash-shell使用环境\">#</a> Bash Shell 使用环境</h2>\n<h3 id=\"绝对路径与相对路径\"><a class=\"anchor\" href=\"#绝对路径与相对路径\">#</a> 绝对路径与相对路径</h3>\n<ul>\n<li>绝对路径：是指以根目录开始一直写到文件的一种命令方式</li>\n</ul>\n<blockquote>\n<p>当前在 /home/test 这个 test 用户的家目录中，想要看看里面的.bashrc 文件的数据，使用 more 命令，而这个命令在 /bin/more 中，执行命令的正确方法为：</p>\n</blockquote>\n<blockquote>\n<p>/bin/more  .bashrc</p>\n</blockquote>\n<ul>\n<li>相对路径：. 与.. 分别代表这个路径与上层路径</li>\n</ul>\n<blockquote>\n<p>我所在目录为 /home/test，然后我要使用 /bin/more 执行文件，并且使用相对路径的方法</p>\n</blockquote>\n<blockquote>\n<p>../../bin/more  .bashre</p>\n</blockquote>\n<h3 id=\"登录消息显示数据etcissue-etcmotd\"><a class=\"anchor\" href=\"#登录消息显示数据etcissue-etcmotd\">#</a> 登录消息显示数据:/etc/issue、/etc/motd</h3>\n<p>1./etc/issue</p>\n<p>终端接口（tty1-tty6）登录的时候，会有几行提示的字符串</p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/219de7a50262d2647d2c238b0c2319f7\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/35b52a990e06ba96b65c456443860f71\" alt=\"\" /></p>\n<p>2./etc/motd</p>\n<p>如果想让用户登录后获取一些消息，可以将消息加入 /etc/motd 中，当登录后，告诉登陆者，系统将会在某个固定时间进行维护工作</p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/213c2e7089a80662252c2ba700857c6b\" alt=\"\" /></p>\n<h3 id=\"环境设置文件bashrc-bashrc-profile-profile-etcinputrc-source\"><a class=\"anchor\" href=\"#环境设置文件bashrc-bashrc-profile-profile-etcinputrc-source\">#</a> 环境设置文件：bashrc、<sub>/.bashrc、</sub>/.profile、profile...、/etc/inputrc、source</h3>\n<p>1. 系统设置值</p>\n<ul>\n<li>/etc/sysconfig/i18n</li>\n</ul>\n<blockquote>\n<p>语系是由 i18n 维护的，而 FC4 默认的系统语系设置文件就在 /etc/sysconfig/i18n 中</p>\n</blockquote>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/0d2d438a6e49d4579f051168504b2dda\" alt=\"\" /></p>\n<ul>\n<li>/etc/profile</li>\n</ul>\n<blockquote>\n<p>这个文件设置了几个重要的变量，例如 “PATH、USER、MAIL、HOSTNAME、HISTSIZE、umask 等，同时也确定 /etc/inputrc 这个针对键盘热键设置的文件的数数据内容。可以在这里设置总体的 PATH 等信息。同时，这个文件也规划出 /etc/profile.d 及 /etc/inputrc 这两个目录与文件</p>\n</blockquote>\n<ul>\n<li>/etc/bashrc</li>\n</ul>\n<blockquote>\n<p>这个文件确定 umask 的功能，同时也确定了提示符的内容</p>\n</blockquote>\n<ul>\n<li>/etc/profile.d/*.sh</li>\n</ul>\n<blockquote>\n<p>针对 bash 及 C-shell 规范了一些数据。这个目录中针对颜色、语系、vim 及 which 等命令进行了一些附加设置</p>\n</blockquote>\n<ul>\n<li>/etc/man.config</li>\n</ul>\n<blockquote>\n<p>规定了使用 man 的时候，该去哪里查看数据的路径设置；</p>\n</blockquote>\n<p><strong>这就是系统在设置时常用的文件。通常设置完这几个文件之后，都要先注销再登录之后，设置才生效</strong></p>\n<p>2. 个人设置值</p>\n<ul>\n<li><sub>/.bash_profile,</sub>/.bash_login,~/.profile</li>\n</ul>\n<blockquote>\n<p>3 个文件只要一个，一般默认是以<sub> /.bash_profile 文件名存在。这个文件可以定义个性化的路径 PATH 与环境变量；bash 启动时，会先去读取</sub> /.bash_profile, 找不到时，就去读取<sub> /.bash_login, 然后才是</sub> /.profile</p>\n</blockquote>\n<ul>\n<li>~/.bashrc</li>\n</ul>\n<blockquote>\n<p>个性化设置都会写在这里。例如命令别名、路径等；在每次执行 shell 脚本的时候，都会重新读取这个文件，所以时最完整的，而～/.bash_profile 则只有登录时才读取一次</p>\n</blockquote>\n<ul>\n<li>~/.bash_history</li>\n</ul>\n<blockquote>\n<p>历史命令就记录再这里。而这个文件能够记录多少数据，则与 HISTSIZE 变量有关。每次登录 bash 后，bash 会先读取这个文件，将所有的历史命令读入内存，因此，当我们登录 bash 后，就可以查知上次使用过那些命令</p>\n</blockquote>\n<ul>\n<li>~/.bash_logout</li>\n</ul>\n<blockquote>\n<p>这个文件记录” 当我注销 bash 后，系统再帮我做完什么操作后才离开</p>\n</blockquote>\n<p><strong>登录 bash 的时候，这些设置文件是如何读取的</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/3d9e0e7ecbefd76b0b7d1be6d318ca91\" alt=\"\" /></p>\n<p>3. 登录 shell 与非登录 shell</p>\n<p><strong>所谓登录 shell，指的是当用户登录 Linux 系统时，所取得的那个 shell；当登录后，再去执行其他 shell 时，其他 shell 就是非登录 shell。</strong></p>\n<p><strong>登录与非登录 shell 的差异：当登录 Linux，即是取得的登陆 shell 时，会读取<sub> /.bash_profile、</sub>/bash_login、<sub>/.profile。至于取得登录 shell 后继续操作的其他非登录 shell，读取的就仅有</sub> /.bashrc。而大部分的 Linux 版本都会将<sub> /.bash_profile 的内容指到</sub> /.bashrc</strong></p>\n<h3 id=\"终端的环境设置stty-set\"><a class=\"anchor\" href=\"#终端的环境设置stty-set\">#</a> 终端的环境设置：stty、set</h3>\n<p>1.stty 设置终端的输入按键代表的意义</p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/ac9ec9f2352455dd269020dc6b0b52df\" alt=\"\" /></p>\n<p>2.set 设置整个命令输出 / 输入的环境</p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/191e334580b7706fa48137b0d4cb6dff\" alt=\"\" /></p>\n<h3 id=\"通配符与特殊符号\"><a class=\"anchor\" href=\"#通配符与特殊符号\">#</a> 通配符与特殊符号</h3>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/55340db6a52281e7c910b88c101bd811\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/2aadc6956359b1a67e1d4821e0a7c911\" alt=\"\" /></p>\n<p><em><em>最常见的就是</em>、？、【】、'</em>*</p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/a8d4b4b55258d94783d4cd3355b509cc\" alt=\"\" /></p>\n<h3 id=\"数据流重导向\"><a class=\"anchor\" href=\"#数据流重导向\">#</a> 数据流重导向</h3>\n<p><strong>就是将数据传到其他地方。数据流重导向就是将某个命令执行后应该要出现在屏幕上的数据，传输到其他方，例如文件或者设备</strong></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/e7f5339e64a4962ebf6cf6807981a02b\" alt=\"\" /></p>\n<p>执行命令时，这个命令可能会通过文件读入数据，经过处理之后，再将数据输出到屏幕</p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/c5ae5d2b09ee0390b1c1ae129a5728f0\" alt=\"\" /></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/e2249e476bd2d29b0092d6b27132ce89\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/b6c4a2e8c8710a7e704326eb6b475978\" alt=\"\" /></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/ca95d809ed6ff3da73f6aa83384602e0\" alt=\"\" /></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/dd7b91572fd950e1ba2a9a4a58c6ae8f\" alt=\"\" /></p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/60749b5c4b7bae7b3a0503096105331a\" alt=\"\" /></p>\n<h3 id=\"命令执行的判断依据\"><a class=\"anchor\" href=\"#命令执行的判断依据\">#</a> 命令执行的判断依据： ;、&amp;&amp;、||</h3>\n<ol>\n<li>;  : 用于执行多次命令</li>\n</ol>\n<p>sync; sync; shutdown  -h  now</p>\n<ol start=\"2\">\n<li>&amp;&amp;  : 当前的命令执行结果为正确（仅有标准输出）时，就可以接着执行后续命令，否则略过</li>\n</ol>\n<p>ls  /vbird   &amp;&amp;  touch   /vbird/test</p>\n<ol start=\"3\">\n<li>|| ：当前一个命令有错误时，才会执行 || 后面的命令</li>\n</ol>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/4178247df710d26addee2a9c8e652b20\" alt=\"\" /></p>\n<h2 id=\"管道命令pipe\"><a class=\"anchor\" href=\"#管道命令pipe\">#</a> 管道命令（pipe）</h2>\n<p><strong>管道命令 | 仅能处理通过前面一个命令传来的正确信息，也就是标准输出 STDOUT 的信息，对于标准错误、并没有直接处理的能力</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/26d61af51046bd69f67da7686b02ad68\" alt=\"\" /></p>\n<p>再每个管道的前后都是命令，后一个命令的输入是前一个命令的输出</p>\n<h3 id=\"选取命令cut-grep\"><a class=\"anchor\" href=\"#选取命令cut-grep\">#</a> 选取命令：cut、grep</h3>\n<p>1.cut：可以将一段消息的某段切出来。处理的消息是以行为单位</p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/662cd4bf5d2b0a02f94932877b1fa658\" alt=\"\" /></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/317cf1d098695ae32cfb061fe6122c03\" alt=\"\" /></p>\n<p>2.grep：分析一行消息，若其中有所需要的信息，就将该行取出</p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/6c626fd66bc650d356b05e468f6d7397\" alt=\"\" /></p>\n<h3 id=\"排序命令sort-wc-uniq\"><a class=\"anchor\" href=\"#排序命令sort-wc-uniq\">#</a> 排序命令：sort、wc、uniq</h3>\n<p>1.sort: 根据不同的数据类型来排序</p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/823f513ebdd8defcdf0bb437bbb94b29\" alt=\"\" /></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/bdf95ceff6b17ce4e94f14a0e17f9d52\" alt=\"\" /></p>\n<p>2.uniq：如果排序完成了，可以将重复的数据仅显示一次</p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/d318a443fef67bd8b6f8f9a10ac1dd8f\" alt=\"\" /></p>\n<p>3.wc：查询文件里有多少字，多少行，多少字符</p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/11a070cac063bf3d0ab4e3b31f9ba7b2\" alt=\"\" /></p>\n<h3 id=\"双向重导向tee\"><a class=\"anchor\" href=\"#双向重导向tee\">#</a> 双向重导向：tee</h3>\n<p><strong>将数据流分别送至文件和屏幕：而输出到屏幕的，其实就是 stdout，可以让下个命令继续处理</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/44ea2ab0fe95548d1ded005cbb7f927e\" alt=\"\" /></p>\n<p>在命令重导向的时候，如果要将数据发送到文件，屏幕上就不会出现任何数据。如果需要将数据同时显示在屏幕和文件中，这时就要使用 tee 命令。使用 last 可以查看这个月份的登录数据，而使用了 tee 之后，会将数据同时传给下一个命令去执行，也会将数据写 last.list 文件中</p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/6f5d068ad5b0dd0710dcb75f25fddb87\" alt=\"\" /><br />\n<img data-src=\"https://img03.sogoucdn.com/app/a/100520146/6f5d068ad5b0dd0710dcb75f25fddb87\" alt=\"\" /></p>\n<h3 id=\"字符转换命令tr-col-join-paste-expand\"><a class=\"anchor\" href=\"#字符转换命令tr-col-join-paste-expand\">#</a> 字符转换命令：tr、col、join、paste、expand</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEudHI=\">1.tr</span>：可以用来删除一段消息中的文字，或者是进行文字消息的替换</p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/a1d637ac39eb839131a37b619768c6ce\" alt=\"\" /></p>\n<p>2.col：可以用来将【tab】按键换成空格键</p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/d841a31b70bb0fff8eec39c4eb2251ae\" alt=\"\" /></p>\n<p>3.join：主要是在处理两个文件中，有相同数据的行，将他们加在一起</p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/7c39d4abf31fffc56fb090712036e1dc\" alt=\"\" /></p>\n<p>4.paste：直接将两行贴在一起，且中间以【tab】键隔开</p>\n<p><img data-src=\"https://img04.sogoucdn.com/app/a/100520146/3625a0eacc70d68d714654fdecb6f9d5\" alt=\"\" /></p>\n<p>5.expend：将【tab】按键转成空格键</p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/4134afcb52371e00b6eba901facddf34\" alt=\"\" /></p>\n<p><img data-src=\"https://img02.sogoucdn.com/app/a/100520146/c50fe0a6ba9123143f6d5a513978140a\" alt=\"\" /></p>\n<h3 id=\"拆分命令split\"><a class=\"anchor\" href=\"#拆分命令split\">#</a> 拆分命令：split</h3>\n<p><strong>如果文件太大，导致无法复制在便携设备中，可以使用 split，它可以将一个大文件、根据文件大小或行数来拆分，将大文件拆分为小文件</strong></p>\n<p><img data-src=\"https://img01.sogoucdn.com/app/a/100520146/1d42d0a6a2c638c32d06cd108adfc928\" alt=\"\" /></p>\n<h3 id=\"参数代换xargs\"><a class=\"anchor\" href=\"#参数代换xargs\">#</a> 参数代换：xargs</h3>\n<p><strong>args 则是 arguments 的意思。这是产生某个命令的参数的意思。xargs 可以读入是特定的数据，并且以空格符或换行符作为标识，将 stdin 的数据分隔成为参数</strong></p>\n<p><img data-src=\"https://img03.sogoucdn.com/app/a/100520146/ffa1279689d9746783bb27598114874c\" alt=\"\" /></p>\n<h3 id=\"减号-的用途\"><a class=\"anchor\" href=\"#减号-的用途\">#</a> 减号（-）的用途</h3>\n<p><strong>在管道命令中，常常会用到一个命令的 dtdout 作为这次的 stdin，某些命令需要用到文件名称来进行处理时，stdin 与 stdout 可以利用减号（-）来替代</strong></p>\n<p>tar  -cvf  -home   |   tar  -xvf  -</p>\n<h1 id=\"第十二章-正则表达式\"><a class=\"anchor\" href=\"#第十二章-正则表达式\">#</a> 第十二章 正则表达式</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<h3 id=\"什么是正则表达式\"><a class=\"anchor\" href=\"#什么是正则表达式\">#</a> 什么是正则表达式</h3>\n<p><strong>正则表达式就是处理字符串的方法，以行为单位进行字符串的处理，通过一些特殊符号的辅助，可以让用户轻松搜索 / 替换某特定字符串</strong></p>\n<h3 id=\"系统管理员使用正则表达式\"><a class=\"anchor\" href=\"#系统管理员使用正则表达式\">#</a> 系统管理员使用正则表达式</h3>\n<p><strong>系统的错误消息登录文件的内容记载了系统产生的信息，其中包含系统是否被入侵的记录数据，管理员就可以通过正则表达式，将登录信息进行处理，仅取出有问题的信息来进行分析</strong></p>\n<h3 id=\"正则表达式的广泛用途\"><a class=\"anchor\" href=\"#正则表达式的广泛用途\">#</a> 正则表达式的广泛用途</h3>\n<p><strong>正则表达式可以让系统管理员更为方便地管理主机，由于正则表达式强大的字符串处理能力，当前有许多软件都支持正则表达式。常见的就是邮件服务器</strong></p>\n<h3 id=\"正则表达式与shell在linux中的角色定位\"><a class=\"anchor\" href=\"#正则表达式与shell在linux中的角色定位\">#</a> 正则表达式与 Shell 在 Linux 中的角色定位</h3>\n<p><strong>正则表达式是 Linux 基础中的基础，不论是对系统的认识还是进行系统管理，它都会带来很大的帮助</strong></p>\n<h3 id=\"扩展的正则表达式\"><a class=\"anchor\" href=\"#扩展的正则表达式\">#</a> 扩展的正则表达式</h3>\n<p><strong>正则表达式除了简单的一组字符串处理之外，还可以进行用户组的字符串处理</strong></p>\n<h2 id=\"基础正则表达式\"><a class=\"anchor\" href=\"#基础正则表达式\">#</a> 基础正则表达式</h2>\n<p><strong>正则表达式是处理字符串的标准表达方式，它需要有支持的工具程序来辅助</strong></p>\n<h3 id=\"通过grep选取字符串\"><a class=\"anchor\" href=\"#通过grep选取字符串\">#</a> 通过 grep 选取字符串</h3>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grxpyboiayj30k508ydhh.jpg\" alt=\"\" /></p>\n<p><strong>grep 是很常见也很常用的命令，它最重要的功能就是进行字符串数据的比较，然后将符合用户需求的字符串打印出来；grep 除了可以进行文件的数据搜索之外，也常常应用在输入 / 输出的数据处理中</strong></p>\n<p>1. 例题一：搜索特定字符串</p>\n<p><strong>从文件中提取 the 字符串</strong></p>\n<ul>\n<li>grep -vn  'the'  regular_express.txt</li>\n</ul>\n<p><strong>取得的 the 字符串不考虑大小写</strong></p>\n<ul>\n<li>grep  -in  'the'  regular_express.txt</li>\n</ul>\n<p>2. 例题二：利用【】来搜索集合字符</p>\n<p><strong>搜索 test 或 taste 这两个单词，搜索他们共同的部分</strong></p>\n<ul>\n<li>grep  -n  't[ae]st'   regular_express.txt</li>\n</ul>\n<p><strong>如果像搜索 oo 的字符</strong></p>\n<ul>\n<li>grep -n 'oo' regular_express.txt</li>\n</ul>\n<p><strong>不想 oo 前面有 g，可利用反向【^】</strong></p>\n<ul>\n<li>grep  -n  '[^g]oo'   regular_express.txt</li>\n</ul>\n<p><strong>oo 前面不想有小写字母</strong></p>\n<ul>\n<li>grep -n '[^a-z]oo'  regular_express.txt</li>\n</ul>\n<p><strong>取得有数字的行</strong></p>\n<ul>\n<li>grep -n '[0-9]'  regular_express.txt</li>\n</ul>\n<p>3. 例题三：行首与行尾字符 ^$</p>\n<p><strong>如果想让 the 只在行首列出</strong></p>\n<ul>\n<li>grep  -n '^the' regular_express.txt</li>\n</ul>\n<p><strong>如果想列出开头是小写字母的哪一行</strong></p>\n<ul>\n<li>grep -n '<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>'  regular_express.txt</li>\n</ul>\n<p><strong>开头不想是英文字母</strong></p>\n<ul>\n<li>grep  -n  '<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>' regular_express.txt</li>\n</ul>\n<p><strong>找出行尾结束为小数点的行</strong></p>\n<ul>\n<li>grep -n '.$'  regular_express.txt</li>\n</ul>\n<p><strong>找出那行为空白行</strong></p>\n<ul>\n<li>grep -n '^$'  regular_express.txt</li>\n</ul>\n<p>4. 例题四：任意一个字符（.）与重复字符（*）</p>\n<p>1.（.）代表绝对一个任意字符</p>\n<p><strong>找出共有 4 个字符的 g??d</strong></p>\n<ul>\n<li>grep -n 'g..d'  regular_express.txt</li>\n</ul>\n<p>2.（*）重复 0 个或多个前面的 RE 字符</p>\n<p><strong>找出至少两个 o 以上的字符串，就需要</strong></p>\n<ul>\n<li>grep -n 'ooo*'  regular_express.txt</li>\n</ul>\n<p><strong>想要字符串开头与结尾都是 g，但是两个 g 之间仅能至少一个 o</strong></p>\n<ul>\n<li>grep -n 'go*g' regular_express.txt</li>\n</ul>\n<p>*<em> 如何得到 g...g (.<em> 代表零个或多个任意字符)</em></em></p>\n<ul>\n<li>grep  -n  'g.*g'  regular_express.txt</li>\n</ul>\n<p>5. 例题五：限定连续重复字符范围 {}</p>\n<p><strong>要找到两个 o 的字符串</strong></p>\n<ul>\n<li>grep -n 'o{2}'   regular_express.txt</li>\n</ul>\n<p><strong>找 g 后面接 2-5 个 o，然后再接一个 g 的字符串</strong></p>\n<ul>\n<li>grep -n 'go{2,5}g' regular_express.txt</li>\n</ul>\n<h3 id=\"重要特殊字符\"><a class=\"anchor\" href=\"#重要特殊字符\">#</a> 重要特殊字符</h3>\n<p><img data-src=\"https://www.hualigs.cn/image/60d92c0ec29ce.jpg\" alt=\"\" /><br />\n<img data-src=\"https://www.hualigs.cn/image/60d92c324770a.jpg\" alt=\"\" /></p>\n<h2 id=\"扩展正则表达式\"><a class=\"anchor\" href=\"#扩展正则表达式\">#</a> 扩展正则表达式</h2>\n<blockquote>\n<p>/#grep -v '^$'  regular_express.txt  |  grep  -v  '^#'</p>\n</blockquote>\n<blockquote>\n<p>/#egrep -v '<sup>$|</sup>#'  regular_express.txt</p>\n</blockquote>\n<blockquote>\n<p>使用支持扩展型正则表达式的 egrep 与特殊字符（|）来分隔两组字符串</p>\n</blockquote>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grtfm9ndx0j30l90icn14.jpg\" alt=\"\" /></p>\n<h2 id=\"格式化显示printf\"><a class=\"anchor\" href=\"#格式化显示printf\">#</a> 格式化显示：printf</h2>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grtfmc8nmoj30n10k2gqf.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grtfmc8nmoj30n10k2gqf.jpg\" alt=\"\" /></p>\n<h2 id=\"sed工具简介\"><a class=\"anchor\" href=\"#sed工具简介\">#</a> sed 工具简介</h2>\n<p><strong>sed 可以分析标准输入（STDIN）的数据，然后将数据经过处理后，再将它输出到标准输出（STDOUT）</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grtfmh3pzlj30j10nhgsf.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grtfmji3oyj30in0e9gpn.jpg\" alt=\"\" /></p>\n<h2 id=\"awk工具简介\"><a class=\"anchor\" href=\"#awk工具简介\">#</a> awk 工具简介</h2>\n<p><strong>与 sed 常常用于整行处理相比，awk 比较倾向于一行中分成数个字段来处理</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grtfmlw7o3j30nd0coadc.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grtfwxngabj30kx09m3z8.jpg\" alt=\"\" /></p>\n<h2 id=\"文件数据比较与显示的相关功能\"><a class=\"anchor\" href=\"#文件数据比较与显示的相关功能\">#</a> 文件数据比较与显示的相关功能</h2>\n<h3 id=\"文件比较\"><a class=\"anchor\" href=\"#文件比较\">#</a> 文件比较</h3>\n<p>1.diff（用于比较两个文件之间的不同，一般用于 ASCII 纯文本文件的比较）</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grtgsf42l5j30jt0awwgn.jpg\" alt=\"\" /></p>\n<p>2.cmp (主要是用于比较两个文件，用位为单位去比较，因此可以比较二进制文件)</p>\n<p><img data-src=\"https://www.hualigs.cn/image/60d57090d8bd1.jpg\" alt=\"\" /></p>\n<p>3.patch（将旧文件更新到新版内容）</p>\n<p><img data-src=\"https://www.hualigs.cn/image/60d570d567712.jpg\" alt=\"\" /></p>\n<h3 id=\"文件打印准备pr\"><a class=\"anchor\" href=\"#文件打印准备pr\">#</a> 文件打印准备：pr</h3>\n<p><img data-src=\"https://www.hualigs.cn/image/60d57147e5600.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>上面第一行就是使用 pr 处理后所形成的标题</p>\n</blockquote>\n<h2 id=\"重点回顾\"><a class=\"anchor\" href=\"#重点回顾\">#</a> 重点回顾</h2>\n<p><img data-src=\"https://www.hualigs.cn/image/60d5718760641.jpg\" alt=\"\" /></p>\n<h1 id=\"第十三章-学习shell脚本\"><a class=\"anchor\" href=\"#第十三章-学习shell脚本\">#</a> 第十三章   学习 Shell 脚本</h1>\n<h2 id=\"什么是shell脚本\"><a class=\"anchor\" href=\"#什么是shell脚本\">#</a> 什么是 Shell 脚本</h2>\n<p><strong>shell 是命令行界面下让我们与系统沟通的工具接口；最简单的功能就是将许多命令写在一起，让用户执行一次就能够执行多个命令；由于这个程序语言由于利用 shell 与相关工具命令，所以不需要编译即可执行；</strong></p>\n<h3 id=\"为什么学习shell脚本\"><a class=\"anchor\" href=\"#为什么学习shell脚本\">#</a> 为什么学习 shell 脚本</h3>\n<ul>\n<li>\n<p>自动化管理的重要依据：编写一个简单程序每日自动处理分析，等有问题才通知您</p>\n</li>\n<li>\n<p>追踪与管理系统的重要工作：Linux 系统服务启动的接口，在 /etc/init.d/ 目录下，所有文件都是脚本；包括引导过程也都是利用 shell 脚本来搜索系统的相关数据，然后再代入各个服务的设置参数；</p>\n</li>\n<li>\n<p>简单的入侵检测功能：当系统有异常现象时，将这些异常现象记录在系统记录器，可以在固定几分钟内主动去分析系统登录文件。</p>\n</li>\n<li>\n<p>连续命令单一化：将在命令行连续执行的命令写入脚本，通过直接执行脚本来启动一连串的命令行命令；</p>\n</li>\n<li>\n<p>简单的数据处理：可以用 shell 脚本比较数据文件，处理文字数据等；</p>\n</li>\n<li>\n<p>跨平台支持与缩短学习历程：几乎所有类 UNIX 机器上都可以运行 shell 脚本</p>\n</li>\n</ul>\n<h3 id=\"第一个脚本的编写与执行\"><a class=\"anchor\" href=\"#第一个脚本的编写与执行\">#</a> 第一个脚本的编写与执行</h3>\n<p><img data-src=\"https://www.hualigs.cn/image/60d57218b4b2a.jpg\" alt=\"\" /></p>\n<p><strong>执行 shell 文件</strong><br />\n<img data-src=\"https://www.hualigs.cn/image/60d5724c0180b.jpg\" alt=\"\" /></p>\n<p><strong>第一行：#!/bin/bash 在声明这个脚本使用的 shell 名称：使用的是 bash；</strong></p>\n<p><strong>除了 #！是用来声明 shell 的之外，其他的 #都是注释。</strong></p>\n<p><strong>第六行：主要变量的声明</strong></p>\n<p><strong>第七行为主要程序部分：</strong></p>\n<p><strong>第八行为告知执行结果：使用 exit 命令让程序中断</strong></p>\n<h3 id=\"编写shell简本的良好习惯\"><a class=\"anchor\" href=\"#编写shell简本的良好习惯\">#</a> 编写 Shell 简本的良好习惯</h3>\n<p><img data-src=\"https://www.hualigs.cn/image/60d57276b6994.jpg\" alt=\"\" /></p>\n<h2 id=\"简单的shell脚本练习\"><a class=\"anchor\" href=\"#简单的shell脚本练习\">#</a> 简单的 Shell 脚本练习</h2>\n<p>1. 变量内容由用户决定</p>\n<p><strong>利用 read 输入变量内容，利用 $ 变量声明来读取文件</strong><br />\n<img data-src=\"https://www.hualigs.cn/image/60d572a80a0c4.jpg\" alt=\"\" /></p>\n<p>2. 利用 date 建立文件</p>\n<p><img data-src=\"https://www.hualigs.cn/image/60d572cd3e777.jpg\" alt=\"\" /></p>\n<p>3. 数值运算的方法 (+-*/%)</p>\n<p>** 使用方式：var = $((运算内容)) **</p>\n<p><img data-src=\"https://www.hualigs.cn/image/60d572e38cf6b.jpg\" alt=\"\" /></p>\n<h2 id=\"善用判断条件\"><a class=\"anchor\" href=\"#善用判断条件\">#</a> 善用判断条件</h2>\n<p><strong>可通过 &amp;&amp; 及 || 来确定前一个命令是否成功执行；也可通过 test 命令来检测；或者利用 ls 来执行，然后以 $？判断执行结果</strong></p>\n<h3 id=\"使用test命令的测试功能\"><a class=\"anchor\" href=\"#使用test命令的测试功能\">#</a> 使用 test 命令的测试功能</h3>\n<p><strong>text 并不会显示任何消息</strong></p>\n<ul>\n<li>#text -e /dmtsai  &amp;&amp;  echo &quot;exist&quot;  ||  echo &quot;no exist&quot;</li>\n</ul>\n<p><strong>测试 /dmtsai 目录是否存在</strong></p>\n<p><img data-src=\"https://www.hualigs.cn/image/60d5731534cab.jpg\" alt=\"\" /><br />\n<img data-src=\"https://www.hualigs.cn/image/60d5731b1623c.jpg\" alt=\"\" /><br />\n<img data-src=\"https://www.hualigs.cn/image/60d573248961d.jpg\" alt=\"\" /><br />\n<img data-src=\"https://www.hualigs.cn/image/60d573684bdd6.jpg\" alt=\"\" /></p>\n<h3 id=\"使用判断符号\"><a class=\"anchor\" href=\"#使用判断符号\">#</a> 使用判断符号【】</h3>\n<p><img data-src=\"https://www.hualigs.cn/image/60d573c69d296.jpg\" alt=\"\" /></p>\n<p>注意事项：</p>\n<p><img data-src=\"https://www.hualigs.cn/image/60d574365580f.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://www.hualigs.cn/image/60d57431d508a.jpg\" alt=\"\" /></p>\n<h3 id=\"shell脚本的默认变量0-1\"><a class=\"anchor\" href=\"#shell脚本的默认变量0-1\">#</a> Shell 脚本的默认变量（$0、$1...）</h3>\n<p>变量对应关系</p>\n<p><img data-src=\"https://www.hualigs.cn/image/60d574365580f.jpg\" alt=\"\" /></p>\n<p><strong>执行的文件名为 $0 变量，第一个参数是 $1, 只要在脚本里好好使用 $1，就可以很简单地立即执行某些命令。</strong></p>\n<p>例：要执行一个脚本，该脚本会自动列出自己的文件名，还有后面的前 3 个参数</p>\n<p><img data-src=\"https://www.hualigs.cn/image/60d574619fe1c.jpg\" alt=\"\" /></p>\n<h2 id=\"条件判断\"><a class=\"anchor\" href=\"#条件判断\">#</a> 条件判断</h2>\n<h3 id=\"使用ifthen\"><a class=\"anchor\" href=\"#使用ifthen\">#</a> 使用 if...then</h3>\n<p>1. 条件判断</p>\n<p><img data-src=\"https://www.hualigs.cn/image/60d5773474ee7.jpg\" alt=\"\" /><br />\n<img data-src=\"https://www.hualigs.cn/image/60d577464f0ef.jpg\" alt=\"\" /><br />\n<img data-src=\"https://www.hualigs.cn/image/60d5775b29c45.jpg\" alt=\"\" /><br />\n<img data-src=\"https://www.hualigs.cn/image/60d5775f9ef75.jpg\" alt=\"\" /><br />\n<img data-src=\"https://www.hualigs.cn/image/60d5776f3f055.jpg\" alt=\"\" /></p>\n<p>2.netstat: 查询当前主机是否有打开的网络服务端口</p>\n<p>netstat-tuln：来获取当前主机启动的服务</p>\n<p><img data-src=\"https://www.hualigs.cn/image/60d57856ce052.jpg\" alt=\"\" /></p>\n<p>测试端口：<br />\n<img data-src=\"https://www.hualigs.cn/image/60d578861aeb8.jpg\" alt=\"\" /></p>\n<h3 id=\"使用caseesac\"><a class=\"anchor\" href=\"#使用caseesac\">#</a> 使用 case...esac</h3>\n<p><img data-src=\"https://www.hualigs.cn/image/60d5802453039.jpg\" alt=\"\" /><br />\n<img data-src=\"https://www.hualigs.cn/image/60d5801573aa3.jpg\" alt=\"\" /></p>\n<ul>\n<li>\n<p>直接执行时：<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1zY3JpcHQtOXAzajU1MnUuc2g=\">利用 script.sh</span>  variable 的方式来直接给 $1 变量赋以内容</p>\n</li>\n<li>\n<p>交互式：通过 read 命令让用户输入变量的内容</p>\n</li>\n</ul>\n<p><img data-src=\"https://www.hualigs.cn/image/60d581c6e3d25.jpg\" alt=\"\" /></p>\n<h3 id=\"使用函数功能\"><a class=\"anchor\" href=\"#使用函数功能\">#</a> 使用函数功能</h3>\n<p><strong>函数：在 shell 脚本中类似于自定义的执行命令，可以简化很多程序代码</strong></p>\n<p><img data-src=\"https://www.hualigs.cn/image/60d58204728ff.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://www.hualigs.cn/image/60d582092d7ac.jpg\" alt=\"\" /></p>\n<h2 id=\"循环判断\"><a class=\"anchor\" href=\"#循环判断\">#</a> 循环判断</h2>\n<h3 id=\"while-do-done-until-do-done\"><a class=\"anchor\" href=\"#while-do-done-until-do-done\">#</a> while  do  done 、 until  do  done</h3>\n<p>1.while  do  done (当条件成立时，就进行循环，直到条件不成立才停止)</p>\n<p>2.until  do  done (当条件成立时，就终止循环，否则就继续执行循环的程序段)</p>\n<p><img data-src=\"https://www.hualigs.cn/image/60d582390a386.jpg\" alt=\"\" /></p>\n<p>例：</p>\n<ol>\n<li></li>\n</ol>\n<p><img data-src=\"https://www.hualigs.cn/image/60d5824ed7243.jpg\" alt=\"\" /></p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<p><img data-src=\"https://www.hualigs.cn/image/60d58257de854.jpg\" alt=\"\" /></p>\n<ol start=\"3\">\n<li></li>\n</ol>\n<p><img data-src=\"https://www.hualigs.cn/image/60d5827f2631a.jpg\" alt=\"\" /></p>\n<h3 id=\"fordodone\"><a class=\"anchor\" href=\"#fordodone\">#</a> for...do...done</h3>\n<p><strong>定义</strong><br />\n<img data-src=\"https://www.hualigs.cn/image/60d58408d8add.jpg\" alt=\"\" /></p>\n<p>例：</p>\n<p>1. 分别输出 dog,cat,elephant<br />\n<img data-src=\"https://www.hualigs.cn/image/60d5842748971.jpg\" alt=\"\" /></p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<p><img data-src=\"https://www.hualigs.cn/image/60d584301a3fe.jpg\" alt=\"\" /></p>\n<h2 id=\"shell脚本的追踪与调试\"><a class=\"anchor\" href=\"#shell脚本的追踪与调试\">#</a> Shell 脚本的追踪与调试</h2>\n<p><img data-src=\"https://www.hualigs.cn/image/60d58521b8414.jpg\" alt=\"\" /></p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>a-z <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>a-zA-Z <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/06/24/%E9%80%9A%E4%BF%A1%E7%B1%BB/5/",
            "url": "https://theprofessor249.github.io/2021/06/24/%E9%80%9A%E4%BF%A1%E7%B1%BB/5/",
            "title": "通信类",
            "date_published": "2021-06-24T07:43:37.628Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/06/24/%E8%8B%B1%E8%AF%AD%E7%B1%BB/6/",
            "url": "https://theprofessor249.github.io/2021/06/24/%E8%8B%B1%E8%AF%AD%E7%B1%BB/6/",
            "title": "英语类",
            "date_published": "2021-06-24T07:43:37.622Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/06/24/ubuntu/1/",
            "url": "https://theprofessor249.github.io/2021/06/24/ubuntu/1/",
            "title": "ubuntu",
            "date_published": "2021-06-24T07:43:37.617Z",
            "content_html": "<p><strong>我喜欢你，是真的很喜欢</strong></p>\n<ul>\n<li>\n<p>撒旦发射点</p>\n</li>\n<li>\n<p>打发士大夫</p>\n</li>\n</ul>\n<p><code>#include </code></p>\n<h2 id=\"sdfsdfaf\"><a class=\"anchor\" href=\"#sdfsdfaf\">#</a> sdfsdfaf</h2>\n<h2 id=\"sdfadfasd\"><a class=\"anchor\" href=\"#sdfadfasd\">#</a> sdfadfasd</h2>\n<h3 id=\"sadfasdfasd\"><a class=\"anchor\" href=\"#sadfasdfasd\">#</a> sadfasdfasd</h3>\n<p>sdfasdf</p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/06/24/%E6%97%A5%E8%AE%B0/3/",
            "url": "https://theprofessor249.github.io/2021/06/24/%E6%97%A5%E8%AE%B0/3/",
            "title": "日记",
            "date_published": "2021-06-24T07:43:37.612Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/06/24/%E6%96%87%E7%8C%AE%E7%A5%9E%E5%99%A8/4/",
            "url": "https://theprofessor249.github.io/2021/06/24/%E6%96%87%E7%8C%AE%E7%A5%9E%E5%99%A8/4/",
            "title": "文献神器",
            "date_published": "2021-06-24T07:43:37.607Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/06/24/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B1%BB/2/",
            "url": "https://theprofessor249.github.io/2021/06/24/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B1%BB/2/",
            "title": "嵌入式",
            "date_published": "2021-06-24T07:43:37.602Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/06/24/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%20%20%20%20Linux%E6%96%87%E4%BB%B6%EF%BC%8C%E7%9B%AE%E5%BD%95%E4%B8%8E%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F/",
            "url": "https://theprofessor249.github.io/2021/06/24/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%20%20%20%20Linux%E6%96%87%E4%BB%B6%EF%BC%8C%E7%9B%AE%E5%BD%95%E4%B8%8E%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F/",
            "title": "第二部分    Linux文件，目录与磁盘格式",
            "date_published": "2021-06-24T06:19:15.897Z",
            "content_html": "<h1 id=\"linux的文件属性与目录配置\"><a class=\"anchor\" href=\"#linux的文件属性与目录配置\">#</a> Linux 的文件属性与目录配置</h1>\n<h2 id=\"用户与用户组\"><a class=\"anchor\" href=\"#用户与用户组\">#</a> 用户与用户组</h2>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grk7lop27hj30jj0bpjsi.jpg\" alt=\"\" /></p>\n<p><strong>文件拥有者</strong>，<strong>用户组</strong>，<strong>其他人</strong></p>\n<blockquote>\n<p>任何一个文件都具有用户，用户组和其他人 3 个权限</p>\n</blockquote>\n<blockquote>\n<p>所有系统账号与一般身份用户，以及 root 的相关信息，都记录在 <strong>/etc/passwd</strong> 文件内；密码记录在 <strong>/etc/shadow</strong> 文件中；所有用户组名称都记录在 <strong>/etc/group</strong> 内</p>\n</blockquote>\n<h2 id=\"linux文件权限\"><a class=\"anchor\" href=\"#linux文件权限\">#</a> Linux 文件权限</h2>\n<p>ls   -al：查看文件所有属性<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grk7wloeymj30l004vmxw.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grk7wgv2xwj30il06rdgb.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grk7ygpa3jj30n30fpmzo.jpg\" alt=\"\" /></p>\n<h2 id=\"更改文件权限\"><a class=\"anchor\" href=\"#更改文件权限\">#</a> 更改文件权限</h2>\n<blockquote>\n<p>chgrp: 改变文件所属用户组</p>\n</blockquote>\n<blockquote>\n<p>chown: 改变文件拥有者</p>\n</blockquote>\n<blockquote>\n<p>chmod: 改变文件的属性，SUID 等特性</p>\n</blockquote>\n<blockquote>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grk89p1b1hj30m70ouq72.jpg\" alt=\"\" /></p>\n</blockquote>\n<h2 id=\"文件类型与扩展名\"><a class=\"anchor\" href=\"#文件类型与扩展名\">#</a> 文件类型与扩展名</h2>\n<p><strong>文件类型</strong></p>\n<blockquote>\n<p>普通文件：** 纯文本文件（ASCII）** 可以直接读取的数据；<strong>二进制文件（binary）</strong>: 系统仅执行二进制文件；** 数据格式的文件：** 会读取某些特定格式的文件</p>\n</blockquote>\n<blockquote>\n<p>目录：第一个属性为【d】</p>\n</blockquote>\n<blockquote>\n<p>连接文件：第一个属性为【l】</p>\n</blockquote>\n<blockquote>\n<p>设备与设备文件： <strong>块设备文件：</strong> 就是存储数据以供系统访问的接口设备，简单而言就是硬盘； <strong>字符设备文件：</strong> 即串口端口的接口设备</p>\n</blockquote>\n<blockquote>\n<p>套接字：用在网络数据连接。启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信。第一个属性为【s】，通常在 /var/run 目录中看到这种类型。</p>\n</blockquote>\n<blockquote>\n<p>管道：用于解决多个程序同时访问一个文件造成的错误。第一个属性为 p</p>\n</blockquote>\n<p><strong>扩展名</strong></p>\n<blockquote>\n<p>【*.sh】处理文件（scripts，脚本），处理文件使用 shell 写成</p>\n</blockquote>\n<blockquote>\n<p>[<em>.tar].[<em>tar.gz];[</em>.zip];[</em>.tgz] 经过打包的压缩文件。压缩软件为 gunzip，tar 等，根据不同的压缩软件而取其相关的扩展名</p>\n</blockquote>\n<blockquote>\n<p>[<em>.html]; [</em>.php] 网页相关文件，分别表示 HTML 语法与 PHP 语法的网页文件。html 文件可使用网页浏览器直接打开，php 的文件则可以通过客户端的浏览器来浏览服务器端，已得到运算后的网页结果。</p>\n</blockquote>\n<p><strong>文件名</strong></p>\n<blockquote>\n<p>通常用 [_] 与数字和字母构成</p>\n</blockquote>\n<ul>\n<li>Linux 目录配置</li>\n</ul>\n<p><strong>绝对路径：</strong> 由根目录（/）开始写起的文件名或目录名称；</p>\n<p><strong>相对路径：</strong> 只要开头不是（/）就属于相对路径</p>\n<p><strong>.  ：</strong> 表示当前目录，也可使用./ 来表示</p>\n<p><strong>.. :</strong> 表示上一层目录，也可使用../ 来表示</p>\n<p><strong>各层目录</strong><br />\n<img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grkzqsfvmej30kl0g33zf.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grl1m16v9fj31970lz76d.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grl1mbjwzej31180g6wfg.jpg\" alt=\"\" /><br />\n<strong>各层目录存放的文件</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grl09yhdw2j30o30ev43c.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grl0a0nd0uj30n40l6jy9.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grl09zbar1j30n50c5n1e.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grl0a297cvj30nd0j0tfq.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grl09xbks7j30n80citd2.jpg\" alt=\"\" /></p>\n<p><strong>注意事项：</strong></p>\n<p>/etc/passwd 密码存放</p>\n<p>/etc/shadow 账号存放</p>\n<p>/etc/sysconfig/*  启动时用到的各项设置值</p>\n<p>/var/spool/mail   邮件暂存数据</p>\n<blockquote>\n<p>Windows 与 Linux 安装在同一个硬盘的不同分区时，windows 将不能使用 Linux 的硬盘数据，因为 windows 的核心不认识 Linux 的文件系统</p>\n</blockquote>\n<blockquote>\n<p>windows98 默认的文件系统时 FAT，windows2000 有 NTFS 文件系统，Linux 的正统文件系统则为 ext2</p>\n</blockquote>\n<blockquote>\n<p>整个 Linux 系统都通过虚拟文件系统交换（Virtual Fliesystem Switch,VFS）的核心功能去读取文件系统。也就是说，整个 Linux 认识的文件系统其实都是 VFS 在管理，用户不需要知道分区的文件系统，VFS 会主动帮我们做好读取操作。</p>\n</blockquote>\n<h1 id=\"linux文件和目录管理\"><a class=\"anchor\" href=\"#linux文件和目录管理\">#</a> Linux 文件和目录管理</h1>\n<h2 id=\"目录与路径-cd-是change-directory\"><a class=\"anchor\" href=\"#目录与路径-cd-是change-directory\">#</a> 目录与路径 ## （cd   是 Change Directory）</h2>\n<ol>\n<li></li>\n</ol>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grl2shmmyjj30fb04374l.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grl2z4j252j30k7092q4w.jpg\" alt=\"\" /></p>\n<p>2.pwd（显示当前所在目录）Print Working Directory</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grl33zpfkaj30mo09atak.jpg\" alt=\"\" /></p>\n<p>3.mkdir (建立新目录) make directory<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grl37u9do5j30ly0bq0vo.jpg\" alt=\"\" /></p>\n<p>4.rmdir (删除空目录)<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grl3ccgptdj30mt09j0uh.jpg\" alt=\"\" /><br />\n rmdir 仅能删除空的目录</p>\n<p>5.$PATH（执行文件路径的变量）</p>\n<blockquote>\n<p>在执行命令时，系统会按照 PATH 的设置，去每个 PATH 定义的路径下搜索执行文件，先搜索到的命令先执行<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grl3jy53f5j30n30230sw.jpg\" alt=\"\" /></p>\n</blockquote>\n<p>ls 命令在 /bin/ls 中，/bin 又在 PATH 的设置中。所以可以找到 ls</p>\n<h2 id=\"管理文件与目录\"><a class=\"anchor\" href=\"#管理文件与目录\">#</a> 管理文件与目录</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEubHM=\">1.ls</span>（查看文件和目录）<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grl3pis09pj30mq0ern1m.jpg\" alt=\"\" /></p>\n<p>2.cp（复制文件或目录）copy</p>\n<p>-f： 强制</p>\n<p>-l： 建立硬链接</p>\n<p>-u： 比较文件的新旧</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grl3va99r8j30l60m545d.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grl3v7xfxrj30la0bbad4.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grl3x0f477j30nc0d20wc.jpg\" alt=\"\" /></p>\n<p>3.rm（删除文件或目录）remove<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grl44zc9mqj30me0hvjty.jpg\" alt=\"\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzQubXY=\">4.mv</span>（移动文件与目录，或重命名）move<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grl4a123hfj30m20ffgpg.jpg\" alt=\"\" /></p>\n<h2 id=\"查看文件内容\"><a class=\"anchor\" href=\"#查看文件内容\">#</a> 查看文件内容</h2>\n<p>1.cat（concatenate）</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grl4ff28itj30m40gq76z.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>一般环境，显示出来的结果有【tab】与空格键，其实看不出来，所以使用 cat   -A，一些特殊福豪就会显示出来</p>\n</blockquote>\n<p>2.tac (反向显示)</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grl8n45n32j30ne05kmy7.jpg\" alt=\"\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzMubmw=\">3.nl</span>（显示时添加行号）</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grl8p5ncsxj30lm0dcjty.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grl8p0t0ngj30lr0970u0.jpg\" alt=\"\" /></p>\n<p>4.more（一页一页翻动）</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grl8smuffwj30mf03faat.jpg\" alt=\"\" /></p>\n<p>5.less（一页一页翻动）</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grl8tql5e6j30ml05hab1.jpg\" alt=\"\" /></p>\n<p>6.head（取出前几行）</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grl8vdaie1j30ma05kjs2.jpg\" alt=\"\" /></p>\n<p>7.tail（取出后几行）</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grl8wajlwmj30mc059dgj.jpg\" alt=\"\" /></p>\n<p>8.od（非纯文本文件）</p>\n<blockquote>\n<p>由于执行文件通常是二进制文件，使用前面提到的命令来读取它的内容时，会产生乱码，我们可以利用 od 这个命令来读取。</p>\n</blockquote>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grl8xlub9bj30ly0amgo8.jpg\" alt=\"\" /></p>\n<p>9.touch（修改文件时间与创建新文件）</p>\n<blockquote>\n<p>modification time (mtime 修改时间)：当该文件的内容数据更改时，就会更新这个时间。内容数据指的是文件的内容，而不是文件的属性。</p>\n</blockquote>\n<blockquote>\n<p>status time (ctime 状态时间)：当该文件的状态改变时，就会更新这个时间。</p>\n</blockquote>\n<blockquote>\n<p>access time (atime 访问时间)：当读取文件内容时，就会更新这个读取时间。</p>\n</blockquote>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grl98q83frj30m60m8grp.jpg\" alt=\"\" /></p>\n<h2 id=\"文件与目录的默认权限与隐藏权限\"><a class=\"anchor\" href=\"#文件与目录的默认权限与隐藏权限\">#</a> 文件与目录的默认权限与隐藏权限</h2>\n<p>1.umask（文件默认权限）该默认值需要减掉的权限</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grl9kkb6emj30m9032mx6.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>一般 umask 是用于减法，002 相当于在原本权限的基础上去掉其他人权限的写</p>\n</blockquote>\n<blockquote>\n<p>r , w , x</p>\n</blockquote>\n<blockquote>\n<p>4 , 2 , 1</p>\n</blockquote>\n<p>2.chattr (设置文件隐藏属性)</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grl9tv2rnej30lz0eswj8.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>这些属性是隐藏的，所以需要用 lsattr 才能看到</p>\n</blockquote>\n<blockquote>\n<p>最重要的是 + i 属性，因为它可以让一个文件无法被更改，对于需要很高系统安全性的用户来说，相当重要；如果是登入文件，就需要 + a 参数，使之可以增加但不能修改与删除原有的数据</p>\n</blockquote>\n<p>3.lsattr（显示文件的隐藏属性）</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grl9z851b3j30m205lwf4.jpg\" alt=\"\" /></p>\n<p>4.SUID/SGID/Sticky Bit (文件特殊权限)</p>\n<blockquote>\n<p>Set UID：当 s 权限在 user 的 x 时，也就是类似 - r-s--x--x, 称为 Set UID，简称为 SUID，这个 UID 表示 User 的 ID，而 User 表示这个程序（/usr/bin/paddwd）的拥有者 (root);SUID 仅可用于二进制文件，因为 SUID 是程序在执行过程中拥有文件拥有者的权限，因此，它仅可用二进制文件，不能用在批处理文件（shell 脚本）上，shell 脚本知识调用很多二进制文件而已； SUID 对目录是无效的。</p>\n</blockquote>\n<blockquote>\n<p>Set GID：** 文件：** 如果设置在二进制文件上，在执行该程序时，它的有效用户组将会变成该程序的用户组所有者；** 目录：** 如果设置到目录内，该目录的文件或目录的用户组都将会变成该程序的用户组所有者；</p>\n</blockquote>\n<blockquote>\n<p>Sticky Bit：只针对目录有效，对文件没有效果；将目录加上 SBit 的权限，则用户只能够<strong>针对自己建立的文件或目录</strong>进行删除 / 重命名 / 移动等操作，对其他人创建的不能操作。</p>\n</blockquote>\n<blockquote>\n<p>4 为 SUID</p>\n</blockquote>\n<blockquote>\n<p>2 为 SGID</p>\n</blockquote>\n<blockquote>\n<p>1 为 Sticky Bit</p>\n</blockquote>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grlb0jy7zdj30m40cujsq.jpg\" alt=\"\" /></p>\n<p>5.file（文件类型）查询是属于 ASCII，数据文件，二进制文件，是否使用到冬天函数库等信息</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grlb0jy7zdj30m40cujsq.jpg\" alt=\"\" /></p>\n<h2 id=\"搜索文件\"><a class=\"anchor\" href=\"#搜索文件\">#</a> 搜索文件</h2>\n<p>1.which（寻找执行文件）</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grlbveq130j30m505n750.jpg\" alt=\"\" /></p>\n<p>2.whereis（寻找特定文件）</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grlbw3tur0j30m40am0ur.jpg\" alt=\"\" /></p>\n<p>3.locate（寻找文件的部分名称）</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grlbx1v0v5j30me04r3z5.jpg\" alt=\"\" /></p>\n<p>4.find（查找特定参数的文件）</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grlbziunxyj30lx0l3wlu.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grlc0nao8mj30ku02mgm2.jpg\" alt=\"\" /></p>\n<h1 id=\"linux磁盘与文件系统管理\"><a class=\"anchor\" href=\"#linux磁盘与文件系统管理\">#</a> Linux 磁盘与文件系统管理</h1>\n<h2 id=\"认识ext2文件系统\"><a class=\"anchor\" href=\"#认识ext2文件系统\">#</a> 认识 EXT2 文件系统</h2>\n<h3 id=\"硬盘物理组成\"><a class=\"anchor\" href=\"#硬盘物理组成\">#</a> 硬盘物理组成</h3>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grlcgzplecj309s07kdg5.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grlch4dvflj30m60d1wfv.jpg\" alt=\"\" /></p>\n<h3 id=\"分区\"><a class=\"anchor\" href=\"#分区\">#</a> 分区</h3>\n<blockquote>\n<p>为什么要分区，因为我们必须要告诉操作系统：这块硬盘可以访问的区域是由 A 柱面到 B 柱面，如此一来，操作系统才能够控制硬盘磁头去 A~B 范围内的柱面访问数据；<strong>分区的要点：就是记录每一个分区的起始与结束柱面</strong>；MBR 就是在一块硬盘的第 0 轨上，这也是计算机启动之后要去使用硬盘时必须读取的第一个区域。这个区域内记录了硬盘里的所有分区信息，以及启动时可以写入引导程序的位置。当一个硬盘的 MBR 坏掉时，这个硬盘也算寿终正寝了。</p>\n</blockquote>\n<h3 id=\"文件系统\"><a class=\"anchor\" href=\"#文件系统\">#</a> 文件系统</h3>\n<blockquote>\n<p>硬盘的最小存储单位是扇区，而数据所存储的最小单位并不是扇区，因为用扇区来存储效率低，为了提高效率，引入逻辑块，逻辑块是在分区进行文件系统的格式化时所指定的最小存储单位（以扇区大小为基础），块的大小为扇区的 2^n 倍数，磁头一次可以读取一块</p>\n</blockquote>\n<blockquote>\n<p>块单位的规划并不是越大越好，因为一个块最多仅能容纳一个文件</p>\n</blockquote>\n<blockquote>\n<p>要考虑以下问题：文件读取的效率；文件大小可能造成硬盘空间的浪费。</p>\n</blockquote>\n<blockquote>\n<p>每个文件系统开始位置的那个快就称为超级块，超级块的作用是存储文件系统的大小，空的和填满的块，以及他们各自的总数和其他诸如此类的信息。</p>\n</blockquote>\n<h3 id=\"ext2文件系统inode\"><a class=\"anchor\" href=\"#ext2文件系统inode\">#</a> EXT2 文件系统（inode）</h3>\n<blockquote>\n<p>在标准的 ext2 文件系统中，将每个文件的内容分为两个部分来存储，一个是文件的属性，另一个则是文件的内容。</p>\n</blockquote>\n<p>以下是 inode 的内容<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grldqc91inj30mj05lt9y.jpg\" alt=\"\" /></p>\n<p><strong>目录</strong></p>\n<p>在 Linux 的 ext2 文件系统建立一个目录时，ext2 会给该目录分配一个 inode 与至少一个块。inode 记录该目录的相关属性，并指向分配到的那个块；块记录在这个目录下的相关文件的关联性。</p>\n<p><strong>文件</strong></p>\n<p>在 Linux 下的 ext2 建立普通文件时，ext2 会给该文件分配至少一个 inode 与相对于该文件大小的块数量</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grldvanxcgj30m0074q3k.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grldvd2h68j30np0gigqx.jpg\" alt=\"\" /></p>\n<p><strong>ext2 的相关信息</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grldxk10buj30mk05fmzc.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grldxnugdyj30mc0cr440.jpg\" alt=\"\" /></p>\n<h3 id=\"ext2ext3文件的访问与日志文件系统的功能\"><a class=\"anchor\" href=\"#ext2ext3文件的访问与日志文件系统的功能\">#</a> EXT2/EXT3 文件的访问与日志文件系统的功能</h3>\n<p>当建立 ext2 的文件系统时，有以下几个部分</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grle2fue9tj30mo08jjtv.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grle2qk6ovj30mj0hhabj.jpg\" alt=\"\" /></p>\n<p><strong>可以使用 dumpe2fs 命令来读取某个 ext2/ext3 的文件系统内的这些信息</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grle7a2refj30ni04x765.jpg\" alt=\"\" /></p>\n<p><strong>数据的不一致状态</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grle8akkjdj30nk06s0w8.jpg\" alt=\"\" /></p>\n<h3 id=\"linux文件系统的运行\"><a class=\"anchor\" href=\"#linux文件系统的运行\">#</a> Linux 文件系统的运行</h3>\n<p><strong>整个 ext2/ext3 的数据访问是通过日志与元数据以及数据存放区记录，当系统在运行的时候，系统读取某个文件，则这个文件会加载到内存中，所以该磁盘就会放在主存储器的缓冲区中。若这些块的数据被改变时，刚开始只有主存储器中的块数据会被改变，而且在缓冲区中的快数据会被标记为脏 dirty，这个时候，磁盘实体块尚未被修正，所以脏块的数据必须回写到磁盘中，以维持磁盘实体块上的数据与主存储中的块数据的一致性。</strong></p>\n<h3 id=\"载入点\"><a class=\"anchor\" href=\"#载入点\">#</a> 载入点</h3>\n<p><strong>要能够使用 Linux，必须要载入 Linux 系统。目录可以记录文件名与 inode 的相关信息。目录与文件系统产生对应的入口点，我们称之为点目录为载入点；将硬盘划分为几个分区，并将 / 与 /home 设置为两个分区的载入点</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grxyr7xqhtj30i301waa7.jpg\" alt=\"\" /></p>\n<p><strong>载入点一定时目录而不是文件，载入点就是进入该文件系统的入口</strong></p>\n<h3 id=\"linux支持的其他文件系统\"><a class=\"anchor\" href=\"#linux支持的其他文件系统\">#</a> Linux 支持的其他文件系统</h3>\n<p>常见的支持文件系统有：</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grxyrz2ffgj30ia0akwfu.jpg\" alt=\"\" /></p>\n<p><strong>假设 / 使用的是 /dev/hdal, 用 ext3，而 /home 使用 /dev/hda2, 用 reiserfs, 那么采用 /home/dmtsai/.bashrc 时，linux 核心的 VFS 管理所有的文件系统，不需要自行设置读取文件系统的定义</strong></p>\n<h2 id=\"文件系统的简单操作\"><a class=\"anchor\" href=\"#文件系统的简单操作\">#</a> 文件系统的简单操作</h2>\n<h3 id=\"磁盘与目录的容量\"><a class=\"anchor\" href=\"#磁盘与目录的容量\">#</a> 磁盘与目录的容量</h3>\n<p>1.df - 查看所有的文件系统的容量</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grxyszaybpj30j20gdte8.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grxyz88sm8j30i70diwhv.jpg\" alt=\"\" /></p>\n<p>2.du - 列出所有文件与目录容量</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grxyzj7nraj30im0ly42l.jpg\" alt=\"\" /></p>\n<h3 id=\"连接文件in\"><a class=\"anchor\" href=\"#连接文件in\">#</a> 连接文件：In</h3>\n<p><strong>连接文件有点类似 Windows 的快捷方式，也就是很多的链接文件其实都指向同个源文件；连接文件还分成硬连接与符号连接两种</strong></p>\n<p>1. 硬连接或实际连接</p>\n<p>文件的读取方式：</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grxyzs8do6j30jc02u0tj.jpg\" alt=\"\" /></p>\n<p><strong>/root/crontab 为一个硬连接的文件，它连接到 /etc/crontab 文件，其实 /root/crontab 与 /etc/crontab 是同一个文件，只是两个目录（/etc 与 /root）记录了 crontab 文件的关联数据。也就是说，由 /etc 所记录的关联数据可知，crontab 的 inode 放在 A 处，而 /root 目录下的关联数据，crontab 同样也指到 A 处的 inode，所以 crontab 文件的 inode 与块都没有改变，只是有两个目录记录了关联数据。</strong></p>\n<p><strong>最大的好处就是安全。就是不管删除了那个文件，其实仅删除目录下面的文件关联数据，并没有更改原文件的 inode 与块数据。不论由哪个目录连接到正确的 crontab 的 inode 与块，都可以正确无误地进行数据的修改。</strong></p>\n<p><strong>硬链接设置连接文件时，磁盘空间与 inode 的数目都不会改变。由上面的说明可以知道，硬链接只是在某个目录下的块写入一个关联数据，所以并不会用掉 inode 与磁盘空间。</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grxz02eff2j30ij01zjrk.jpg\" alt=\"\" /></p>\n<p>2. 符号连接（即快捷方式）</p>\n<p><strong>符号连接就是建立在一个独立的文件，这个文件会让数据的读取指向它连接的文件内容，由于只是利用文件来作为指向的动作，所以，当源文件被删除之后，符号连接的文件不能打开，会显示无法打开某文件。符号连接与 windows 的快捷方式可以划上等号。</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grxz0h0sxoj30hx0l80yo.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grxz0ooxhjj30i504aq3j.jpg\" alt=\"\" /></p>\n<p><strong>使用 In 如果不加任何参数，就是硬链接；如果 In 使用 - s 参数，所创建的就类似 Windows 的快捷方式，当修改 linux 下的连接文件时，更改的其实是原始文件，所以不论原始文件连接到哪里，只要修改了连接文件，原始文件就跟着变</strong></p>\n<p>3. 目录的连接数量</p>\n<p><strong>当建立新目录时，新目录的连接数为 2，而上层目录的连接数则会增加 1</strong></p>\n<h2 id=\"磁盘的分区-格式化-检验与载入\"><a class=\"anchor\" href=\"#磁盘的分区-格式化-检验与载入\">#</a> 磁盘的分区、格式化、检验与载入</h2>\n<p>新增硬盘步骤：</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grxzttfj1yj30jc02u0tj.jpg\" alt=\"\" /></p>\n<h3 id=\"分区fdisk\"><a class=\"anchor\" href=\"#分区fdisk\">#</a> 分区:fdisk</h3>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grxzwaynmbj30j00l379g.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grxzx5bzilj30ig07ndhm.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grxzxemuaqj30jd0hfdjq.jpg\" alt=\"\" /></p>\n<p>1. 删除分区</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grxzy33nmfj30ln0jygoo.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grxzym42aij30jy069myd.jpg\" alt=\"\" /></p>\n<p>2. 新增分区</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grxzyx1socj30kt0ban0m.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grxzz6zkvcj30k40li78u.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grxzzdkd0nj30jn08iabb.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grxzzj8pz0j30jy08gjsu.jpg\" alt=\"\" /></p>\n<p>3. 操作环境的说明</p>\n<p><strong>以 root 身份进行硬盘分区时，在单用户维护模式下比较安全。在进行 fdisk 的时候 1，如果该硬盘的某个分区还在使用，那么很有可能系统核心会无法重新加载硬盘的分区表，解决方法就是卸载使用中的分区，然后再重新进入 fdisk，重新写入分区表，这样就可以成功</strong></p>\n<p>4. 注意事项</p>\n<p><strong>虽然一个硬盘最大的逻辑分区可以到 63 号（总数，包含 1-4 的主分区），但并非所有的 Linux 版本都会将所有的逻辑分区对应的磁盘号都写入系统中</strong></p>\n<h3 id=\"磁盘格式化-mke2fs\"><a class=\"anchor\" href=\"#磁盘格式化-mke2fs\">#</a> 磁盘格式化  mke2fs</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gry11cyl3pj30k00avgo0.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gry11quz22j30js02074m.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gry11wvr7cj30kx09y77n.jpg\" alt=\"\" /></p>\n<h3 id=\"磁盘检验fsck-badblocks\"><a class=\"anchor\" href=\"#磁盘检验fsck-badblocks\">#</a> 磁盘检验：fsck、badblocks</h3>\n<p>1.fsck - 用来检查与修正硬盘错误的命令，通常只有身为 root 且系统有问题的时候才用这个命令，否则在正常状态下使用此命令，可能会损坏文件</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gry124njv3j30je0b041p.jpg\" alt=\"\" /></p>\n<p>2.badblocks - 用来检查硬盘或软盘是否有坏轨的命令</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gry129ykfzj30jh05jab0.jpg\" alt=\"\" /></p>\n<p>3.sync - 可以直接将系统暂存在内存中的数据写入磁盘中</p>\n<h3 id=\"磁盘载入与卸载\"><a class=\"anchor\" href=\"#磁盘载入与卸载\">#</a> 磁盘载入与卸载</h3>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gry12jkffmj30jk0ihgre.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gry12rft6sj30jp0k00x9.jpg\" alt=\"\" /></p>\n<p><strong>默认情况下，mount 命令只有 root 才能执行；如果想将整个系统中记录的文件系统与载入点对应的数据全部都载入，那么执行 mount   -a ；由于 Linux 系统中，各一个路径都有可能是一个独立的分区系统，所以需要将每个分区系统都挂上各自的载入点；由于各个分区的文件系统可能并不相同，所以必须要先了解该区的文件系统，这样才可以载入</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gry13677pwj30kq0fl40m.jpg\" alt=\"\" /></p>\n<h3 id=\"修改磁盘参数\"><a class=\"anchor\" href=\"#修改磁盘参数\">#</a> 修改磁盘参数</h3>\n<p><strong>修改磁盘的卷标、日志参数、或者是其他硬盘运行时的相关参数（如 DMA 启动与否）</strong></p>\n<p>1.mknod</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gry13twn6lj30l50fhad0.jpg\" alt=\"\" /></p>\n<p>2.e2label - 主要功能是用来修改磁盘的表头数据，也就是卷标</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gry144rti3j30ks03ltae.jpg\" alt=\"\" /></p>\n<p><strong>在载入磁盘的时候，除了使用磁盘号之外，也可以直接使用磁盘卷标作为载入的磁盘载入点</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gry144rti3j30ks03ltae.jpg\" alt=\"\" /></p>\n<p>3.tune2fs</p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gry14h9xjkj30jn043t9h.jpg\" alt=\"\" /></p>\n<p>4.hdparm - 主要用于启动 DMA 模式，并测试硬盘的访问性能</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gry14qs6xqj30jw08341f.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gry15a9jvgj30js0ljgrp.jpg\" alt=\"\" /><br />\n<img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gry15a9jvgj30js0ljgrp.jpg\" alt=\"\" /></p>\n<p><strong>命令只有 root 才能执行。需要特别注意，-X 参数是很危险的参数设置，除非您非常了解硬盘结构，否则不要自行设置</strong></p>\n<h2 id=\"设置启动载入\"><a class=\"anchor\" href=\"#设置启动载入\">#</a> 设置启动载入</h2>\n<h3 id=\"载入磁盘-中文编码和u盘\"><a class=\"anchor\" href=\"#载入磁盘-中文编码和u盘\">#</a> 载入磁盘、中文编码和 U 盘</h3>\n<p><strong>linux 或 UNIX 系统之下，是以目录来表示，也就是一个目录可能就是一个分区；例如通常 Linux 默认的软盘载入点在 /mnt/floppy, 如果需要软盘的数据时，就将 /dev/fd0 设备（这是访问设备的一个设备文件类型）挂上 /mnt/floppy 即可，就可以读取软盘的数据</strong></p>\n<p>1. 载入软盘（格式为 ext2）</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gry302r1zoj30k702c74i.jpg\" alt=\"\" /></p>\n<p><strong>即使是 windows 格式的文件，在 linux 下仍然是可读取。要注意，使用完软盘，一定要将 /media/floppy 卸载之后才可以取出软盘，否则系统会一直告诉您发生错误；当卸载 /media/floppy 的时候，一定不能在该目录中，否则会发生错误信息；如果加载的格式不符合，系统也不会将该软盘挂载</strong></p>\n<p>2. 载入 windows 磁盘</p>\n<p><strong>假设 windows 的 VFAT 文件系统是在 /dev/hda1 下，如果想将该分区载入到 /mnt/win98，该如何做？</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gry30fzp72j30j5026aaa.jpg\" alt=\"\" /></p>\n<p>3. 载入 U 盘</p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gry30lvkyfj30ja01v749.jpg\" alt=\"\" /></p>\n<h3 id=\"启动载入etcfstab和etcmtab\"><a class=\"anchor\" href=\"#启动载入etcfstab和etcmtab\">#</a> 启动载入 /etc/fstab 和 /etc/mtab</h3>\n<p><strong>载入的限制：</strong></p>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gry30lvkyfj30ja01v749.jpg\" alt=\"\" /></p>\n<p><strong>/etc/fstab 就是使用 mount 将设备载入到系统的某个载入点所需执行的命令内容，将这些内容都写到 /etc/fstab 里，让系统一启动就主动载入。当 mount 发出命令时，需要的参数有设备号、载入点、文件系统类别、参数等，/etc/fstab 加入了两项额外的功能，分别是是否执行备份命令 dump，以及是否启动使用 fsck 扫描磁盘</strong></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gry315v05ej30ik05z0tu.jpg\" alt=\"\" /></p>\n<p>1. 磁盘设备号或该设备的卷标</p>\n<p>2. 载入点</p>\n<ul>\n<li>载入点就是目录</li>\n</ul>\n<p>3. 分区的文件系统</p>\n<ul>\n<li>Linux 在传统上使用的是 ext2/ext3 等文件系统</li>\n</ul>\n<p>4. 文件系统参数</p>\n<ul>\n<li>每个文件系统还可以加入很多参数</li>\n</ul>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gry31fpsuuj30k40d6td5.jpg\" alt=\"\" /></p>\n<p>5.dump 备份命令</p>\n<ul>\n<li>可以使用 dump 命令来进行系统备份。dump 命令则会针对 /etc/fstab 的设置值，去选择是否要将该分区进行备份。0 表示不要做 dump 备份，1 表示要进行 dump 备份，2 表示要做 dump 备份</li>\n</ul>\n<p>6. 是否以 fsck 检验分区</p>\n<p><strong>启动过程中，系统默认以 fsck 检验分区内的文件系统是否完整</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gry31nue8qj30kd058myy.jpg\" alt=\"\" /></p>\n<h2 id=\"建立虚拟内存\"><a class=\"anchor\" href=\"#建立虚拟内存\">#</a> 建立虚拟内存</h2>\n<p><strong>在 Linux 中，如果需要使用大量的虚拟内存，但是 swap 分区不够大，可以采用下列方法来实现：</strong></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gry31tlwkqj30is010747.jpg\" alt=\"\" /></p>\n<h3 id=\"建立虚拟内存设备\"><a class=\"anchor\" href=\"#建立虚拟内存设备\">#</a> 建立虚拟内存设备</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gry31ym9fuj30kx04zjt5.jpg\" alt=\"\" /></p>\n<h3 id=\"建立虚拟内存文件\"><a class=\"anchor\" href=\"#建立虚拟内存文件\">#</a> 建立虚拟内存文件</h3>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gry329cwqjj30l70kxteo.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8gry32f20fvj30jf05hq3h.jpg\" alt=\"\" /></p>\n<h1 id=\"文件的压缩与打包\"><a class=\"anchor\" href=\"#文件的压缩与打包\">#</a> 文件的压缩与打包</h1>\n<h2 id=\"压缩文件的用途与技术\"><a class=\"anchor\" href=\"#压缩文件的用途与技术\">#</a> 压缩文件的用途与技术</h2>\n<p><strong>比较大型的文件通过文件压缩之后，可以降低磁盘使用量，减少文件大小；有的压缩程序还可以进行容量限制，使一个大型文件可以分割成为数个小文件</strong></p>\n<h2 id=\"linux系统常见的压缩命令\"><a class=\"anchor\" href=\"#linux系统常见的压缩命令\">#</a> Linux 系统常见的压缩命令</h2>\n<p><strong>常见压缩扩展名</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gs84u9qkv1j30ka036aao.jpg\" alt=\"\" /></p>\n<h3 id=\"compressz\"><a class=\"anchor\" href=\"#compressz\">#</a> compress（*.Z）</h3>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gs84umdktoj30jt0j977k.jpg\" alt=\"\" /></p>\n<p><em><em>compress 程序压缩是最简单的压缩命令，使用的时候需要特别留意，通过 compress 压缩之后，如果没有使用其他参数，那么源文件就会被后来的</em>.Z 所取代</em> *</p>\n<h3 id=\"gzip-zcat-gz\"><a class=\"anchor\" href=\"#gzip-zcat-gz\">#</a> gzip、zcat (*.gz)###</h3>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8gs84v08rm1j30k40d10vi.jpg\" alt=\"\" /></p>\n<p><em><em>gzip 是用来压缩与解压缩扩展名为</em>.gz 的命令，在看到</em>.gz 的文件时，它是通过 gzip 程序压缩的。**</p>\n<p><strong>zcat 则是用来读取压缩文件数据内容的命令，zcat 命令可以同时读取 compress 与 gzip 的压缩文件</strong></p>\n<h3 id=\"bzip2-bzcatbz2\"><a class=\"anchor\" href=\"#bzip2-bzcatbz2\">#</a> bzip2、bzcat(*.bz2)</h3>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8gs84vmp8xfj30kf0bymzj.jpg\" alt=\"\" /></p>\n<h3 id=\"tartar\"><a class=\"anchor\" href=\"#tartar\">#</a> tar（*.tar）</h3>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gs84vn8kiij30jx0bvgp2.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8gs84w7l925j30kr0jeq8k.jpg\" alt=\"\" /></p>\n<p><strong>tar 可以将整个目录或者是指定的文件都整合成一个文件</strong></p>\n<ul>\n<li>仅打包，不压缩</li>\n</ul>\n<p>tar  -cvf   /tmp/etc.tar    /atc</p>\n<ul>\n<li>打包后压缩</li>\n</ul>\n<p><strong>tar  -xcvf  /tmp/etc.tar.gz   /etc</strong></p>\n<ul>\n<li>打包后，以 bzip2 压缩</li>\n</ul>\n<p>tar  -jcvf   /tmp/etc.tar.bz2   /etc</p>\n<ul>\n<li>查看压缩文件</li>\n</ul>\n<p>tar  -xtvf   /tmp/etc.tar.gz</p>\n<ul>\n<li>文件解压</li>\n</ul>\n<p><strong>tar -zxvf   /tmp/etc.tar.gz</strong></p>\n<ul>\n<li>在别的目录下解压压缩文件中的部分文件夹</li>\n</ul>\n<p>tar -zxvf  /tmp/etc.tar.gz   etc/passwd</p>\n<ul>\n<li>备份所有文件，并且保存其权限</li>\n</ul>\n<p>tar  -zxvpf   /tmp/etc.tar.gz   /etc</p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/06/24/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%20%20%20%20%20%E8%AE%A4%E8%AF%86Linux%E5%8F%8ALinux%E4%B8%BB%E6%9C%BA%E8%A7%84%E5%88%92%E4%B8%8E%E5%AE%89%E8%A3%85/",
            "url": "https://theprofessor249.github.io/2021/06/24/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%20%20%20%20%20%E8%AE%A4%E8%AF%86Linux%E5%8F%8ALinux%E4%B8%BB%E6%9C%BA%E8%A7%84%E5%88%92%E4%B8%8E%E5%AE%89%E8%A3%85/",
            "title": "第一部分     认识Linux及Linux主机规划与安装",
            "date_published": "2021-06-24T06:19:15.894Z",
            "content_html": "<h1 id=\"第一部分-认识linux及linux主机规划与安装\"><a class=\"anchor\" href=\"#第一部分-认识linux及linux主机规划与安装\">#</a> 第一部分     认识 Linux 及 Linux 主机规划与安装</h1>\n<h2 id=\"什么是linux\"><a class=\"anchor\" href=\"#什么是linux\">#</a> 什么是 linux</h2>\n<h3 id=\"什么时linux\"><a class=\"anchor\" href=\"#什么时linux\">#</a> 什么时 Linux</h3>\n<p>超级计算机：超级计算机是运行速度最快的计算机，主要用于需要有高速计算的项目中，如国防军事，气象预测，太空科技等</p>\n<p>大型机：大型机具有数个高速 CPU，功能上虽不及超级计算机，但可用来处理大量数据与复杂的运算</p>\n<p>小型机：小型机具有大型机同时支持多用户的特性，通常用于科学研究，工程分析与工厂的流程管理</p>\n<p>微机：又称个人计算机，微机体积小，价格低，但功能完备</p>\n<h3 id=\"什么是操作系统\"><a class=\"anchor\" href=\"#什么是操作系统\">#</a> 什么是操作系统</h3>\n<p>操作系统能正确地控制硬件工作，该系统就称为操作系统。操作系统可以管理整台计算机的硬件，可以控制 CPU 进行正确的计算，可以分辨硬盘里的数据并进行读取，它还必须能够识别所有的适配卡，这样才能正确地使用所有的硬件。<br />\n比肩完整的操作系统包含两个组件，一个是核心与其提供的接口工具，另一个是利用核心提供的接口工具所开发的软件。</p>\n<h3 id=\"什么是核心\"><a class=\"anchor\" href=\"#什么是核心\">#</a> 什么是核心</h3>\n<p>核心就是 Kernel，它是操作系统最底层的东西，每个操作系统都有自己的核心，由它来掌管整个硬件资源的工作状态。当有新的硬件加入到系统中时，若核心并没有支持它，这个新硬件就无法工作，因为控制它的核心并不认识它，</p>\n<p><strong>核心所要管理的事项：</strong></p>\n<p>系统调用接口：通过接口，程序开发人员可以轻松地与核心沟通，进一步利用硬件资源</p>\n<p>进程控制：在多任务环境中，一台计算机可能同时有很多地作业等待 CPU 运算处理，核心这时必须能够控制这些作业并有效地分配 CPU 地资源</p>\n<p>内存管理：控制整个系统地内存，如果内存不足，核心还能提供虚拟内存地功能</p>\n<p>文件系统管理：文件系统地管理，如果核心不能识别某个文件系统，那么将无法使用该文件格式地文件</p>\n<p>设备驱动程序：” 可加载模块 “功能可以将驱动程序编辑成模块，而不需要重新编译核心</p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grjui0sasej30iv0bcjst.jpg\" alt=\"\" /></p>\n<h3 id=\"下面为主要地linux版本地发行者网址\"><a class=\"anchor\" href=\"#下面为主要地linux版本地发行者网址\">#</a> 下面为主要地 Linux 版本地发行者网址</h3>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grjv6ra23yj30nv0joadz.jpg\" alt=\"\" /></p>\n<h3 id=\"其他相关信息\"><a class=\"anchor\" href=\"#其他相关信息\">#</a> 其他相关信息</h3>\n<p><strong>各个版本也都要遵循 LSB 地规范，硬软件开发人员也会遵照 LSB，                                  LSB：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5saW51eGJhc2Uub3JnLw==\">http://www.linuxbase.org/</span></strong></p>\n<p>服务器：提供 Internet 一种以上网络服务地主机，自己架设一台邮件服务器也是小型地服务器</p>\n<p>工作站：仅提供给一组特定人员进行数值分析，科学研究。只要是没有对 Internet 提供网络服务地，那就是工作站，当然也包括所谓地终端</p>\n<p>终端：就是最终用户地那台计算机。例如笔者使用地机器连接上主机来工作，那么，这台计算机就可以称为终端</p>\n<h2 id=\"如何学习linux\"><a class=\"anchor\" href=\"#如何学习linux\">#</a> 如何学习 Linux</h2>\n<h3 id=\"linux地应用\"><a class=\"anchor\" href=\"#linux地应用\">#</a> Linux 地应用</h3>\n<p><strong>网络服务器</strong>：承袭了 Unix 地高稳定性，Linux 地网络功能特别稳定与强大。作为网络服务器，例如 WWW，邮件服务器，文件服务器，FTP 服务器等</p>\n<p><strong>工作站计算机</strong>：工作站不提供 Internet 服务，工作站计算机与台式计算机不太一样，工作站通常面对比较重要地应用，如工程界流体力学地数值模式运算，娱乐界地特效处理，软件开发人员地工作平台。Linux 有强大地运算能力，支持相当广泛地 GCC 编译软件，在工作站中，它也是相当不错地一个操作系统。</p>\n<p><strong>台式计算机</strong>：办公室使用地。工作包括如下几种：</p>\n<p>上网浏览</p>\n<p>文字处理</p>\n<p>网络接口地文字处理系统</p>\n<p>办公软件处理数据</p>\n<p>手法电子邮件</p>\n<p><strong>嵌入式系统：</strong> 小型电脑地开发。例如家电产品，PDA，手机，数字相机以及其他微型地计算机设备。这些计算机设备都是需要操作系统来控制，操作系统直接嵌入产品中。</p>\n<h3 id=\"基础学习\"><a class=\"anchor\" href=\"#基础学习\">#</a> 基础学习</h3>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grjw6g1zbvj30mo07n40k.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grjw9qu5v9j30o50g241v.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grjwbwqy4qj30m002sq3n.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grjwhzpumhj30op07zdhx.jpg\" alt=\"\" /></p>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grjwknr4avj30mk06k0uk.jpg\" alt=\"\" /></p>\n<h2 id=\"linux主机地规划\"><a class=\"anchor\" href=\"#linux主机地规划\">#</a> Linux 主机地规划</h2>\n<h3 id=\"认识主机硬件主件\"><a class=\"anchor\" href=\"#认识主机硬件主件\">#</a> 认识主机硬件主件</h3>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grjwqsupd0j30o00nddj9.jpg\" alt=\"\" /></p>\n<h3 id=\"电脑槽口图\"><a class=\"anchor\" href=\"#电脑槽口图\">#</a> 电脑槽口图</h3>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/008jSNE7ly8grjwwx42mcj30dn0d70ts.jpg\" alt=\"\" /></p>\n<p><strong>1. 中央处理器</strong></p>\n<p>（</p>\n<p><strong>双核心</strong>：是指在一个 CPU 里有两个运算单元，该双核心地 CPU 有两个可以运算地实体 CPU</p>\n<p><strong>频率</strong>：就是单位时间地运算次数。频率越高，表示设备地运算次数越多，速度就会越快</p>\n<p>）</p>\n<blockquote>\n<p>CPU 有倍频与外频之分，外频是指 CPU 与接口设备进行数据传输 / 运算地速度，倍频则是指 CPU 本身运算时地运算速度。两者相乘才是 CPU 地频率。与外频有关的是内存与主板芯片集。</p>\n</blockquote>\n<p>-CPU 外频与倍频：：133（外频）*7（倍频）MHZ；</p>\n<p>-RAM 频率：通常与 CPU 的外频相同，为 133MHz；</p>\n<p>-PCI 接口（包括网卡，声卡等的接口）133/4=33MHz；</p>\n<p>-AGP 接口：133/2=66MHz（这是 AGP 正常的频率）</p>\n<blockquote>\n<p>外频是可以超频的。如果 CPU 外部频率是 133. 通过工具，就可以将 133 提升到比较高的频率，就叫超频。如果超频高出正常值很多，虽然设备的运行频率都会提升，但是也可能会造成系统不稳定，常常死机，或者造成某些组件的寿命减短。</p>\n</blockquote>\n<p><strong>2. 内存</strong></p>\n<blockquote>\n<p>操作系统的核心，软硬件的驱动程序，所有要读取的文件，都需要先读入内存之后，才传输给 CPU 来运行；也会将常用的文件或程序等数据存储在内存中，而不直接删除，如此一来，下次访问这些数据时，不需要访问外部设备就能读取，提高了系统的运行速度；内存规格主要有两种：SDRAM 与 DDR。</p>\n</blockquote>\n<p><strong>3. 显卡 VGA 卡</strong></p>\n<blockquote>\n<p>为了避免由于大量的 3D 画面造成 CPU 的负载过大，显卡开发商在显卡上安装了一个可以处理这些很耗 CPU 运算时间的硬件 GPU，来处理画面数据；当前显卡有两种规格：一种是以传统的 AGP 接口来进行影像数据的传输，另一种则是以更快的 PCI Express 接口来传输数据；VGA 卡上也有一个内存，该内存大小可以影响屏幕输出的分辨率与画面质量，它是直接嵌入在显卡上的。</p>\n</blockquote>\n<p><strong>4. 硬盘与访问设备</strong></p>\n<blockquote>\n<p>主机需要加载数据，这些数据就存放在主机的硬盘上。我们可以通过便携式存储媒体，例如光盘，Zip 磁盘，软盘等来传递数据。主流的硬盘访问接口应该是 SATA 与 IDE；当选购硬盘是，除了注意硬盘的容量大小之外，还要知道硬盘的转速以及缓存的大小。我们要求是，转速至少为 7200 转，缓存最好选择 8MB。</p>\n</blockquote>\n<p><strong>5.PCI 适配卡</strong></p>\n<blockquote></blockquote>\n<p>网卡，声卡，特数功能卡等，都是通过 PCI 插槽来安装的</p>\n<p>网卡：目前采用的是 RJ-45 的接口插孔，这种接口有点像电话线插孔，不过要稍微大一些。由于网络需求提高，最高网卡速度已达到吉比特（Gbit/s）。也可以选购 10/100/1000Mbit/s 的网卡。</p>\n<p>SCSI 适配卡：可以用来连接 SCSI 接口的设备。由于 SCSI 接口的设备比较稳定，而且设备运行速度较快，耗费 CPU 资源较少。SCSI 适配卡是大型服务器主机的硬盘传输接口，如果是个人计算机，采用 IDE/SATA 接口就够了，SCSI 接口的硬盘很贵。</p>\n<p><strong>6. 主板</strong></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grk3ecgjwij30fn0argmc.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>芯片集：就是负责与 CPU，RAM，输出与输入设备通信；CPU 的外频就是指芯片集与其他设备通信的速度；芯片集只能支持集中规格，无法支持所有的规格，所以在选购时，需要一起考虑。</p>\n</blockquote>\n<blockquote>\n<p>I/O 地址与 IRQ 中断：既然主板是负责各个计算机系统组件之间的通信，有输入输出，又有不同的储存设备，所以利用 I/O 与 IRQ，使得每台设备都有自己的地址，如若发生端口之间的冲突，可以手动设置各台设备的 I/O, 还可利用 IRQ 中断。</p>\n</blockquote>\n<blockquote>\n<p>BIOS：是 Basic Input/Output System（基本输入 / 输出系统）的缩写，上面提到的 I/O,IRQ 等，都可以通过操作系统，亦可以通过主板提供的 BIOS 功能来设置。启动的时候，屏幕出现的版本信息就是 BIOS 的设置。可以在机器启动时按下 DEL，来设置启动顺序，I/O 以及 IRQ。</p>\n</blockquote>\n<blockquote>\n<p>其他输出输入接口：<strong>PS2 接口</strong>：键盘与鼠标的接口，插孔为圆形的；**9 针串行端口：** 以前用来连接鼠标的接口，常称为 coml；**25 针并行端口：** 通常用来连接打印机，LPT1；** 声音输出，输入与麦克风：** 圆形插孔，主板上必须装有内置音效芯片，才会有这三个设备；**USB：** 支持即插即用。</p>\n</blockquote>\n<blockquote>\n<p>电源：电源至少也要 300W 以上才能够主机使用，有些特殊的主机要求至少 400-500W 以上的电源。</p>\n</blockquote>\n<blockquote>\n<p>关于速度 / 稳定性的问题：<strong>系统超频；</strong> <strong>电源不稳定；</strong> <strong>内存负荷；</strong> <strong>系统过热；</strong></p>\n</blockquote>\n<h3 id=\"适合主机的硬件配置\"><a class=\"anchor\" href=\"#适合主机的硬件配置\">#</a> 适合主机的硬件配置</h3>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/008jSNE7ly8grk4e7ljnsj30o60kntcc.jpg\" alt=\"\" /></p>\n<h3 id=\"linux中的硬件设备号\"><a class=\"anchor\" href=\"#linux中的硬件设备号\">#</a> Linux 中的硬件设备号</h3>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grk4dj6cdqj30o80k2766.jpg\" alt=\"\" /></p>\n<h3 id=\"选择适当的版本\"><a class=\"anchor\" href=\"#选择适当的版本\">#</a> 选择适当的版本</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/008jSNE7ly8grk4hfc652j30nl0800vq.jpg\" alt=\"\" /></p>\n<h3 id=\"双系统安装步骤\"><a class=\"anchor\" href=\"#双系统安装步骤\">#</a> 双系统安装步骤</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0NjI0NTM5L2FydGljbGUvZGV0YWlscy84MTc3NTYzNT9vcHNfcmVxdWVzdF9taXNjPSZhbXA7cmVxdWVzdF9pZD0mYW1wO2Jpel9pZD0xMDImYW1wO3V0bV90ZXJtPXVidW50dSVFNSU4RiU4QyVFNyVCMyVCQiVFNyVCQiU5RiVFNSVBRSU4OSVFOCVBMyU4NSZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMg==\">https://blog.csdn.net/qq_24624539/article/details/81775635?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=ubuntu 双系统安装 &amp; utm_medium=distribute.pc_search_result.none-task-blog-2</span><sub>all</sub>sobaiduweb~default-1-.nonecase&amp;spm=1018.2226.3001.4187</p>\n<h2 id=\"命令行模式\"><a class=\"anchor\" href=\"#命令行模式\">#</a> 命令行模式</h2>\n<ul>\n<li>Ctrl Alt Backspace：<strong>重新启动</strong></li>\n<li>Ctrl Alt 【F1】<sub>【F6】：** 命令登入 tty1</sub>tty6 终端 **</li>\n<li>Ctrl Alt 【7】：<strong>图形界面桌面</strong></li>\n<li>startx:<strong> 启动图形界面</strong></li>\n<li><strong>默认 root 的提示符为 #；一般身份用户的提示符为 $</strong></li>\n<li>exit:<strong> 注销</strong></li>\n<li>date +%Y%m%d：<strong>显示日期</strong></li>\n<li>cal  month  year：<strong>列出月份的月历</strong></li>\n<li>bc:<strong> 计算器</strong>（quit 离开计算器）</li>\n<li>Tab：<strong>大小写切换键，且具有命令补全与文件补齐的功能</strong></li>\n<li>Ctrl  C：<strong>中止当前程序</strong></li>\n<li>Ctrl  d：<strong>文件结束或输入结束，可用来取代 exit 的输入</strong></li>\n<li>man  命令：<strong>命令使用指南</strong></li>\n</ul>\n<blockquote>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grk6cv0b1kj30of0lamzm.jpg\" alt=\"\" /><br />\nman -f  命令：获取关于命令的信息</p>\n</blockquote>\n<blockquote>\n<p>man 数字  命令：获取 man N page 页中的文件数据</p>\n</blockquote>\n<blockquote>\n<p>man -k  命令：找到更多的帮助文件数据</p>\n</blockquote>\n<ul>\n<li>who：<strong>看谁在线</strong></li>\n<li>netstat -a：<strong>查看网络的联机状态</strong></li>\n<li>ps  -aux：<strong>查看后台执行的程序</strong></li>\n<li>shutdown</li>\n</ul>\n<blockquote>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/008jSNE7ly8grk6tpdxsyj30ni0hd426.jpg\" alt=\"\" /></p>\n</blockquote>\n<ul>\n<li>sync：<strong>在内存中尚未更新的数据就会写入硬盘中</strong></li>\n<li>reboot:<strong> 重启</strong></li>\n<li>halt,poweroff：<strong>关机</strong></li>\n</ul>\n",
            "tags": []
        }
    ]
}