<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>培新 • Posts by &#34;笔记类&#34; category</title>
        <link>https://theprofessor249.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Wed, 07 Jul 2021 09:11:40 +0800</pubDate>
        <lastBuildDate>Wed, 07 Jul 2021 09:11:40 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://theprofessor249.github.io/2021/07/07/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%20%20%20%E5%AD%A6%E4%B9%A0Shell%E5%92%8CShell%E8%84%9A%E6%9C%AC/</guid>
            <title>第三部分   学习Shell和Shell脚本</title>
            <link>https://theprofessor249.github.io/2021/07/07/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%20%20%20%E5%AD%A6%E4%B9%A0Shell%E5%92%8CShell%E8%84%9A%E6%9C%AC/</link>
            <pubDate>Wed, 07 Jul 2021 09:11:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;vi文字处理器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vi文字处理器&#34;&gt;#&lt;/a&gt; vi 文字处理器&lt;/h1&gt;
&lt;h2 id=&#34;vi与vim&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vi与vim&#34;&gt;#&lt;/a&gt; Vi 与 vim&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;使用文字模式来处理 Linux 的系统设置问题，不仅可以容易地了解到 Linux 系统中，使用文字编辑器来编辑 Linux 参数设置文件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;vi 是老式的文字处理器，功能很齐全。对于程序开发人员很好用，vim 是一个程序开发工具而不是文字处理软件。因为 vim 里加入了很多附加的功能，如支持规范表达法的搜索架构、多文件编辑、块复制。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;vi的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vi的使用&#34;&gt;#&lt;/a&gt; vi 的使用&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;一般模式、编辑模式、命令行命令模式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一般模式：&lt;strong&gt;可以使用 “上下左右” 键来移动光标，可以使用删除字符或删除整行，可以使用复制、粘贴来处理文件数据&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑模式：按下上述字母后，画面的左下方会出现 “INSERT” 或 “REPLACE” 的字样，才&lt;strong&gt;可以输入任何字到文件中，如果要回到一般模式时，则必须要按下 Esc 键才可退出编辑模式&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令行命令模式：&lt;strong&gt;输入 “：或 / 或？&lt;/strong&gt;” 就可以将光标移到最下面的那一行，在这个模式中，您&lt;strong&gt;可以搜索数据，而且读取、存盘、大量删除字符、离开 vi、显示行号等操作&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8gs63kjplg0j30d9082abj.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;简单执行范例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单执行范例&#34;&gt;#&lt;/a&gt; 简单执行范例&lt;/h3&gt;
&lt;p&gt;1. 使用 vi 进入一般模式&lt;/p&gt;
&lt;p&gt;vi test.txt&lt;/p&gt;
&lt;p&gt;2. 按下 i 进入编辑模式，开始编辑文字&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I、o、a&lt;/strong&gt;, 可以发现在左下角会出现 --INSERT--，意味着可以输入任意字符，键盘上除了 Esc 这个按键之外，其他按键都可以视作为一般的输入按钮&lt;/p&gt;
&lt;p&gt;3. 按下【Esc】键回到一般模式&lt;/p&gt;
&lt;p&gt;4. 在一般模式中按下:wq 存储后离开 vi&lt;/p&gt;
&lt;h3 id=&#34;命令行内容说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令行内容说明&#34;&gt;#&lt;/a&gt; 命令行内容说明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一般模式&lt;br /&gt;
&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8gs63qcme7nj30kq04o75v.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/be70dd4f37983a9dc34d3d34186d2314&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/f3b6902891dee70dad0f3127be15f735&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/aff76fed52058823c4445c3e58d5f9d9&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/28656f3faf2df35255dd72ffea848c6a&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/3b4fad79b6c38b5181dc903205d883c6&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;ctrl  +  f：屏幕向下移动一页，相当于 Page  Down 按键&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Ctrl  +  b：屏幕向上移动一页，相当于 Page  Up 按键&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;0         ：移动到这一行的最前面字符处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;$         ：移动到这一行的最后面字符处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;G         ：移动到这个文件的最后一行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;gg        ：移动到文件的第一行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;n《Enter》  ：n 为数字，光标向下移动 n 行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;/word     ：从光标向下寻找一个名为 word 的字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;n1、n2s/word1/word2/g：n1 与 n2 为数字，在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串替换为 word2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;x、X       ：x 为向后删除一个字符，X 为向前删除一个字符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;dd        ：删除光标所在的那一整行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ndd       ：n 为数字，从光标位置开始，删除向下 n 行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;yy        ：复制光标所在的那一行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;nyy       ：复制光标所在的向下 n 行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;p、P       ：p 为将已复制的数据粘贴到光标的下一行，P 为贴在光标上一行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;u         ：复原前一个操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ctrl  +  r：重做上一个操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;编辑模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/783775d1f9f4593adca0d834c74b697e&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i、I       ：i 为从当前光标所在处插入，I 为在当前所在行的第一个非空格符处开始插入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a、A       ：a 为从当前光标所在的下一个字符处开始插入，A 为从光标所在行的最后一个字符处开始插入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;r、R       ：r 会替换光标所在的哪一个字符；R 会一直替换光标所在的文字，直到按下 Esc 键为止&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;命令行命令模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/fc4f797df47360c697e0bf9fd4a1b1b0&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;：w       ：将编辑的数据写入硬盘文件中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;：q       ：离开 vi&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;：wq      ：存储后离开&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;案例练习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例练习&#34;&gt;#&lt;/a&gt; 案例练习&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/dc817bb1c3630c12fc5d5cff2a4ece75&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;文件的恢复与暂存盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的恢复与暂存盘&#34;&gt;#&lt;/a&gt; 文件的恢复与暂存盘&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;当我们编辑一个文件时，假设名称为 /tmp/passwd，那么在这个 /tmp 中就会有一个临时文件，文件名为 /tmp/.passwd.swp, 这是一个隐藏文件，我们所进行的一些修改，都会暂时存在该文件中，如果在文件修改过程中，系统死机，那么下次再重新 vi /tmp/passwd 时，系统就会告诉你，是否需要恢复成修改过程中的模样？如果按下 R，就可以将数据恢复到修改过程的样子，而不是源文件&lt;/strong&gt;、&lt;br /&gt;
&lt;strong&gt;再 /tmp 中执行 ls  -al 时，发现有两个文件，文件名分别为 passwd 与.passwd.swp。&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;（1）可能有人在编辑这个文件；（2）之前你在编辑这个文件时，因为某些未知因素导致 vi 程序中断，则该临时文件就会存在。如果是状态（2），则此时可以将该 /.passwd.swp 文件删除，或者直接 vi /tmp/passwd, 在 vi 询问是否恢复时，选择恢复，然后存储更新 /tmp/passwd，之后再将这个 /tmp/.passwd.swp 文件删除即可。如果不删除的话，那么每次编辑这个文件时，都会告诉你该文件有问题&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;vim的附加功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vim的附加功能&#34;&gt;#&lt;/a&gt; vim 的附加功能&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;vim 具有颜色显示功能，并且还支持许多程序语法，当使用 vim 编辑程序时，vim 可帮你直接进行 “程序调试 debug”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/4e56a3bd3d9c0c0a0fa6e60cd3747fc2&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;快选择&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快选择&#34;&gt;#&lt;/a&gt; 快选择&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/1c710838cf4bd3d355128741e3523743&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/3f64ba955ce48e9fb27a3ffc9ab6a270&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;多文件编辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多文件编辑&#34;&gt;#&lt;/a&gt; 多文件编辑&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/9f19f1d88ff8b604d96fc55fa2d249d0&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;多窗口功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多窗口功能&#34;&gt;#&lt;/a&gt; 多窗口功能&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/180d546d5cb30e6e93ab85211eb92b03&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;vim环境设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vim环境设置&#34;&gt;#&lt;/a&gt; vim 环境设置&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;如果以 vim 软件来搜索一个文件内部的某个字符串时，这个字符串会被反白，而下次再次以 vim 编辑这个文件时，该搜索的字符串还是存在。当编辑其他文件时，如果其他文件中也存在这个字符串，也会主动反白显示。另外，当重复编辑同一个文件时，第二次进入该文件，光标竟然就在上次离开的哪一行上&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;因为 vim 会主动将曾经做过的行为记录下来，以便下次可以轻松工作。那个记录动作的文件就是：~/.viminfo。每个人的家目录都应该有这个文件。这个文件是自动产生的，不必自行建立。在 vim 里所做过的操作，可以在这个文件内部查询到&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt; vim 的环境设置：在一般模式时输入：set  all 来查看&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/c0061f197c6513fcc5ccc3b65c03c1b7&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用vi进行编辑的练习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用vi进行编辑的练习&#34;&gt;#&lt;/a&gt; 使用 vi 进行编辑的练习&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/565b07614bdc4faa8d0f22b2caae530c&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;dos与linux换行符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dos与linux换行符&#34;&gt;#&lt;/a&gt; DOS 与 Linux 换行符&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;在 DOS 使用的换行符为 ^M&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mtext&gt;我们称为&lt;/mtext&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mtext&gt;与&lt;/mtext&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;mtext&gt;两个符号。而在&lt;/mtext&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mtext&gt;中，则仅有&lt;/mtext&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;mtext&gt;（&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;,我们称为CR与LF两个符号。而在Linux中，则仅有LF（&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;我&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;们&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;称&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;为&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;与&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;两&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;个&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;符&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;号&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;。&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;而&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;在&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;中&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;则&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;仅&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;有&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;（&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;）这个换行符。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/2ca068cf2a2a39f8a8d74cacccb61f72&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;本章与lpi的关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本章与lpi的关系&#34;&gt;#&lt;/a&gt; 本章与 LPI 的关系&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/f1b0785d19681a80f185f750b0aabff6&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;认识bash-shell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#认识bash-shell&#34;&gt;#&lt;/a&gt; 认识 Bash  Shell&lt;/h1&gt;
&lt;h2 id=&#34;bash-shell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bash-shell&#34;&gt;#&lt;/a&gt; Bash Shell&lt;/h2&gt;
&lt;h3 id=&#34;什么是shell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是shell&#34;&gt;#&lt;/a&gt; 什么是 Shell&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/84979145b9bf205f0733d8657b969ec7&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/9e5d1b24820fef9c9129d451c0fa1887&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通常，替我们工作的是硬件，而控制硬件的是核心。用户是利用 Shell 控制一些内核提供的工具，来控制硬件替我们正确工作。由于我们听不懂人类语言，而人类也没办法直接记住内核的语言，所以两者的沟通就要通过 Shell 来支持&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;系统的shell与etcshells功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统的shell与etcshells功能&#34;&gt;#&lt;/a&gt; 系统的 shell 与 /etc/shells 功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;目前至少有下面几个可用的 shells:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/c8e59f2ad4d82c3fc3ccaca3395c9fca&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;bash-shell-的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bash-shell-的功能&#34;&gt;#&lt;/a&gt; Bash Shell 的功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;命令记忆能力&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;只要在命令行按上下键，就可以找到前一个输入的命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;命令与文件补全功能&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;【tab】接在一串命令的第一个字的后面，则为命令补全&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;【tab】接在一串命令的第二个字以后时，则为文件补齐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;命令别名设置功能&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在命令行输入 alias，就可以知道当前的命令名有哪些了。也可以直接执行命令来设置别名：alias  lm = &#39;ls  -al&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;作业控制、前台、后台控制&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;可以单一登录的环境中，达到多任务的目的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Shell scripts 的强大功能&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;可以将日常连续命令写成一个文件，该文件可以通过对话交互方式来进行主机的检测。也可以通过 shell 提供的环境变量及相关命令来进行设计&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;通配符&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;除了完整的字符串之外，bash 还支持许多通配符来帮助用户查询与执行命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;bash-shell的内置命令type&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bash-shell的内置命令type&#34;&gt;#&lt;/a&gt; Bash Shell 的内置命令：type&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/9d402ed527c82c219e3ee22578415338&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;执行命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行命令&#34;&gt;#&lt;/a&gt; 执行命令&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/b3de6c937e8dab2326f8676e8a902891&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/6b0bf2ff9813838ae209fde29d74add2&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;shell的变量功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shell的变量功能&#34;&gt;#&lt;/a&gt; Shell 的变量功能&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;变量：变量就是以一组文字或字符，来替换一些设置或者是一串保留的数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ls 命令应该要用 /bin/ls 来执行，那为什么在任意路径下都可以执行 ls，而不需要指定路径？这是因为系统已经默认了一些搜索路径 PATH，所以当您执行一些命令的时候，系统就会根据据该 PATH 的设置来搜索命令，这个 PATH 就是一个变量，可以使用 echo 命令显示变量&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;变量的获取与设置echo-变量设置规则-unset&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变量的获取与设置echo-变量设置规则-unset&#34;&gt;#&lt;/a&gt; 变量的获取与设置：echo、变量设置规则、unset&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/99594b1c8554311115c19148eab7ab68&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/f1f8473ad693c89ecef7295de38fbf48&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/fd5796399d45c7ab93f2ca0932b027df&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/64449865936cf910a33222a0cf7d509a&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在执行命令的过程中，引号（&#39;）代表的含义是什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在一串命令中，&#39; 之内的命令将先执行，而其执行出来的结果将作为外部输入信息.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;变量的用途&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变量的用途&#34;&gt;#&lt;/a&gt; 变量的用途&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;PATH 变量是我们在执行命令时所需要具备的命令搜索目录数据，没有它，就要使用绝对路径来执行命令&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;案例一：在 UNIX 中，要进行一些数值模式的仿真工作。由于数据量太大，为了怕日后忘记这个目录的内容与主要意义，所以文件名都取得很长，在执行模式的过程中，常切换目录，非常麻烦。所以我就设置几行目录名称成为一个 4 个字符的变量，只要输入 “cd  $VAR1” 命令，马上就移动到该路径下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/eca28b7266b5e7f3d8a45c1938c8a0fd&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;环境变量的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境变量的功能&#34;&gt;#&lt;/a&gt; 环境变量的功能&lt;/h3&gt;
&lt;p&gt;1. 环境变量的说明：env （查看变量）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/8fbb5f2ca68531ddfad0ec1be9fc30be&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/b9ff66241ab3f77b08d4b63217148b56&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2. 其他所有的变量说明：set&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/afbbc605cdb561f02ab27dd4012b84ae&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上面比较重要的变量&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PSI：（提示符的设置）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;下面列出了 FC4 的环境下，默认的 bash 的 PS1 变量内的特殊符号所代表的含义：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/84c9f832edc099b7da47ea61dba27f49&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$：（关于 shell 的 PID）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当前这个 shell 的进程号。即为 PID&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;？：（上一个执行命令的回传码）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上一个执行的命令所回传的值；当我们执行某些命令时，这些命令都会回传一个执行后的代码。如果成功地执行该命令，则会回传一个 0 值，如果执行过程发生错误，就会回传错误代码，通常以非 0 值来替换&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/eef78cabfa9476eabc218158887c77af&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSTYPE、HOSTTYPE、MACHYTYPE：（主机硬件与核心的等级）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他们与程序的安装有关。在安装软件的时候，需要通过编译器将源码编译为二进制文件。但是，我们可以针对硬件设置进行编译的优化，就可以用到这些参数。例如当前主要的版本都是针对 i386 即最低等级的机器进行优化，这样才能安装在较高级的机器上，如果以 686 机型来优化，那么，就无法向下兼容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义变量转成环境变量：export&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;export  变量：在引用他人的文件或其他程序时，如果忘记设置 export 的话，那么不同文件中的相同变量值，将需要一再重复设置。所以，只要在头一个文件使用 export，那么后续的文件引用时，将会把该变量内容读进来。如果仅下达 export 而没有变量，此时将会把所有的环境变量显示出来。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/be1e8d76162cb1b546a3f28251f61dd9&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;语系文件的变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语系文件的变量&#34;&gt;#&lt;/a&gt; 语系文件的变量&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;当我们使用 man command 的方式去查询某个数据的帮助文件时，该帮助文件的内容可能会因为我们使用的语系，而产生一些乱码。另外，利用 ls 查询文件的时间时，也可能会有乱码出现在时间部分。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/74c2dbd13d61322e77dff93d85eecd11&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/80a0bae6ebcd312b433b71badd2ad6cb&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;变量的有效范围&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变量的有效范围&#34;&gt;#&lt;/a&gt; 变量的有效范围&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;如果在运行程序的时候，存在父程序与子程序的不同程序关系时，则变量可否被引用是与 export 有关的，被 export 后的变量，可以称它为环境变量。环境变量可以被子程序所引用，但是，其他的自定义变量内容就不会存在于子程序中。我们自行设置的变量，只在当前 shell 环境中存在，在子程序中将不会存在此变量，除非使用 export 将自定义变量变成环境变量。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境变量可以让子程序继续引用的原因：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/b7c1f43bbd37d8753e399f29c1738fe9&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;变量键盘读取-数组与声明read-array-declare&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变量键盘读取-数组与声明read-array-declare&#34;&gt;#&lt;/a&gt; 变量键盘读取、数组与声明：read、array、declare&lt;/h3&gt;
&lt;p&gt;1.read：要读取来自键盘输入的变量&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/d64b4fa434dd81c73e81a87c1e9d49a1&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2.declare/typeset: 声明变量的属性&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/f583bc4a0059685df86912a014cf405a&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3.array：使用数组来声明一些变量&lt;/p&gt;
&lt;p&gt;数组的设置方式：var [index] = content&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/9b13c22737f96c5b296872f440936b83&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;与文件系统及程序的限制关系ulimit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#与文件系统及程序的限制关系ulimit&#34;&gt;#&lt;/a&gt; 与文件系统及程序的限制关系：ulimit&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;为了防止系统不死机，我们的 Bash 是可以限制用户的某些系统资源的，包括可以打开的文件数量、可以使用的 CPU 实践、可以使用的内存总量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/bae0d67f9dcc5668ee7b429c937ce6d2&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;附加的变量设置功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#附加的变量设置功能&#34;&gt;#&lt;/a&gt; 附加的变量设置功能&lt;/h3&gt;
&lt;p HOME=&#34;&#34;&gt;获取两种变量的方法：1.echo  $HOME;   2.echo  $&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/4c9a3447021b1e9286d4763e572271a6&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;命令别名与历史命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令别名与历史命令&#34;&gt;#&lt;/a&gt; 命令别名与历史命令&lt;/h2&gt;
&lt;h3 id=&#34;命令别名设置alias-unalias&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令别名设置alias-unalias&#34;&gt;#&lt;/a&gt; 命令别名设置：alias、unalias&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;执行命令：&lt;/strong&gt; alias  ls=&#39;ls -l | more&#39;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查询当前命令别名：&lt;/strong&gt; alias&lt;/p&gt;
&lt;h3 id=&#34;历史命令history&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#历史命令history&#34;&gt;#&lt;/a&gt; 历史命令：history&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/7059f9120b1d8e3fd6bcd668c4cb022e&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/e5fb092dc2441c9bc8b6591243831e00&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;相关的功能：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/10de0eb917aaab86c3f3ec49fb91c9b6&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;bash-shell使用环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bash-shell使用环境&#34;&gt;#&lt;/a&gt; Bash Shell 使用环境&lt;/h2&gt;
&lt;h3 id=&#34;绝对路径与相对路径&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绝对路径与相对路径&#34;&gt;#&lt;/a&gt; 绝对路径与相对路径&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;绝对路径：是指以根目录开始一直写到文件的一种命令方式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;当前在 /home/test 这个 test 用户的家目录中，想要看看里面的.bashrc 文件的数据，使用 more 命令，而这个命令在 /bin/more 中，执行命令的正确方法为：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;/bin/more  .bashrc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;相对路径：. 与.. 分别代表这个路径与上层路径&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;我所在目录为 /home/test，然后我要使用 /bin/more 执行文件，并且使用相对路径的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;../../bin/more  .bashre&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;登录消息显示数据etcissue-etcmotd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#登录消息显示数据etcissue-etcmotd&#34;&gt;#&lt;/a&gt; 登录消息显示数据:/etc/issue、/etc/motd&lt;/h3&gt;
&lt;p&gt;1./etc/issue&lt;/p&gt;
&lt;p&gt;终端接口（tty1-tty6）登录的时候，会有几行提示的字符串&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/219de7a50262d2647d2c238b0c2319f7&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/35b52a990e06ba96b65c456443860f71&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2./etc/motd&lt;/p&gt;
&lt;p&gt;如果想让用户登录后获取一些消息，可以将消息加入 /etc/motd 中，当登录后，告诉登陆者，系统将会在某个固定时间进行维护工作&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/213c2e7089a80662252c2ba700857c6b&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;环境设置文件bashrc-bashrc-profile-profile-etcinputrc-source&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境设置文件bashrc-bashrc-profile-profile-etcinputrc-source&#34;&gt;#&lt;/a&gt; 环境设置文件：bashrc、&lt;sub&gt;/.bashrc、&lt;/sub&gt;/.profile、profile...、/etc/inputrc、source&lt;/h3&gt;
&lt;p&gt;1. 系统设置值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/etc/sysconfig/i18n&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;语系是由 i18n 维护的，而 FC4 默认的系统语系设置文件就在 /etc/sysconfig/i18n 中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/0d2d438a6e49d4579f051168504b2dda&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/etc/profile&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这个文件设置了几个重要的变量，例如 “PATH、USER、MAIL、HOSTNAME、HISTSIZE、umask 等，同时也确定 /etc/inputrc 这个针对键盘热键设置的文件的数数据内容。可以在这里设置总体的 PATH 等信息。同时，这个文件也规划出 /etc/profile.d 及 /etc/inputrc 这两个目录与文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;/etc/bashrc&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这个文件确定 umask 的功能，同时也确定了提示符的内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;/etc/profile.d/*.sh&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;针对 bash 及 C-shell 规范了一些数据。这个目录中针对颜色、语系、vim 及 which 等命令进行了一些附加设置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;/etc/man.config&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;规定了使用 man 的时候，该去哪里查看数据的路径设置；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;这就是系统在设置时常用的文件。通常设置完这几个文件之后，都要先注销再登录之后，设置才生效&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2. 个人设置值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;sub&gt;/.bash_profile,&lt;/sub&gt;/.bash_login,~/.profile&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;3 个文件只要一个，一般默认是以&lt;sub&gt; /.bash_profile 文件名存在。这个文件可以定义个性化的路径 PATH 与环境变量；bash 启动时，会先去读取&lt;/sub&gt; /.bash_profile, 找不到时，就去读取&lt;sub&gt; /.bash_login, 然后才是&lt;/sub&gt; /.profile&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;~/.bashrc&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;个性化设置都会写在这里。例如命令别名、路径等；在每次执行 shell 脚本的时候，都会重新读取这个文件，所以时最完整的，而～/.bash_profile 则只有登录时才读取一次&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;~/.bash_history&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;历史命令就记录再这里。而这个文件能够记录多少数据，则与 HISTSIZE 变量有关。每次登录 bash 后，bash 会先读取这个文件，将所有的历史命令读入内存，因此，当我们登录 bash 后，就可以查知上次使用过那些命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;~/.bash_logout&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这个文件记录” 当我注销 bash 后，系统再帮我做完什么操作后才离开&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;登录 bash 的时候，这些设置文件是如何读取的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/3d9e0e7ecbefd76b0b7d1be6d318ca91&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3. 登录 shell 与非登录 shell&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所谓登录 shell，指的是当用户登录 Linux 系统时，所取得的那个 shell；当登录后，再去执行其他 shell 时，其他 shell 就是非登录 shell。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;登录与非登录 shell 的差异：当登录 Linux，即是取得的登陆 shell 时，会读取&lt;sub&gt; /.bash_profile、&lt;/sub&gt;/bash_login、&lt;sub&gt;/.profile。至于取得登录 shell 后继续操作的其他非登录 shell，读取的就仅有&lt;/sub&gt; /.bashrc。而大部分的 Linux 版本都会将&lt;sub&gt; /.bash_profile 的内容指到&lt;/sub&gt; /.bashrc&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;终端的环境设置stty-set&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#终端的环境设置stty-set&#34;&gt;#&lt;/a&gt; 终端的环境设置：stty、set&lt;/h3&gt;
&lt;p&gt;1.stty 设置终端的输入按键代表的意义&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/ac9ec9f2352455dd269020dc6b0b52df&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2.set 设置整个命令输出 / 输入的环境&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/191e334580b7706fa48137b0d4cb6dff&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;通配符与特殊符号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通配符与特殊符号&#34;&gt;#&lt;/a&gt; 通配符与特殊符号&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/55340db6a52281e7c910b88c101bd811&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/2aadc6956359b1a67e1d4821e0a7c911&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;最常见的就是&lt;/em&gt;、？、【】、&#39;&lt;/em&gt;*&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/a8d4b4b55258d94783d4cd3355b509cc&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;数据流重导向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据流重导向&#34;&gt;#&lt;/a&gt; 数据流重导向&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;就是将数据传到其他地方。数据流重导向就是将某个命令执行后应该要出现在屏幕上的数据，传输到其他方，例如文件或者设备&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/e7f5339e64a4962ebf6cf6807981a02b&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;执行命令时，这个命令可能会通过文件读入数据，经过处理之后，再将数据输出到屏幕&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/c5ae5d2b09ee0390b1c1ae129a5728f0&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/e2249e476bd2d29b0092d6b27132ce89&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/b6c4a2e8c8710a7e704326eb6b475978&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/ca95d809ed6ff3da73f6aa83384602e0&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/dd7b91572fd950e1ba2a9a4a58c6ae8f&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/60749b5c4b7bae7b3a0503096105331a&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;命令执行的判断依据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令执行的判断依据&#34;&gt;#&lt;/a&gt; 命令执行的判断依据： ;、&amp;amp;&amp;amp;、||&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;;  : 用于执行多次命令&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;sync; sync; shutdown  -h  now&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&amp;amp;&amp;amp;  : 当前的命令执行结果为正确（仅有标准输出）时，就可以接着执行后续命令，否则略过&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ls  /vbird   &amp;amp;&amp;amp;  touch   /vbird/test&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;|| ：当前一个命令有错误时，才会执行 || 后面的命令&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/4178247df710d26addee2a9c8e652b20&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;管道命令pipe&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管道命令pipe&#34;&gt;#&lt;/a&gt; 管道命令（pipe）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;管道命令 | 仅能处理通过前面一个命令传来的正确信息，也就是标准输出 STDOUT 的信息，对于标准错误、并没有直接处理的能力&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/26d61af51046bd69f67da7686b02ad68&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;再每个管道的前后都是命令，后一个命令的输入是前一个命令的输出&lt;/p&gt;
&lt;h3 id=&#34;选取命令cut-grep&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选取命令cut-grep&#34;&gt;#&lt;/a&gt; 选取命令：cut、grep&lt;/h3&gt;
&lt;p&gt;1.cut：可以将一段消息的某段切出来。处理的消息是以行为单位&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/662cd4bf5d2b0a02f94932877b1fa658&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/317cf1d098695ae32cfb061fe6122c03&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2.grep：分析一行消息，若其中有所需要的信息，就将该行取出&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/6c626fd66bc650d356b05e468f6d7397&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;排序命令sort-wc-uniq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#排序命令sort-wc-uniq&#34;&gt;#&lt;/a&gt; 排序命令：sort、wc、uniq&lt;/h3&gt;
&lt;p&gt;1.sort: 根据不同的数据类型来排序&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/823f513ebdd8defcdf0bb437bbb94b29&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/bdf95ceff6b17ce4e94f14a0e17f9d52&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2.uniq：如果排序完成了，可以将重复的数据仅显示一次&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/d318a443fef67bd8b6f8f9a10ac1dd8f&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3.wc：查询文件里有多少字，多少行，多少字符&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/11a070cac063bf3d0ab4e3b31f9ba7b2&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;双向重导向tee&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#双向重导向tee&#34;&gt;#&lt;/a&gt; 双向重导向：tee&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;将数据流分别送至文件和屏幕：而输出到屏幕的，其实就是 stdout，可以让下个命令继续处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/44ea2ab0fe95548d1ded005cbb7f927e&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在命令重导向的时候，如果要将数据发送到文件，屏幕上就不会出现任何数据。如果需要将数据同时显示在屏幕和文件中，这时就要使用 tee 命令。使用 last 可以查看这个月份的登录数据，而使用了 tee 之后，会将数据同时传给下一个命令去执行，也会将数据写 last.list 文件中&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/6f5d068ad5b0dd0710dcb75f25fddb87&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/6f5d068ad5b0dd0710dcb75f25fddb87&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;字符转换命令tr-col-join-paste-expand&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符转换命令tr-col-join-paste-expand&#34;&gt;#&lt;/a&gt; 字符转换命令：tr、col、join、paste、expand&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzEudHI=&#34;&gt;1.tr&lt;/span&gt;：可以用来删除一段消息中的文字，或者是进行文字消息的替换&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/a1d637ac39eb839131a37b619768c6ce&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2.col：可以用来将【tab】按键换成空格键&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/d841a31b70bb0fff8eec39c4eb2251ae&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3.join：主要是在处理两个文件中，有相同数据的行，将他们加在一起&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/7c39d4abf31fffc56fb090712036e1dc&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4.paste：直接将两行贴在一起，且中间以【tab】键隔开&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img04.sogoucdn.com/app/a/100520146/3625a0eacc70d68d714654fdecb6f9d5&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;5.expend：将【tab】按键转成空格键&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/4134afcb52371e00b6eba901facddf34&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img02.sogoucdn.com/app/a/100520146/c50fe0a6ba9123143f6d5a513978140a&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;拆分命令split&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拆分命令split&#34;&gt;#&lt;/a&gt; 拆分命令：split&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;如果文件太大，导致无法复制在便携设备中，可以使用 split，它可以将一个大文件、根据文件大小或行数来拆分，将大文件拆分为小文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img01.sogoucdn.com/app/a/100520146/1d42d0a6a2c638c32d06cd108adfc928&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;参数代换xargs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参数代换xargs&#34;&gt;#&lt;/a&gt; 参数代换：xargs&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;args 则是 arguments 的意思。这是产生某个命令的参数的意思。xargs 可以读入是特定的数据，并且以空格符或换行符作为标识，将 stdin 的数据分隔成为参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img03.sogoucdn.com/app/a/100520146/ffa1279689d9746783bb27598114874c&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;减号-的用途&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#减号-的用途&#34;&gt;#&lt;/a&gt; 减号（-）的用途&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;在管道命令中，常常会用到一个命令的 dtdout 作为这次的 stdin，某些命令需要用到文件名称来进行处理时，stdin 与 stdout 可以利用减号（-）来替代&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;tar  -cvf  -home   |   tar  -xvf  -&lt;/p&gt;
&lt;h1 id=&#34;第十二章-正则表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第十二章-正则表达式&#34;&gt;#&lt;/a&gt; 第十二章 正则表达式&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;h3 id=&#34;什么是正则表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是正则表达式&#34;&gt;#&lt;/a&gt; 什么是正则表达式&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;正则表达式就是处理字符串的方法，以行为单位进行字符串的处理，通过一些特殊符号的辅助，可以让用户轻松搜索 / 替换某特定字符串&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;系统管理员使用正则表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统管理员使用正则表达式&#34;&gt;#&lt;/a&gt; 系统管理员使用正则表达式&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;系统的错误消息登录文件的内容记载了系统产生的信息，其中包含系统是否被入侵的记录数据，管理员就可以通过正则表达式，将登录信息进行处理，仅取出有问题的信息来进行分析&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;正则表达式的广泛用途&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正则表达式的广泛用途&#34;&gt;#&lt;/a&gt; 正则表达式的广泛用途&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;正则表达式可以让系统管理员更为方便地管理主机，由于正则表达式强大的字符串处理能力，当前有许多软件都支持正则表达式。常见的就是邮件服务器&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;正则表达式与shell在linux中的角色定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正则表达式与shell在linux中的角色定位&#34;&gt;#&lt;/a&gt; 正则表达式与 Shell 在 Linux 中的角色定位&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;正则表达式是 Linux 基础中的基础，不论是对系统的认识还是进行系统管理，它都会带来很大的帮助&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;扩展的正则表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩展的正则表达式&#34;&gt;#&lt;/a&gt; 扩展的正则表达式&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;正则表达式除了简单的一组字符串处理之外，还可以进行用户组的字符串处理&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;基础正则表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础正则表达式&#34;&gt;#&lt;/a&gt; 基础正则表达式&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;正则表达式是处理字符串的标准表达方式，它需要有支持的工具程序来辅助&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;通过grep选取字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通过grep选取字符串&#34;&gt;#&lt;/a&gt; 通过 grep 选取字符串&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grxpyboiayj30k508ydhh.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;grep 是很常见也很常用的命令，它最重要的功能就是进行字符串数据的比较，然后将符合用户需求的字符串打印出来；grep 除了可以进行文件的数据搜索之外，也常常应用在输入 / 输出的数据处理中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 例题一：搜索特定字符串&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从文件中提取 the 字符串&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep -vn  &#39;the&#39;  regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;取得的 the 字符串不考虑大小写&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep  -in  &#39;the&#39;  regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2. 例题二：利用【】来搜索集合字符&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;搜索 test 或 taste 这两个单词，搜索他们共同的部分&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep  -n  &#39;t[ae]st&#39;   regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;如果像搜索 oo 的字符&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep -n &#39;oo&#39; regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;不想 oo 前面有 g，可利用反向【^】&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep  -n  &#39;[^g]oo&#39;   regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;oo 前面不想有小写字母&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep -n &#39;[^a-z]oo&#39;  regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;取得有数字的行&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep -n &#39;[0-9]&#39;  regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3. 例题三：行首与行尾字符 ^$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果想让 the 只在行首列出&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep  -n &#39;^the&#39; regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;如果想列出开头是小写字母的哪一行&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep -n &#39;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&#39;  regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;开头不想是英文字母&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep  -n  &#39;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn2&#34; id=&#34;fnref2&#34;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&#39; regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;找出行尾结束为小数点的行&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep -n &#39;.$&#39;  regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;找出那行为空白行&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep -n &#39;^$&#39;  regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4. 例题四：任意一个字符（.）与重复字符（*）&lt;/p&gt;
&lt;p&gt;1.（.）代表绝对一个任意字符&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;找出共有 4 个字符的 g??d&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep -n &#39;g..d&#39;  regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.（*）重复 0 个或多个前面的 RE 字符&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;找出至少两个 o 以上的字符串，就需要&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep -n &#39;ooo*&#39;  regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;想要字符串开头与结尾都是 g，但是两个 g 之间仅能至少一个 o&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep -n &#39;go*g&#39; regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;*&lt;em&gt; 如何得到 g...g (.&lt;em&gt; 代表零个或多个任意字符)&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep  -n  &#39;g.*g&#39;  regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5. 例题五：限定连续重复字符范围 {}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要找到两个 o 的字符串&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep -n &#39;o{2}&#39;   regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;找 g 后面接 2-5 个 o，然后再接一个 g 的字符串&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep -n &#39;go{2,5}g&#39; regular_express.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重要特殊字符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重要特殊字符&#34;&gt;#&lt;/a&gt; 重要特殊字符&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d92c0ec29ce.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://www.hualigs.cn/image/60d92c324770a.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;扩展正则表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩展正则表达式&#34;&gt;#&lt;/a&gt; 扩展正则表达式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;/#grep -v &#39;^$&#39;  regular_express.txt  |  grep  -v  &#39;^#&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;/#egrep -v &#39;&lt;sup&gt;$|&lt;/sup&gt;#&#39;  regular_express.txt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;使用支持扩展型正则表达式的 egrep 与特殊字符（|）来分隔两组字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grtfm9ndx0j30l90icn14.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;格式化显示printf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#格式化显示printf&#34;&gt;#&lt;/a&gt; 格式化显示：printf&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grtfmc8nmoj30n10k2gqf.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grtfmc8nmoj30n10k2gqf.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;sed工具简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sed工具简介&#34;&gt;#&lt;/a&gt; sed 工具简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;sed 可以分析标准输入（STDIN）的数据，然后将数据经过处理后，再将它输出到标准输出（STDOUT）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grtfmh3pzlj30j10nhgsf.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grtfmji3oyj30in0e9gpn.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;awk工具简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#awk工具简介&#34;&gt;#&lt;/a&gt; awk 工具简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;与 sed 常常用于整行处理相比，awk 比较倾向于一行中分成数个字段来处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grtfmlw7o3j30nd0coadc.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grtfwxngabj30kx09m3z8.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;文件数据比较与显示的相关功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件数据比较与显示的相关功能&#34;&gt;#&lt;/a&gt; 文件数据比较与显示的相关功能&lt;/h2&gt;
&lt;h3 id=&#34;文件比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件比较&#34;&gt;#&lt;/a&gt; 文件比较&lt;/h3&gt;
&lt;p&gt;1.diff（用于比较两个文件之间的不同，一般用于 ASCII 纯文本文件的比较）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grtgsf42l5j30jt0awwgn.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2.cmp (主要是用于比较两个文件，用位为单位去比较，因此可以比较二进制文件)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d57090d8bd1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3.patch（将旧文件更新到新版内容）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d570d567712.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;文件打印准备pr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件打印准备pr&#34;&gt;#&lt;/a&gt; 文件打印准备：pr&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d57147e5600.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面第一行就是使用 pr 处理后所形成的标题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;重点回顾&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重点回顾&#34;&gt;#&lt;/a&gt; 重点回顾&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d5718760641.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;第十三章-学习shell脚本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第十三章-学习shell脚本&#34;&gt;#&lt;/a&gt; 第十三章   学习 Shell 脚本&lt;/h1&gt;
&lt;h2 id=&#34;什么是shell脚本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是shell脚本&#34;&gt;#&lt;/a&gt; 什么是 Shell 脚本&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;shell 是命令行界面下让我们与系统沟通的工具接口；最简单的功能就是将许多命令写在一起，让用户执行一次就能够执行多个命令；由于这个程序语言由于利用 shell 与相关工具命令，所以不需要编译即可执行；&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;为什么学习shell脚本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么学习shell脚本&#34;&gt;#&lt;/a&gt; 为什么学习 shell 脚本&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自动化管理的重要依据：编写一个简单程序每日自动处理分析，等有问题才通知您&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;追踪与管理系统的重要工作：Linux 系统服务启动的接口，在 /etc/init.d/ 目录下，所有文件都是脚本；包括引导过程也都是利用 shell 脚本来搜索系统的相关数据，然后再代入各个服务的设置参数；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单的入侵检测功能：当系统有异常现象时，将这些异常现象记录在系统记录器，可以在固定几分钟内主动去分析系统登录文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连续命令单一化：将在命令行连续执行的命令写入脚本，通过直接执行脚本来启动一连串的命令行命令；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单的数据处理：可以用 shell 脚本比较数据文件，处理文字数据等；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跨平台支持与缩短学习历程：几乎所有类 UNIX 机器上都可以运行 shell 脚本&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第一个脚本的编写与执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一个脚本的编写与执行&#34;&gt;#&lt;/a&gt; 第一个脚本的编写与执行&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d57218b4b2a.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;执行 shell 文件&lt;/strong&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://www.hualigs.cn/image/60d5724c0180b.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一行：#!/bin/bash 在声明这个脚本使用的 shell 名称：使用的是 bash；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;除了 #！是用来声明 shell 的之外，其他的 #都是注释。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第六行：主要变量的声明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第七行为主要程序部分：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第八行为告知执行结果：使用 exit 命令让程序中断&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;编写shell简本的良好习惯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编写shell简本的良好习惯&#34;&gt;#&lt;/a&gt; 编写 Shell 简本的良好习惯&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d57276b6994.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;简单的shell脚本练习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单的shell脚本练习&#34;&gt;#&lt;/a&gt; 简单的 Shell 脚本练习&lt;/h2&gt;
&lt;p&gt;1. 变量内容由用户决定&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用 read 输入变量内容，利用 $ 变量声明来读取文件&lt;/strong&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://www.hualigs.cn/image/60d572a80a0c4.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2. 利用 date 建立文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d572cd3e777.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3. 数值运算的方法 (+-*/%)&lt;/p&gt;
&lt;p&gt;** 使用方式：var = $((运算内容)) **&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d572e38cf6b.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;善用判断条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#善用判断条件&#34;&gt;#&lt;/a&gt; 善用判断条件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;可通过 &amp;amp;&amp;amp; 及 || 来确定前一个命令是否成功执行；也可通过 test 命令来检测；或者利用 ls 来执行，然后以 $？判断执行结果&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;使用test命令的测试功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用test命令的测试功能&#34;&gt;#&lt;/a&gt; 使用 test 命令的测试功能&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;text 并不会显示任何消息&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#text -e /dmtsai  &amp;amp;&amp;amp;  echo &amp;quot;exist&amp;quot;  ||  echo &amp;quot;no exist&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;测试 /dmtsai 目录是否存在&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d5731534cab.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://www.hualigs.cn/image/60d5731b1623c.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://www.hualigs.cn/image/60d573248961d.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://www.hualigs.cn/image/60d573684bdd6.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;使用判断符号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用判断符号&#34;&gt;#&lt;/a&gt; 使用判断符号【】&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d573c69d296.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;注意事项：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d574365580f.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d57431d508a.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;shell脚本的默认变量0-1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shell脚本的默认变量0-1&#34;&gt;#&lt;/a&gt; Shell 脚本的默认变量（$0、$1...）&lt;/h3&gt;
&lt;p&gt;变量对应关系&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d574365580f.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;执行的文件名为 $0 变量，第一个参数是 $1, 只要在脚本里好好使用 $1，就可以很简单地立即执行某些命令。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例：要执行一个脚本，该脚本会自动列出自己的文件名，还有后面的前 3 个参数&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d574619fe1c.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;条件判断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#条件判断&#34;&gt;#&lt;/a&gt; 条件判断&lt;/h2&gt;
&lt;h3 id=&#34;使用ifthen&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用ifthen&#34;&gt;#&lt;/a&gt; 使用 if...then&lt;/h3&gt;
&lt;p&gt;1. 条件判断&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d5773474ee7.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://www.hualigs.cn/image/60d577464f0ef.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://www.hualigs.cn/image/60d5775b29c45.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://www.hualigs.cn/image/60d5775f9ef75.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://www.hualigs.cn/image/60d5776f3f055.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2.netstat: 查询当前主机是否有打开的网络服务端口&lt;/p&gt;
&lt;p&gt;netstat-tuln：来获取当前主机启动的服务&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d57856ce052.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;测试端口：&lt;br /&gt;
&lt;img data-src=&#34;https://www.hualigs.cn/image/60d578861aeb8.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;使用caseesac&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用caseesac&#34;&gt;#&lt;/a&gt; 使用 case...esac&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d5802453039.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://www.hualigs.cn/image/60d5801573aa3.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接执行时：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1zY3JpcHQtOXAzajU1MnUuc2g=&#34;&gt;利用 script.sh&lt;/span&gt;  variable 的方式来直接给 $1 变量赋以内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;交互式：通过 read 命令让用户输入变量的内容&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d581c6e3d25.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;使用函数功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用函数功能&#34;&gt;#&lt;/a&gt; 使用函数功能&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;函数：在 shell 脚本中类似于自定义的执行命令，可以简化很多程序代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d58204728ff.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d582092d7ac.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;循环判断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环判断&#34;&gt;#&lt;/a&gt; 循环判断&lt;/h2&gt;
&lt;h3 id=&#34;while-do-done-until-do-done&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#while-do-done-until-do-done&#34;&gt;#&lt;/a&gt; while  do  done 、 until  do  done&lt;/h3&gt;
&lt;p&gt;1.while  do  done (当条件成立时，就进行循环，直到条件不成立才停止)&lt;/p&gt;
&lt;p&gt;2.until  do  done (当条件成立时，就终止循环，否则就继续执行循环的程序段)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d582390a386.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d5824ed7243.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d58257de854.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d5827f2631a.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;fordodone&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fordodone&#34;&gt;#&lt;/a&gt; for...do...done&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://www.hualigs.cn/image/60d58408d8add.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;1. 分别输出 dog,cat,elephant&lt;br /&gt;
&lt;img data-src=&#34;https://www.hualigs.cn/image/60d5842748971.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d584301a3fe.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;shell脚本的追踪与调试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shell脚本的追踪与调试&#34;&gt;#&lt;/a&gt; Shell 脚本的追踪与调试&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.hualigs.cn/image/60d58521b8414.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;hr class=&#34;footnotes-sep&#34; /&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;ol class=&#34;footnotes-list&#34;&gt;
&lt;li id=&#34;fn1&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;a-z &lt;a href=&#34;#fnref1&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn2&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;a-zA-Z &lt;a href=&#34;#fnref2&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://theprofessor249.github.io/2021/06/24/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%20%20%20%20Linux%E6%96%87%E4%BB%B6%EF%BC%8C%E7%9B%AE%E5%BD%95%E4%B8%8E%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F/</guid>
            <title>第二部分    Linux文件，目录与磁盘格式</title>
            <link>https://theprofessor249.github.io/2021/06/24/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%20%20%20%20Linux%E6%96%87%E4%BB%B6%EF%BC%8C%E7%9B%AE%E5%BD%95%E4%B8%8E%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F/</link>
            <pubDate>Thu, 24 Jun 2021 14:19:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;linux的文件属性与目录配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux的文件属性与目录配置&#34;&gt;#&lt;/a&gt; Linux 的文件属性与目录配置&lt;/h1&gt;
&lt;h2 id=&#34;用户与用户组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户与用户组&#34;&gt;#&lt;/a&gt; 用户与用户组&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grk7lop27hj30jj0bpjsi.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文件拥有者&lt;/strong&gt;，&lt;strong&gt;用户组&lt;/strong&gt;，&lt;strong&gt;其他人&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任何一个文件都具有用户，用户组和其他人 3 个权限&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;所有系统账号与一般身份用户，以及 root 的相关信息，都记录在 &lt;strong&gt;/etc/passwd&lt;/strong&gt; 文件内；密码记录在 &lt;strong&gt;/etc/shadow&lt;/strong&gt; 文件中；所有用户组名称都记录在 &lt;strong&gt;/etc/group&lt;/strong&gt; 内&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;linux文件权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux文件权限&#34;&gt;#&lt;/a&gt; Linux 文件权限&lt;/h2&gt;
&lt;p&gt;ls   -al：查看文件所有属性&lt;br /&gt;
&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grk7wloeymj30l004vmxw.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grk7wgv2xwj30il06rdgb.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grk7ygpa3jj30n30fpmzo.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;更改文件权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更改文件权限&#34;&gt;#&lt;/a&gt; 更改文件权限&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;chgrp: 改变文件所属用户组&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;chown: 改变文件拥有者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;chmod: 改变文件的属性，SUID 等特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grk89p1b1hj30m70ouq72.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;文件类型与扩展名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件类型与扩展名&#34;&gt;#&lt;/a&gt; 文件类型与扩展名&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;文件类型&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;普通文件：** 纯文本文件（ASCII）** 可以直接读取的数据；&lt;strong&gt;二进制文件（binary）&lt;/strong&gt;: 系统仅执行二进制文件；** 数据格式的文件：** 会读取某些特定格式的文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;目录：第一个属性为【d】&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;连接文件：第一个属性为【l】&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;设备与设备文件： &lt;strong&gt;块设备文件：&lt;/strong&gt; 就是存储数据以供系统访问的接口设备，简单而言就是硬盘； &lt;strong&gt;字符设备文件：&lt;/strong&gt; 即串口端口的接口设备&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;套接字：用在网络数据连接。启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信。第一个属性为【s】，通常在 /var/run 目录中看到这种类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;管道：用于解决多个程序同时访问一个文件造成的错误。第一个属性为 p&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;扩展名&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【*.sh】处理文件（scripts，脚本），处理文件使用 shell 写成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[&lt;em&gt;.tar].[&lt;em&gt;tar.gz];[&lt;/em&gt;.zip];[&lt;/em&gt;.tgz] 经过打包的压缩文件。压缩软件为 gunzip，tar 等，根据不同的压缩软件而取其相关的扩展名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[&lt;em&gt;.html]; [&lt;/em&gt;.php] 网页相关文件，分别表示 HTML 语法与 PHP 语法的网页文件。html 文件可使用网页浏览器直接打开，php 的文件则可以通过客户端的浏览器来浏览服务器端，已得到运算后的网页结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;文件名&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通常用 [_] 与数字和字母构成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Linux 目录配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;绝对路径：&lt;/strong&gt; 由根目录（/）开始写起的文件名或目录名称；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相对路径：&lt;/strong&gt; 只要开头不是（/）就属于相对路径&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;.  ：&lt;/strong&gt; 表示当前目录，也可使用./ 来表示&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;.. :&lt;/strong&gt; 表示上一层目录，也可使用../ 来表示&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各层目录&lt;/strong&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grkzqsfvmej30kl0g33zf.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grl1m16v9fj31970lz76d.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grl1mbjwzej31180g6wfg.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;strong&gt;各层目录存放的文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grl09yhdw2j30o30ev43c.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grl0a0nd0uj30n40l6jy9.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grl09zbar1j30n50c5n1e.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grl0a297cvj30nd0j0tfq.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grl09xbks7j30n80citd2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;/etc/passwd 密码存放&lt;/p&gt;
&lt;p&gt;/etc/shadow 账号存放&lt;/p&gt;
&lt;p&gt;/etc/sysconfig/*  启动时用到的各项设置值&lt;/p&gt;
&lt;p&gt;/var/spool/mail   邮件暂存数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows 与 Linux 安装在同一个硬盘的不同分区时，windows 将不能使用 Linux 的硬盘数据，因为 windows 的核心不认识 Linux 的文件系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;windows98 默认的文件系统时 FAT，windows2000 有 NTFS 文件系统，Linux 的正统文件系统则为 ext2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;整个 Linux 系统都通过虚拟文件系统交换（Virtual Fliesystem Switch,VFS）的核心功能去读取文件系统。也就是说，整个 Linux 认识的文件系统其实都是 VFS 在管理，用户不需要知道分区的文件系统，VFS 会主动帮我们做好读取操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;linux文件和目录管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux文件和目录管理&#34;&gt;#&lt;/a&gt; Linux 文件和目录管理&lt;/h1&gt;
&lt;h2 id=&#34;目录与路径-cd-是change-directory&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目录与路径-cd-是change-directory&#34;&gt;#&lt;/a&gt; 目录与路径 ## （cd   是 Change Directory）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grl2shmmyjj30fb04374l.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grl2z4j252j30k7092q4w.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2.pwd（显示当前所在目录）Print Working Directory&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grl33zpfkaj30mo09atak.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3.mkdir (建立新目录) make directory&lt;br /&gt;
&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grl37u9do5j30ly0bq0vo.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4.rmdir (删除空目录)&lt;br /&gt;
&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grl3ccgptdj30mt09j0uh.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
 rmdir 仅能删除空的目录&lt;/p&gt;
&lt;p&gt;5.$PATH（执行文件路径的变量）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在执行命令时，系统会按照 PATH 的设置，去每个 PATH 定义的路径下搜索执行文件，先搜索到的命令先执行&lt;br /&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grl3jy53f5j30n30230sw.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ls 命令在 /bin/ls 中，/bin 又在 PATH 的设置中。所以可以找到 ls&lt;/p&gt;
&lt;h2 id=&#34;管理文件与目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管理文件与目录&#34;&gt;#&lt;/a&gt; 管理文件与目录&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzEubHM=&#34;&gt;1.ls&lt;/span&gt;（查看文件和目录）&lt;br /&gt;
&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grl3pis09pj30mq0ern1m.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2.cp（复制文件或目录）copy&lt;/p&gt;
&lt;p&gt;-f： 强制&lt;/p&gt;
&lt;p&gt;-l： 建立硬链接&lt;/p&gt;
&lt;p&gt;-u： 比较文件的新旧&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grl3va99r8j30l60m545d.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grl3v7xfxrj30la0bbad4.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grl3x0f477j30nc0d20wc.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3.rm（删除文件或目录）remove&lt;br /&gt;
&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grl44zc9mqj30me0hvjty.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzQubXY=&#34;&gt;4.mv&lt;/span&gt;（移动文件与目录，或重命名）move&lt;br /&gt;
&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grl4a123hfj30m20ffgpg.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;查看文件内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看文件内容&#34;&gt;#&lt;/a&gt; 查看文件内容&lt;/h2&gt;
&lt;p&gt;1.cat（concatenate）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grl4ff28itj30m40gq76z.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般环境，显示出来的结果有【tab】与空格键，其实看不出来，所以使用 cat   -A，一些特殊福豪就会显示出来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.tac (反向显示)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grl8n45n32j30ne05kmy7.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzMubmw=&#34;&gt;3.nl&lt;/span&gt;（显示时添加行号）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grl8p5ncsxj30lm0dcjty.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grl8p0t0ngj30lr0970u0.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4.more（一页一页翻动）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grl8smuffwj30mf03faat.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;5.less（一页一页翻动）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grl8tql5e6j30ml05hab1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;6.head（取出前几行）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grl8vdaie1j30ma05kjs2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;7.tail（取出后几行）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grl8wajlwmj30mc059dgj.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;8.od（非纯文本文件）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于执行文件通常是二进制文件，使用前面提到的命令来读取它的内容时，会产生乱码，我们可以利用 od 这个命令来读取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grl8xlub9bj30ly0amgo8.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;9.touch（修改文件时间与创建新文件）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;modification time (mtime 修改时间)：当该文件的内容数据更改时，就会更新这个时间。内容数据指的是文件的内容，而不是文件的属性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;status time (ctime 状态时间)：当该文件的状态改变时，就会更新这个时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;access time (atime 访问时间)：当读取文件内容时，就会更新这个读取时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grl98q83frj30m60m8grp.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;文件与目录的默认权限与隐藏权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件与目录的默认权限与隐藏权限&#34;&gt;#&lt;/a&gt; 文件与目录的默认权限与隐藏权限&lt;/h2&gt;
&lt;p&gt;1.umask（文件默认权限）该默认值需要减掉的权限&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grl9kkb6emj30m9032mx6.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般 umask 是用于减法，002 相当于在原本权限的基础上去掉其他人权限的写&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;r , w , x&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;4 , 2 , 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.chattr (设置文件隐藏属性)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grl9tv2rnej30lz0eswj8.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这些属性是隐藏的，所以需要用 lsattr 才能看到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;最重要的是 + i 属性，因为它可以让一个文件无法被更改，对于需要很高系统安全性的用户来说，相当重要；如果是登入文件，就需要 + a 参数，使之可以增加但不能修改与删除原有的数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.lsattr（显示文件的隐藏属性）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grl9z851b3j30m205lwf4.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4.SUID/SGID/Sticky Bit (文件特殊权限)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Set UID：当 s 权限在 user 的 x 时，也就是类似 - r-s--x--x, 称为 Set UID，简称为 SUID，这个 UID 表示 User 的 ID，而 User 表示这个程序（/usr/bin/paddwd）的拥有者 (root);SUID 仅可用于二进制文件，因为 SUID 是程序在执行过程中拥有文件拥有者的权限，因此，它仅可用二进制文件，不能用在批处理文件（shell 脚本）上，shell 脚本知识调用很多二进制文件而已； SUID 对目录是无效的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Set GID：** 文件：** 如果设置在二进制文件上，在执行该程序时，它的有效用户组将会变成该程序的用户组所有者；** 目录：** 如果设置到目录内，该目录的文件或目录的用户组都将会变成该程序的用户组所有者；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Sticky Bit：只针对目录有效，对文件没有效果；将目录加上 SBit 的权限，则用户只能够&lt;strong&gt;针对自己建立的文件或目录&lt;/strong&gt;进行删除 / 重命名 / 移动等操作，对其他人创建的不能操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;4 为 SUID&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2 为 SGID&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;1 为 Sticky Bit&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grlb0jy7zdj30m40cujsq.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;5.file（文件类型）查询是属于 ASCII，数据文件，二进制文件，是否使用到冬天函数库等信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grlb0jy7zdj30m40cujsq.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;搜索文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#搜索文件&#34;&gt;#&lt;/a&gt; 搜索文件&lt;/h2&gt;
&lt;p&gt;1.which（寻找执行文件）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grlbveq130j30m505n750.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2.whereis（寻找特定文件）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grlbw3tur0j30m40am0ur.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3.locate（寻找文件的部分名称）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grlbx1v0v5j30me04r3z5.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4.find（查找特定参数的文件）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grlbziunxyj30lx0l3wlu.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grlc0nao8mj30ku02mgm2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;linux磁盘与文件系统管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux磁盘与文件系统管理&#34;&gt;#&lt;/a&gt; Linux 磁盘与文件系统管理&lt;/h1&gt;
&lt;h2 id=&#34;认识ext2文件系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#认识ext2文件系统&#34;&gt;#&lt;/a&gt; 认识 EXT2 文件系统&lt;/h2&gt;
&lt;h3 id=&#34;硬盘物理组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬盘物理组成&#34;&gt;#&lt;/a&gt; 硬盘物理组成&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grlcgzplecj309s07kdg5.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grlch4dvflj30m60d1wfv.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;分区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分区&#34;&gt;#&lt;/a&gt; 分区&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么要分区，因为我们必须要告诉操作系统：这块硬盘可以访问的区域是由 A 柱面到 B 柱面，如此一来，操作系统才能够控制硬盘磁头去 A~B 范围内的柱面访问数据；&lt;strong&gt;分区的要点：就是记录每一个分区的起始与结束柱面&lt;/strong&gt;；MBR 就是在一块硬盘的第 0 轨上，这也是计算机启动之后要去使用硬盘时必须读取的第一个区域。这个区域内记录了硬盘里的所有分区信息，以及启动时可以写入引导程序的位置。当一个硬盘的 MBR 坏掉时，这个硬盘也算寿终正寝了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;文件系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件系统&#34;&gt;#&lt;/a&gt; 文件系统&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;硬盘的最小存储单位是扇区，而数据所存储的最小单位并不是扇区，因为用扇区来存储效率低，为了提高效率，引入逻辑块，逻辑块是在分区进行文件系统的格式化时所指定的最小存储单位（以扇区大小为基础），块的大小为扇区的 2^n 倍数，磁头一次可以读取一块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;块单位的规划并不是越大越好，因为一个块最多仅能容纳一个文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;要考虑以下问题：文件读取的效率；文件大小可能造成硬盘空间的浪费。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;每个文件系统开始位置的那个快就称为超级块，超级块的作用是存储文件系统的大小，空的和填满的块，以及他们各自的总数和其他诸如此类的信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;ext2文件系统inode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ext2文件系统inode&#34;&gt;#&lt;/a&gt; EXT2 文件系统（inode）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在标准的 ext2 文件系统中，将每个文件的内容分为两个部分来存储，一个是文件的属性，另一个则是文件的内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下是 inode 的内容&lt;br /&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grldqc91inj30mj05lt9y.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 Linux 的 ext2 文件系统建立一个目录时，ext2 会给该目录分配一个 inode 与至少一个块。inode 记录该目录的相关属性，并指向分配到的那个块；块记录在这个目录下的相关文件的关联性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 Linux 下的 ext2 建立普通文件时，ext2 会给该文件分配至少一个 inode 与相对于该文件大小的块数量&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grldvanxcgj30m0074q3k.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grldvd2h68j30np0gigqx.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ext2 的相关信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grldxk10buj30mk05fmzc.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grldxnugdyj30mc0cr440.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;ext2ext3文件的访问与日志文件系统的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ext2ext3文件的访问与日志文件系统的功能&#34;&gt;#&lt;/a&gt; EXT2/EXT3 文件的访问与日志文件系统的功能&lt;/h3&gt;
&lt;p&gt;当建立 ext2 的文件系统时，有以下几个部分&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grle2fue9tj30mo08jjtv.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grle2qk6ovj30mj0hhabj.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以使用 dumpe2fs 命令来读取某个 ext2/ext3 的文件系统内的这些信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grle7a2refj30ni04x765.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据的不一致状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grle8akkjdj30nk06s0w8.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;linux文件系统的运行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux文件系统的运行&#34;&gt;#&lt;/a&gt; Linux 文件系统的运行&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;整个 ext2/ext3 的数据访问是通过日志与元数据以及数据存放区记录，当系统在运行的时候，系统读取某个文件，则这个文件会加载到内存中，所以该磁盘就会放在主存储器的缓冲区中。若这些块的数据被改变时，刚开始只有主存储器中的块数据会被改变，而且在缓冲区中的快数据会被标记为脏 dirty，这个时候，磁盘实体块尚未被修正，所以脏块的数据必须回写到磁盘中，以维持磁盘实体块上的数据与主存储中的块数据的一致性。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;载入点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#载入点&#34;&gt;#&lt;/a&gt; 载入点&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;要能够使用 Linux，必须要载入 Linux 系统。目录可以记录文件名与 inode 的相关信息。目录与文件系统产生对应的入口点，我们称之为点目录为载入点；将硬盘划分为几个分区，并将 / 与 /home 设置为两个分区的载入点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grxyr7xqhtj30i301waa7.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;载入点一定时目录而不是文件，载入点就是进入该文件系统的入口&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;linux支持的其他文件系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux支持的其他文件系统&#34;&gt;#&lt;/a&gt; Linux 支持的其他文件系统&lt;/h3&gt;
&lt;p&gt;常见的支持文件系统有：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grxyrz2ffgj30ia0akwfu.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;假设 / 使用的是 /dev/hdal, 用 ext3，而 /home 使用 /dev/hda2, 用 reiserfs, 那么采用 /home/dmtsai/.bashrc 时，linux 核心的 VFS 管理所有的文件系统，不需要自行设置读取文件系统的定义&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;文件系统的简单操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件系统的简单操作&#34;&gt;#&lt;/a&gt; 文件系统的简单操作&lt;/h2&gt;
&lt;h3 id=&#34;磁盘与目录的容量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘与目录的容量&#34;&gt;#&lt;/a&gt; 磁盘与目录的容量&lt;/h3&gt;
&lt;p&gt;1.df - 查看所有的文件系统的容量&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grxyszaybpj30j20gdte8.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grxyz88sm8j30i70diwhv.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2.du - 列出所有文件与目录容量&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grxyzj7nraj30im0ly42l.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;连接文件in&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接文件in&#34;&gt;#&lt;/a&gt; 连接文件：In&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;连接文件有点类似 Windows 的快捷方式，也就是很多的链接文件其实都指向同个源文件；连接文件还分成硬连接与符号连接两种&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 硬连接或实际连接&lt;/p&gt;
&lt;p&gt;文件的读取方式：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grxyzs8do6j30jc02u0tj.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/root/crontab 为一个硬连接的文件，它连接到 /etc/crontab 文件，其实 /root/crontab 与 /etc/crontab 是同一个文件，只是两个目录（/etc 与 /root）记录了 crontab 文件的关联数据。也就是说，由 /etc 所记录的关联数据可知，crontab 的 inode 放在 A 处，而 /root 目录下的关联数据，crontab 同样也指到 A 处的 inode，所以 crontab 文件的 inode 与块都没有改变，只是有两个目录记录了关联数据。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最大的好处就是安全。就是不管删除了那个文件，其实仅删除目录下面的文件关联数据，并没有更改原文件的 inode 与块数据。不论由哪个目录连接到正确的 crontab 的 inode 与块，都可以正确无误地进行数据的修改。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;硬链接设置连接文件时，磁盘空间与 inode 的数目都不会改变。由上面的说明可以知道，硬链接只是在某个目录下的块写入一个关联数据，所以并不会用掉 inode 与磁盘空间。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grxz02eff2j30ij01zjrk.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2. 符号连接（即快捷方式）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;符号连接就是建立在一个独立的文件，这个文件会让数据的读取指向它连接的文件内容，由于只是利用文件来作为指向的动作，所以，当源文件被删除之后，符号连接的文件不能打开，会显示无法打开某文件。符号连接与 windows 的快捷方式可以划上等号。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grxz0h0sxoj30hx0l80yo.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grxz0ooxhjj30i504aq3j.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 In 如果不加任何参数，就是硬链接；如果 In 使用 - s 参数，所创建的就类似 Windows 的快捷方式，当修改 linux 下的连接文件时，更改的其实是原始文件，所以不论原始文件连接到哪里，只要修改了连接文件，原始文件就跟着变&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3. 目录的连接数量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当建立新目录时，新目录的连接数为 2，而上层目录的连接数则会增加 1&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;磁盘的分区-格式化-检验与载入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘的分区-格式化-检验与载入&#34;&gt;#&lt;/a&gt; 磁盘的分区、格式化、检验与载入&lt;/h2&gt;
&lt;p&gt;新增硬盘步骤：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grxzttfj1yj30jc02u0tj.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;分区fdisk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分区fdisk&#34;&gt;#&lt;/a&gt; 分区:fdisk&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grxzwaynmbj30j00l379g.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grxzx5bzilj30ig07ndhm.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grxzxemuaqj30jd0hfdjq.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;1. 删除分区&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grxzy33nmfj30ln0jygoo.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grxzym42aij30jy069myd.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2. 新增分区&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grxzyx1socj30kt0ban0m.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grxzz6zkvcj30k40li78u.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grxzzdkd0nj30jn08iabb.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grxzzj8pz0j30jy08gjsu.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3. 操作环境的说明&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以 root 身份进行硬盘分区时，在单用户维护模式下比较安全。在进行 fdisk 的时候 1，如果该硬盘的某个分区还在使用，那么很有可能系统核心会无法重新加载硬盘的分区表，解决方法就是卸载使用中的分区，然后再重新进入 fdisk，重新写入分区表，这样就可以成功&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4. 注意事项&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;虽然一个硬盘最大的逻辑分区可以到 63 号（总数，包含 1-4 的主分区），但并非所有的 Linux 版本都会将所有的逻辑分区对应的磁盘号都写入系统中&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;磁盘格式化-mke2fs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘格式化-mke2fs&#34;&gt;#&lt;/a&gt; 磁盘格式化  mke2fs&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8gry11cyl3pj30k00avgo0.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8gry11quz22j30js02074m.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8gry11wvr7cj30kx09y77n.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;磁盘检验fsck-badblocks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘检验fsck-badblocks&#34;&gt;#&lt;/a&gt; 磁盘检验：fsck、badblocks&lt;/h3&gt;
&lt;p&gt;1.fsck - 用来检查与修正硬盘错误的命令，通常只有身为 root 且系统有问题的时候才用这个命令，否则在正常状态下使用此命令，可能会损坏文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8gry124njv3j30je0b041p.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2.badblocks - 用来检查硬盘或软盘是否有坏轨的命令&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8gry129ykfzj30jh05jab0.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3.sync - 可以直接将系统暂存在内存中的数据写入磁盘中&lt;/p&gt;
&lt;h3 id=&#34;磁盘载入与卸载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘载入与卸载&#34;&gt;#&lt;/a&gt; 磁盘载入与卸载&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8gry12jkffmj30jk0ihgre.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8gry12rft6sj30jp0k00x9.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;默认情况下，mount 命令只有 root 才能执行；如果想将整个系统中记录的文件系统与载入点对应的数据全部都载入，那么执行 mount   -a ；由于 Linux 系统中，各一个路径都有可能是一个独立的分区系统，所以需要将每个分区系统都挂上各自的载入点；由于各个分区的文件系统可能并不相同，所以必须要先了解该区的文件系统，这样才可以载入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8gry13677pwj30kq0fl40m.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;修改磁盘参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改磁盘参数&#34;&gt;#&lt;/a&gt; 修改磁盘参数&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;修改磁盘的卷标、日志参数、或者是其他硬盘运行时的相关参数（如 DMA 启动与否）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.mknod&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8gry13twn6lj30l50fhad0.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2.e2label - 主要功能是用来修改磁盘的表头数据，也就是卷标&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8gry144rti3j30ks03ltae.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在载入磁盘的时候，除了使用磁盘号之外，也可以直接使用磁盘卷标作为载入的磁盘载入点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8gry144rti3j30ks03ltae.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3.tune2fs&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8gry14h9xjkj30jn043t9h.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4.hdparm - 主要用于启动 DMA 模式，并测试硬盘的访问性能&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8gry14qs6xqj30jw08341f.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8gry15a9jvgj30js0ljgrp.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8gry15a9jvgj30js0ljgrp.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令只有 root 才能执行。需要特别注意，-X 参数是很危险的参数设置，除非您非常了解硬盘结构，否则不要自行设置&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;设置启动载入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置启动载入&#34;&gt;#&lt;/a&gt; 设置启动载入&lt;/h2&gt;
&lt;h3 id=&#34;载入磁盘-中文编码和u盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#载入磁盘-中文编码和u盘&#34;&gt;#&lt;/a&gt; 载入磁盘、中文编码和 U 盘&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;linux 或 UNIX 系统之下，是以目录来表示，也就是一个目录可能就是一个分区；例如通常 Linux 默认的软盘载入点在 /mnt/floppy, 如果需要软盘的数据时，就将 /dev/fd0 设备（这是访问设备的一个设备文件类型）挂上 /mnt/floppy 即可，就可以读取软盘的数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 载入软盘（格式为 ext2）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8gry302r1zoj30k702c74i.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;即使是 windows 格式的文件，在 linux 下仍然是可读取。要注意，使用完软盘，一定要将 /media/floppy 卸载之后才可以取出软盘，否则系统会一直告诉您发生错误；当卸载 /media/floppy 的时候，一定不能在该目录中，否则会发生错误信息；如果加载的格式不符合，系统也不会将该软盘挂载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2. 载入 windows 磁盘&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;假设 windows 的 VFAT 文件系统是在 /dev/hda1 下，如果想将该分区载入到 /mnt/win98，该如何做？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8gry30fzp72j30j5026aaa.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3. 载入 U 盘&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8gry30lvkyfj30ja01v749.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;启动载入etcfstab和etcmtab&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动载入etcfstab和etcmtab&#34;&gt;#&lt;/a&gt; 启动载入 /etc/fstab 和 /etc/mtab&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;载入的限制：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8gry30lvkyfj30ja01v749.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/etc/fstab 就是使用 mount 将设备载入到系统的某个载入点所需执行的命令内容，将这些内容都写到 /etc/fstab 里，让系统一启动就主动载入。当 mount 发出命令时，需要的参数有设备号、载入点、文件系统类别、参数等，/etc/fstab 加入了两项额外的功能，分别是是否执行备份命令 dump，以及是否启动使用 fsck 扫描磁盘&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8gry315v05ej30ik05z0tu.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;1. 磁盘设备号或该设备的卷标&lt;/p&gt;
&lt;p&gt;2. 载入点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;载入点就是目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3. 分区的文件系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux 在传统上使用的是 ext2/ext3 等文件系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4. 文件系统参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个文件系统还可以加入很多参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8gry31fpsuuj30k40d6td5.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;5.dump 备份命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用 dump 命令来进行系统备份。dump 命令则会针对 /etc/fstab 的设置值，去选择是否要将该分区进行备份。0 表示不要做 dump 备份，1 表示要进行 dump 备份，2 表示要做 dump 备份&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;6. 是否以 fsck 检验分区&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;启动过程中，系统默认以 fsck 检验分区内的文件系统是否完整&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8gry31nue8qj30kd058myy.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;建立虚拟内存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建立虚拟内存&#34;&gt;#&lt;/a&gt; 建立虚拟内存&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;在 Linux 中，如果需要使用大量的虚拟内存，但是 swap 分区不够大，可以采用下列方法来实现：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8gry31tlwkqj30is010747.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;建立虚拟内存设备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建立虚拟内存设备&#34;&gt;#&lt;/a&gt; 建立虚拟内存设备&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8gry31ym9fuj30kx04zjt5.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;建立虚拟内存文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建立虚拟内存文件&#34;&gt;#&lt;/a&gt; 建立虚拟内存文件&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8gry329cwqjj30l70kxteo.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8gry32f20fvj30jf05hq3h.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;文件的压缩与打包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的压缩与打包&#34;&gt;#&lt;/a&gt; 文件的压缩与打包&lt;/h1&gt;
&lt;h2 id=&#34;压缩文件的用途与技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#压缩文件的用途与技术&#34;&gt;#&lt;/a&gt; 压缩文件的用途与技术&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;比较大型的文件通过文件压缩之后，可以降低磁盘使用量，减少文件大小；有的压缩程序还可以进行容量限制，使一个大型文件可以分割成为数个小文件&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;linux系统常见的压缩命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux系统常见的压缩命令&#34;&gt;#&lt;/a&gt; Linux 系统常见的压缩命令&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;常见压缩扩展名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;h3 id=&#34;compressz&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#compressz&#34;&gt;#&lt;/a&gt; compress（*.Z）&lt;/h3&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;compress 程序压缩是最简单的压缩命令，使用的时候需要特别留意，通过 compress 压缩之后，如果没有使用其他参数，那么源文件就会被后来的&lt;/em&gt;.Z 所取代&lt;/em&gt; *&lt;/p&gt;
&lt;h3 id=&#34;gzip-zcat-gz&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gzip-zcat-gz&#34;&gt;#&lt;/a&gt; gzip、zcat (*.gz)###&lt;/h3&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;gzip 是用来压缩与解压缩扩展名为&lt;/em&gt;.gz 的命令，在看到&lt;/em&gt;.gz 的文件时，它是通过 gzip 程序压缩的。**&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;zcat 则是用来读取压缩文件数据内容的命令，zcat 命令可以同时读取 compress 与 gzip 的压缩文件&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;bzip2-bzcatbz2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bzip2-bzcatbz2&#34;&gt;#&lt;/a&gt; bzip2、bzcat(*.bz2)&lt;/h3&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;h3 id=&#34;tartar&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tartar&#34;&gt;#&lt;/a&gt; tar（*.tar）&lt;/h3&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tar 可以将整个目录或者是指定的文件都整合成一个文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅打包，不压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tar  -cvf   /tmp/etc.tar    /atc&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打包后压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;tar  -xcvf  /tmp/etc.tar.gz   /etc&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打包后，以 bzip2 压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tar  -jcvf   /tmp/etc.tar.bz2   /etc&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看压缩文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tar  -xtvf   /tmp/etc.tar.gz&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件解压&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;tar -zxvf   /tmp/etc.tar.gz&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在别的目录下解压压缩文件中的部分文件夹&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tar -zxvf  /tmp/etc.tar.gz   etc/passwd&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;备份所有文件，并且保存其权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tar  -zxvpf   /tmp/etc.tar.gz   /etc&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://theprofessor249.github.io/2021/06/24/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%20%20%20%20%20%E8%AE%A4%E8%AF%86Linux%E5%8F%8ALinux%E4%B8%BB%E6%9C%BA%E8%A7%84%E5%88%92%E4%B8%8E%E5%AE%89%E8%A3%85/</guid>
            <title>第一部分     认识Linux及Linux主机规划与安装</title>
            <link>https://theprofessor249.github.io/2021/06/24/%E7%AC%94%E8%AE%B0%E7%B1%BB/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%20%20%20%20%20%E8%AE%A4%E8%AF%86Linux%E5%8F%8ALinux%E4%B8%BB%E6%9C%BA%E8%A7%84%E5%88%92%E4%B8%8E%E5%AE%89%E8%A3%85/</link>
            <pubDate>Thu, 24 Jun 2021 14:19:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;第一部分-认识linux及linux主机规划与安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一部分-认识linux及linux主机规划与安装&#34;&gt;#&lt;/a&gt; 第一部分     认识 Linux 及 Linux 主机规划与安装&lt;/h1&gt;
&lt;h2 id=&#34;什么是linux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是linux&#34;&gt;#&lt;/a&gt; 什么是 linux&lt;/h2&gt;
&lt;h3 id=&#34;什么时linux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么时linux&#34;&gt;#&lt;/a&gt; 什么时 Linux&lt;/h3&gt;
&lt;p&gt;超级计算机：超级计算机是运行速度最快的计算机，主要用于需要有高速计算的项目中，如国防军事，气象预测，太空科技等&lt;/p&gt;
&lt;p&gt;大型机：大型机具有数个高速 CPU，功能上虽不及超级计算机，但可用来处理大量数据与复杂的运算&lt;/p&gt;
&lt;p&gt;小型机：小型机具有大型机同时支持多用户的特性，通常用于科学研究，工程分析与工厂的流程管理&lt;/p&gt;
&lt;p&gt;微机：又称个人计算机，微机体积小，价格低，但功能完备&lt;/p&gt;
&lt;h3 id=&#34;什么是操作系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是操作系统&#34;&gt;#&lt;/a&gt; 什么是操作系统&lt;/h3&gt;
&lt;p&gt;操作系统能正确地控制硬件工作，该系统就称为操作系统。操作系统可以管理整台计算机的硬件，可以控制 CPU 进行正确的计算，可以分辨硬盘里的数据并进行读取，它还必须能够识别所有的适配卡，这样才能正确地使用所有的硬件。&lt;br /&gt;
比肩完整的操作系统包含两个组件，一个是核心与其提供的接口工具，另一个是利用核心提供的接口工具所开发的软件。&lt;/p&gt;
&lt;h3 id=&#34;什么是核心&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是核心&#34;&gt;#&lt;/a&gt; 什么是核心&lt;/h3&gt;
&lt;p&gt;核心就是 Kernel，它是操作系统最底层的东西，每个操作系统都有自己的核心，由它来掌管整个硬件资源的工作状态。当有新的硬件加入到系统中时，若核心并没有支持它，这个新硬件就无法工作，因为控制它的核心并不认识它，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心所要管理的事项：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;系统调用接口：通过接口，程序开发人员可以轻松地与核心沟通，进一步利用硬件资源&lt;/p&gt;
&lt;p&gt;进程控制：在多任务环境中，一台计算机可能同时有很多地作业等待 CPU 运算处理，核心这时必须能够控制这些作业并有效地分配 CPU 地资源&lt;/p&gt;
&lt;p&gt;内存管理：控制整个系统地内存，如果内存不足，核心还能提供虚拟内存地功能&lt;/p&gt;
&lt;p&gt;文件系统管理：文件系统地管理，如果核心不能识别某个文件系统，那么将无法使用该文件格式地文件&lt;/p&gt;
&lt;p&gt;设备驱动程序：” 可加载模块 “功能可以将驱动程序编辑成模块，而不需要重新编译核心&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grjui0sasej30iv0bcjst.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;下面为主要地linux版本地发行者网址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下面为主要地linux版本地发行者网址&#34;&gt;#&lt;/a&gt; 下面为主要地 Linux 版本地发行者网址&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grjv6ra23yj30nv0joadz.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;其他相关信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他相关信息&#34;&gt;#&lt;/a&gt; 其他相关信息&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;各个版本也都要遵循 LSB 地规范，硬软件开发人员也会遵照 LSB，                                  LSB：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5saW51eGJhc2Uub3JnLw==&#34;&gt;http://www.linuxbase.org/&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;服务器：提供 Internet 一种以上网络服务地主机，自己架设一台邮件服务器也是小型地服务器&lt;/p&gt;
&lt;p&gt;工作站：仅提供给一组特定人员进行数值分析，科学研究。只要是没有对 Internet 提供网络服务地，那就是工作站，当然也包括所谓地终端&lt;/p&gt;
&lt;p&gt;终端：就是最终用户地那台计算机。例如笔者使用地机器连接上主机来工作，那么，这台计算机就可以称为终端&lt;/p&gt;
&lt;h2 id=&#34;如何学习linux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何学习linux&#34;&gt;#&lt;/a&gt; 如何学习 Linux&lt;/h2&gt;
&lt;h3 id=&#34;linux地应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux地应用&#34;&gt;#&lt;/a&gt; Linux 地应用&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;网络服务器&lt;/strong&gt;：承袭了 Unix 地高稳定性，Linux 地网络功能特别稳定与强大。作为网络服务器，例如 WWW，邮件服务器，文件服务器，FTP 服务器等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作站计算机&lt;/strong&gt;：工作站不提供 Internet 服务，工作站计算机与台式计算机不太一样，工作站通常面对比较重要地应用，如工程界流体力学地数值模式运算，娱乐界地特效处理，软件开发人员地工作平台。Linux 有强大地运算能力，支持相当广泛地 GCC 编译软件，在工作站中，它也是相当不错地一个操作系统。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;台式计算机&lt;/strong&gt;：办公室使用地。工作包括如下几种：&lt;/p&gt;
&lt;p&gt;上网浏览&lt;/p&gt;
&lt;p&gt;文字处理&lt;/p&gt;
&lt;p&gt;网络接口地文字处理系统&lt;/p&gt;
&lt;p&gt;办公软件处理数据&lt;/p&gt;
&lt;p&gt;手法电子邮件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;嵌入式系统：&lt;/strong&gt; 小型电脑地开发。例如家电产品，PDA，手机，数字相机以及其他微型地计算机设备。这些计算机设备都是需要操作系统来控制，操作系统直接嵌入产品中。&lt;/p&gt;
&lt;h3 id=&#34;基础学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础学习&#34;&gt;#&lt;/a&gt; 基础学习&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grjw6g1zbvj30mo07n40k.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grjw9qu5v9j30o50g241v.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grjwbwqy4qj30m002sq3n.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grjwhzpumhj30op07zdhx.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grjwknr4avj30mk06k0uk.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;linux主机地规划&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux主机地规划&#34;&gt;#&lt;/a&gt; Linux 主机地规划&lt;/h2&gt;
&lt;h3 id=&#34;认识主机硬件主件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#认识主机硬件主件&#34;&gt;#&lt;/a&gt; 认识主机硬件主件&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grjwqsupd0j30o00nddj9.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;电脑槽口图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#电脑槽口图&#34;&gt;#&lt;/a&gt; 电脑槽口图&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva4.sinaimg.cn/large/008jSNE7ly8grjwwx42mcj30dn0d70ts.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 中央处理器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;双核心&lt;/strong&gt;：是指在一个 CPU 里有两个运算单元，该双核心地 CPU 有两个可以运算地实体 CPU&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;频率&lt;/strong&gt;：就是单位时间地运算次数。频率越高，表示设备地运算次数越多，速度就会越快&lt;/p&gt;
&lt;p&gt;）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CPU 有倍频与外频之分，外频是指 CPU 与接口设备进行数据传输 / 运算地速度，倍频则是指 CPU 本身运算时地运算速度。两者相乘才是 CPU 地频率。与外频有关的是内存与主板芯片集。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-CPU 外频与倍频：：133（外频）*7（倍频）MHZ；&lt;/p&gt;
&lt;p&gt;-RAM 频率：通常与 CPU 的外频相同，为 133MHz；&lt;/p&gt;
&lt;p&gt;-PCI 接口（包括网卡，声卡等的接口）133/4=33MHz；&lt;/p&gt;
&lt;p&gt;-AGP 接口：133/2=66MHz（这是 AGP 正常的频率）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;外频是可以超频的。如果 CPU 外部频率是 133. 通过工具，就可以将 133 提升到比较高的频率，就叫超频。如果超频高出正常值很多，虽然设备的运行频率都会提升，但是也可能会造成系统不稳定，常常死机，或者造成某些组件的寿命减短。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;2. 内存&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;操作系统的核心，软硬件的驱动程序，所有要读取的文件，都需要先读入内存之后，才传输给 CPU 来运行；也会将常用的文件或程序等数据存储在内存中，而不直接删除，如此一来，下次访问这些数据时，不需要访问外部设备就能读取，提高了系统的运行速度；内存规格主要有两种：SDRAM 与 DDR。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;3. 显卡 VGA 卡&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了避免由于大量的 3D 画面造成 CPU 的负载过大，显卡开发商在显卡上安装了一个可以处理这些很耗 CPU 运算时间的硬件 GPU，来处理画面数据；当前显卡有两种规格：一种是以传统的 AGP 接口来进行影像数据的传输，另一种则是以更快的 PCI Express 接口来传输数据；VGA 卡上也有一个内存，该内存大小可以影响屏幕输出的分辨率与画面质量，它是直接嵌入在显卡上的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;4. 硬盘与访问设备&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主机需要加载数据，这些数据就存放在主机的硬盘上。我们可以通过便携式存储媒体，例如光盘，Zip 磁盘，软盘等来传递数据。主流的硬盘访问接口应该是 SATA 与 IDE；当选购硬盘是，除了注意硬盘的容量大小之外，还要知道硬盘的转速以及缓存的大小。我们要求是，转速至少为 7200 转，缓存最好选择 8MB。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;5.PCI 适配卡&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;p&gt;网卡，声卡，特数功能卡等，都是通过 PCI 插槽来安装的&lt;/p&gt;
&lt;p&gt;网卡：目前采用的是 RJ-45 的接口插孔，这种接口有点像电话线插孔，不过要稍微大一些。由于网络需求提高，最高网卡速度已达到吉比特（Gbit/s）。也可以选购 10/100/1000Mbit/s 的网卡。&lt;/p&gt;
&lt;p&gt;SCSI 适配卡：可以用来连接 SCSI 接口的设备。由于 SCSI 接口的设备比较稳定，而且设备运行速度较快，耗费 CPU 资源较少。SCSI 适配卡是大型服务器主机的硬盘传输接口，如果是个人计算机，采用 IDE/SATA 接口就够了，SCSI 接口的硬盘很贵。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 主板&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grk3ecgjwij30fn0argmc.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;芯片集：就是负责与 CPU，RAM，输出与输入设备通信；CPU 的外频就是指芯片集与其他设备通信的速度；芯片集只能支持集中规格，无法支持所有的规格，所以在选购时，需要一起考虑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I/O 地址与 IRQ 中断：既然主板是负责各个计算机系统组件之间的通信，有输入输出，又有不同的储存设备，所以利用 I/O 与 IRQ，使得每台设备都有自己的地址，如若发生端口之间的冲突，可以手动设置各台设备的 I/O, 还可利用 IRQ 中断。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;BIOS：是 Basic Input/Output System（基本输入 / 输出系统）的缩写，上面提到的 I/O,IRQ 等，都可以通过操作系统，亦可以通过主板提供的 BIOS 功能来设置。启动的时候，屏幕出现的版本信息就是 BIOS 的设置。可以在机器启动时按下 DEL，来设置启动顺序，I/O 以及 IRQ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;其他输出输入接口：&lt;strong&gt;PS2 接口&lt;/strong&gt;：键盘与鼠标的接口，插孔为圆形的；**9 针串行端口：** 以前用来连接鼠标的接口，常称为 coml；**25 针并行端口：** 通常用来连接打印机，LPT1；** 声音输出，输入与麦克风：** 圆形插孔，主板上必须装有内置音效芯片，才会有这三个设备；**USB：** 支持即插即用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;电源：电源至少也要 300W 以上才能够主机使用，有些特殊的主机要求至少 400-500W 以上的电源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;关于速度 / 稳定性的问题：&lt;strong&gt;系统超频；&lt;/strong&gt; &lt;strong&gt;电源不稳定；&lt;/strong&gt; &lt;strong&gt;内存负荷；&lt;/strong&gt; &lt;strong&gt;系统过热；&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;适合主机的硬件配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#适合主机的硬件配置&#34;&gt;#&lt;/a&gt; 适合主机的硬件配置&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/008jSNE7ly8grk4e7ljnsj30o60kntcc.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;linux中的硬件设备号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux中的硬件设备号&#34;&gt;#&lt;/a&gt; Linux 中的硬件设备号&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grk4dj6cdqj30o80k2766.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;选择适当的版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选择适当的版本&#34;&gt;#&lt;/a&gt; 选择适当的版本&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva1.sinaimg.cn/large/008jSNE7ly8grk4hfc652j30nl0800vq.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;双系统安装步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#双系统安装步骤&#34;&gt;#&lt;/a&gt; 双系统安装步骤&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI0NjI0NTM5L2FydGljbGUvZGV0YWlscy84MTc3NTYzNT9vcHNfcmVxdWVzdF9taXNjPSZhbXA7cmVxdWVzdF9pZD0mYW1wO2Jpel9pZD0xMDImYW1wO3V0bV90ZXJtPXVidW50dSVFNSU4RiU4QyVFNyVCMyVCQiVFNyVCQiU5RiVFNSVBRSU4OSVFOCVBMyU4NSZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMg==&#34;&gt;https://blog.csdn.net/qq_24624539/article/details/81775635?ops_request_misc=&amp;amp;request_id=&amp;amp;biz_id=102&amp;amp;utm_term=ubuntu 双系统安装 &amp;amp; utm_medium=distribute.pc_search_result.none-task-blog-2&lt;/span&gt;&lt;sub&gt;all&lt;/sub&gt;sobaiduweb~default-1-.nonecase&amp;amp;spm=1018.2226.3001.4187&lt;/p&gt;
&lt;h2 id=&#34;命令行模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令行模式&#34;&gt;#&lt;/a&gt; 命令行模式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ctrl Alt Backspace：&lt;strong&gt;重新启动&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Ctrl Alt 【F1】&lt;sub&gt;【F6】：** 命令登入 tty1&lt;/sub&gt;tty6 终端 **&lt;/li&gt;
&lt;li&gt;Ctrl Alt 【7】：&lt;strong&gt;图形界面桌面&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;startx:&lt;strong&gt; 启动图形界面&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;默认 root 的提示符为 #；一般身份用户的提示符为 $&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;exit:&lt;strong&gt; 注销&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;date +%Y%m%d：&lt;strong&gt;显示日期&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;cal  month  year：&lt;strong&gt;列出月份的月历&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;bc:&lt;strong&gt; 计算器&lt;/strong&gt;（quit 离开计算器）&lt;/li&gt;
&lt;li&gt;Tab：&lt;strong&gt;大小写切换键，且具有命令补全与文件补齐的功能&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Ctrl  C：&lt;strong&gt;中止当前程序&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Ctrl  d：&lt;strong&gt;文件结束或输入结束，可用来取代 exit 的输入&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;man  命令：&lt;strong&gt;命令使用指南&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grk6cv0b1kj30of0lamzm.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
man -f  命令：获取关于命令的信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;man 数字  命令：获取 man N page 页中的文件数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;man -k  命令：找到更多的帮助文件数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;who：&lt;strong&gt;看谁在线&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;netstat -a：&lt;strong&gt;查看网络的联机状态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;ps  -aux：&lt;strong&gt;查看后台执行的程序&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;shutdown&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva2.sinaimg.cn/large/008jSNE7ly8grk6tpdxsyj30ni0hd426.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;sync：&lt;strong&gt;在内存中尚未更新的数据就会写入硬盘中&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;reboot:&lt;strong&gt; 重启&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;halt,poweroff：&lt;strong&gt;关机&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
